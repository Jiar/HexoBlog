{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/images/Dingyuehao.jpg","path":"images/Dingyuehao.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"3c5c14a0932a7475cb678d3e9a2750ed9eac5ac8","modified":1605066064629},{"_id":"source/README.md","hash":"0fdce265e11861fb596beef08cee278081033366","modified":1605066271072},{"_id":"source/_posts/About-Blog-About-Me.md","hash":"a4f116fd2a71e304a36b502b6952ce41de28e438","modified":1644828690159},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color.md","hash":"69654ad1b4be80c9bbfe3981562c24c6aaf5013a","modified":1644828925035},{"_id":"source/_posts/.DS_Store","hash":"4d587cd2b431d1c8e23520fad94a3ba29af33a5b","modified":1644825707450},{"_id":"source/_posts/UITableview分割线.md","hash":"d3a996a21fff803eb1e10791b1682820d2b7b186","modified":1605063936540},{"_id":"source/.DS_Store","hash":"75e3f9b31fb24daff0badcbc8043e6bd487adfcd","modified":1605063729084},{"_id":"source/_posts/JRAlertController.md","hash":"ab8bdc2d5fe0058c029bd539ee7fb0adc4fd6b08","modified":1644828996920},{"_id":"source/_posts/TCP四次挥手简介.md","hash":"64d3671fb3a2c891c22567732471ad568859aa64","modified":1644830413475},{"_id":"source/_posts/TCP三次握手简介.md","hash":"c56ed6e46b21c1743b75c4d9c57a39e47ae992a5","modified":1644829007692},{"_id":"source/_posts/UITextField光标异常.md","hash":"0ffdfc75bae71248fafc981229604fa513f50232","modified":1644829057520},{"_id":"source/_posts/从此不再担心键盘遮住输入框OC2.md","hash":"310ea4aa99d7fc830c4359787b88f969907b204e","modified":1644830476934},{"_id":"source/_posts/从此不再担心键盘遮住输入框OC1.md","hash":"62e6a0beb14a640e61b4d5f740461d4516cc5206","modified":1644830491710},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0.md","hash":"a07f5b6870007a1551863b5d8f4893af7b4a04c6","modified":1644828640747},{"_id":"source/about/index.md","hash":"6345c032b8895940ba78623bbd4f12b3771535be","modified":1605063714131},{"_id":"source/_posts/iOS项目持续集成.md","hash":"f383003462146786695be8b26c31663ed1481917","modified":1644828979991},{"_id":"source/about/.DS_Store","hash":"f2aee57486db29d3a9028ecfe1f84362e50b5aa4","modified":1500052902000},{"_id":"source/categories/.DS_Store","hash":"f2aee57486db29d3a9028ecfe1f84362e50b5aa4","modified":1500052035000},{"_id":"source/categories/index.md","hash":"76b373bc6efa0b0b306794eb3ac62fa9799f4c84","modified":1502418024000},{"_id":"source/tags/index.md","hash":"552e1c3cd3c7278f1f289041494a42237053bf83","modified":1464771882000},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1464771990000},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063848489},{"_id":"source/_posts/About-Blog-About-Me/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063843476},{"_id":"source/_posts/TCP三次握手简介/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063916203},{"_id":"source/_posts/JRAlertController/weibo.jpeg","hash":"273237291a49a2317d512e52e0da3f78174b0424","modified":1478780404000},{"_id":"source/_posts/JRAlertController/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063891788},{"_id":"source/_posts/TCP三次握手简介/tcp_head.png","hash":"52244bc1ff68d4fe0001a11106625e435252aefe","modified":1502675522000},{"_id":"source/_posts/TCP四次挥手简介/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063921213},{"_id":"source/_posts/TCP四次挥手简介/tcp_head.png","hash":"52244bc1ff68d4fe0001a11106625e435252aefe","modified":1502675522000},{"_id":"source/_posts/UITableview分割线/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063972868},{"_id":"source/_posts/UITextField光标异常/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063975843},{"_id":"source/_posts/iOS项目持续集成/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063886780},{"_id":"source/_posts/iOS项目持续集成/163EmailHelp.png","hash":"18635a141ec857edf9521a4fe561539349151a6a","modified":1472377680000},{"_id":"source/_posts/从此不再担心键盘遮住输入框OC1/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605063980852},{"_id":"source/_posts/从此不再担心键盘遮住输入框OC2/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605064006602},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1605064011612},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/Project-Build-Settings-Swift-Language-Version.png","hash":"18768b1243ece6a46d6a1e1d9807075270e03022","modified":1497000125000},{"_id":"source/images/Dingyuehao.jpg","hash":"f0b67f7feb19a9235847f0bcdc8e6fff9349d68c","modified":1472402982000},{"_id":"source/_posts/iOS项目持续集成/ExecuteShell.jpeg","hash":"dc271d4aebccaaf70b3601dfec40257f9cf13a00","modified":1472370916000},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/Eureka-commit.jpeg","hash":"cf9b07c2692ad5749d21cfe2642e4a16815bcdef","modified":1496996210000},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png","hash":"902d67478438ee7a2f4b4d204ef40880ce9d5dff","modified":1464849606000},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png","hash":"958ebb0377b676981dc55901f0a02bc0e5316894","modified":1464849610000},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/Xcode9.0-beta-icon.png","hash":"4c19e4d06836aac4f68b6a776b12bd6583a8c2ae","modified":1496994120000},{"_id":"source/_posts/TCP三次握手简介/tcp_hand_shake_detail.png","hash":"b2eb2704cc7e0e87d4d857df4eaa126e1a2b7bb4","modified":1508576441000},{"_id":"source/_posts/iOS项目持续集成/HaveFileNameAndUUID.png","hash":"11f105a5f63d7d221c42c205f988ec8fa8c4a52a","modified":1472371200000},{"_id":"source/_posts/iOS项目持续集成/ignore.jpeg","hash":"5d10453c768f9d4c74ab1f70144c71d3ebfd0cab","modified":1472370722000},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png","hash":"4e32c6d59e4767f1caf3408eb7b2a1ecaa175451","modified":1464848418000},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png","hash":"5dbdc7d6cdd30632c0fe971f6dc6e048f98e9088","modified":1464849622000},{"_id":"source/_posts/TCP四次挥手简介/tcp_hand_wave_detail.png","hash":"05d840184ea4864c435b35156707555ed25457bf","modified":1508557445000},{"_id":"source/_posts/TCP三次握手简介/wireshark_welcome.png","hash":"32c9146c3efdec6f5f5a2bdac7e1a03a95e0be33","modified":1503021592000},{"_id":"source/_posts/UITextField光标异常/UITextField光标异常.gif","hash":"66503d6ca51a0f02f68234bf9af80f97ecd3af05","modified":1467686792000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_welcome.png","hash":"32c9146c3efdec6f5f5a2bdac7e1a03a95e0be33","modified":1503021592000},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep3.jpeg","hash":"ae49a858936ae5e51f7c75c53e66cf8c7f066dc8","modified":1472391578000},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png","hash":"ab6258c092f9289cb31a0e5d8295f821bd73cdb0","modified":1464851838000},{"_id":"source/_posts/iOS项目持续集成/ExtendedE-mailNotificationPart1.jpeg","hash":"aa84a82f43205c6615775fb52117a9dec174b27c","modified":1472379106000},{"_id":"source/_posts/iOS项目持续集成/ProvisioningProfilesDirectoryPath.jpeg","hash":"9b36dc63cdfd52207152f659dc5d89ad92af6d27","modified":1472373384000},{"_id":"source/_posts/TCP三次握手简介/tcp_hand_shake_three_times.png","hash":"8409beb1c0dcb894e4ca87fbb7ff743ed71525fe","modified":1508576404000},{"_id":"source/_posts/iOS项目持续集成/CodeSigning&OSXKeychainOptions.jpeg","hash":"dcb3f64ff6540ab614a7792e3105638c6fbdba1b","modified":1472373722000},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep2.jpeg","hash":"9df7869b7fe384c77b5cbc7397a66a12446fbf26","modified":1472391460000},{"_id":"source/_posts/iOS项目持续集成/客户端授权密码.jpeg","hash":"f92e380a066db7fda42bc487402418c8fb6bcc58","modified":1472378384000},{"_id":"source/_posts/iOS项目持续集成/邮件通知.jpeg","hash":"ed111fab23be9fd534dfde84878c425e9ac84afe","modified":1472377592000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_main.png","hash":"8e41a997bfc100b1534d8fec66258592dc6d0c04","modified":1503021725000},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep1.jpeg","hash":"b0c6b36f01cc5e574566b2082b9132d69ed7a5b7","modified":1472391298000},{"_id":"source/_posts/iOS项目持续集成/POP3SMTPIMAP.jpeg","hash":"def55b0d898fa5ccda17c0539d76d3ef63c90531","modified":1472378048000},{"_id":"source/_posts/TCP三次握手简介/wireshark_main.png","hash":"8e41a997bfc100b1534d8fec66258592dc6d0c04","modified":1503021725000},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep4.jpeg","hash":"ac5b7157e32d5e0bf8af90adebff70fd9902af9b","modified":1472391830000},{"_id":"source/_posts/iOS项目持续集成/ExtendedE-mailNotificationPart3.jpeg","hash":"2d1c07f3dc0102b0113e649ca0cb2837a10644b6","modified":1472390990000},{"_id":"source/_posts/iOS项目持续集成/KeychainsAndCodeSigningIdentities.jpeg","hash":"76b1d7d4ee3e14176094ba9310f17a2248fe272c","modified":1472374690000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1605014799833},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1605014799835},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1605014799833},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1605014799833},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1605014799836},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1605014799836},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1605014799836},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1605014799836},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1605014799860},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1605014799834},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1605014799834},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1605014799840},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1605014799837},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1605014799834},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1605014799835},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1605014799835},{"_id":"themes/next/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1605014799837},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1605014799835},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1605014799835},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1605014799835},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1605014799835},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1605014799835},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1605014799835},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1605014799837},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1605014799838},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1605014799837},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1605014799837},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1605014799838},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1605014799838},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1605014799838},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1605014799838},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1605014799838},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1605014799840},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1605014799840},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1605014799841},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1605014799841},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1605014799841},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1605014799841},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1605014799841},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1605014799842},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1605014799842},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1605014799841},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1605014799842},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1605014799842},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1605014799842},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1605014799842},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1605014799843},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1605014799843},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1605014799843},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1605014799843},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1605014799844},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1605014799843},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1605014799844},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1605014799859},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1605014799844},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1605014799844},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1605014799859},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1605014799859},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1605014799869},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1605014799859},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1605014799859},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1605014799859},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1605014799834},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1605014799834},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1605014799834},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1605014799834},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1605014799838},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1605014799839},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1605014799839},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1605014799839},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1605014799839},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1605014799839},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1605014799840},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1605014799839},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1605014799840},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1605014799840},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1605014799839},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1605014799844},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1605014799840},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1605014799840},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1605014799845},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1605014799845},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1605014799845},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1605014799845},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1605014799847},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1605014799847},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1605014799849},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1605014799854},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1605014799852},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1605014799855},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1605014799850},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1605014799855},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1605014799849},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1605014799850},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1605014799851},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1605014799860},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1605014799851},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1605014799862},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1605014799862},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1605014799862},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1605014799866},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1605014799866},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1605014799867},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1605014799868},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1605014799868},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1605014799868},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1605014799869},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1605014799869},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1605014799869},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1605014799869},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1605014799870},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1605014799870},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1605014799870},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1605014799870},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1605014799870},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1605014799870},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1605014799871},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1605014799891},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1605014799890},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1605014799891},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1605014799891},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1605014799891},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1605014799884},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1605014799892},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1605014799892},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1605014799892},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1605014799892},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1605014799893},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1605014799893},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1605014799893},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1605014799893},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1605014799893},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1605014799894},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1605014799894},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1605014799894},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1605014799894},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1605014799897},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1605014799894},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1605014799897},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1605014799845},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1605014799846},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1605014799846},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1605014799846},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1605014799846},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1605014799846},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1605014799846},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1605014799847},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1605014799847},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1605014799847},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1605014799848},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1605014799848},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1605014799848},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1605014799848},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1605014799848},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1605014799848},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1605014799849},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1605014799849},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1605014799852},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1605014799852},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1605014799852},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1605014799852},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1605014799853},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1605014799853},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1605014799853},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1605014799853},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1605014799853},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1605014799854},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1605014799854},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1605014799854},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1605014799855},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1605014799855},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1605014799855},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1605014799856},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1605014799856},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1605014799856},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1605014799856},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1605014799856},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1605014799857},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1605014799857},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1605014799857},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1605014799858},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1605014799850},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1605014799858},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1605014799850},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1605014799851},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1605014799851},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1605014799860},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1605014799851},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1605014799860},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1605014799861},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1605014799861},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1605014799861},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1605014799861},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1605014799861},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1605014799861},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1605014799862},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1605014799862},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1605014799862},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1605014799888},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1605014799888},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1605014799889},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1605014799889},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1605014799895},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1605014799889},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1605014799896},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1605014799871},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1605014799871},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1605014799871},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1605014799912},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1605014799912},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1605014799875},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1605014799877},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1605014799877},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1605014799880},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1605014799880},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1605014799880},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1605014799881},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1605014799881},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1605014799882},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1605014799882},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1605014799883},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1605014799884},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1605014799885},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1605014799885},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1605014799885},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1605014799885},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1605014799885},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1605014799886},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1605014799886},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1605014799886},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1605014799886},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1605014799887},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1605014799887},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1605014799887},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1605014799887},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1605014799887},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1605014799888},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1605014799888},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1605014799887},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1605014799898},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1605014799872},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1605014799872},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1605014799911},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1605014799872},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1605014799872},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1605014799872},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1605014799872},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1605014799873},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1605014799873},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1605014799873},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1605014799873},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1605014799873},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1605014799873},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1605014799874},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1605014799874},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1605014799874},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1605014799874},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1605014799874},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1605014799875},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1605014799875},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1605014799875},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1605014799875},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1605014799876},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1605014799876},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1605014799876},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1605014799876},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1605014799876},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1605014799877},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1605014799877},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1605014799877},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1605014799877},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1605014799877},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1605014799878},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1605014799878},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1605014799878},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1605014799878},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1605014799878},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1605014799879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1605014799879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1605014799879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1605014799879},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1605014799880},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1605014799881},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1605014799881},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1605014799881},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1605014799881},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1605014799882},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1605014799882},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1605014799883},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1605014799883},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1605014799883},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1605014799883},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1605014799883},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1605014799911},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1605014799910},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep5.jpeg","hash":"145b6dbf869ebc5407a9b127f600a65f0fa754ab","modified":1472392184000},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake_second.png","hash":"58b82d1dd44e49a97ce921f02be5a05348edb387","modified":1508577956000},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake_third.png","hash":"9112d01922a9328cd42fdd6c7ab0c105613e3b8e","modified":1508577970000},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake_first.png","hash":"7fffab23543be774a137fb824c13f8474dbd0b57","modified":1508577942000},{"_id":"source/_posts/iOS项目持续集成/NoFileNameAndUUID.jpeg","hash":"7670ee927ac32fb48a81f6e8d5e3358f8952282a","modified":1472373222000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_fourth.png","hash":"461bf70d4df9b4fd8a34afa2a682bce2394af0d2","modified":1508577867000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_third.png","hash":"e1aaef991d59fc6c7d39293d1733707a09fb470a","modified":1508577773000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_second.png","hash":"ac45b7bb26de831c2ca02cc84918161991cbcf85","modified":1508577671000},{"_id":"source/_posts/iOS项目持续集成/ExtendedE-mailNotificationPart2.jpeg","hash":"ee7527488d1dfd067813f3e117f50b6929cf8d64","modified":1472379738000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave.png","hash":"968892bf79454c8a0a24705096bd9c3a332e2616","modified":1508577552000},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_first.png","hash":"052ad5b984df4e981d77c0a608d90e3939ad8498","modified":1508577694000},{"_id":"source/_posts/iOS项目持续集成/ContentTokenReference.jpeg","hash":"f6624eba975928a75481e65528e658dfa9f1cbc0","modified":1472390698000},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake.png","hash":"e89136f3f77e0f3ed416aebc0f5b6c5065ccd566","modified":1508577926000},{"_id":"public/about/index.html","hash":"bdc3b6efbcc1c3e73daa8f107cd60f164c5afbf9","modified":1644828281532},{"_id":"public/categories/index.html","hash":"e4e14918cef473c406005733aa0fb4f6cb31e6c3","modified":1644828281532},{"_id":"public/tags/index.html","hash":"d0879c0f356ec5fa17bd44dea9cfba86ee8aaacc","modified":1644828281532},{"_id":"public/2016/07/05/UITextField光标异常/index.html","hash":"8aca0db0a5345174653d1350a037b7e94a80ade7","modified":1644829128999},{"_id":"public/2015/11/11/About-Blog-About-Me/index.html","hash":"50a180ceee43c7dcdea9076cdf558ee387a7cbd3","modified":1644829128999},{"_id":"public/archives/index.html","hash":"0f6f79f1cc2c7b342ff7206ddbc518d597816e34","modified":1644828695612},{"_id":"public/archives/page/2/index.html","hash":"c144a6f712353de38314c3eb1ab752771136b4e5","modified":1644828281532},{"_id":"public/archives/2015/index.html","hash":"f5be280bad6634830a168b8ce1698a25a5ffec49","modified":1644828281532},{"_id":"public/archives/2015/11/index.html","hash":"701c5125319b2c492c174d17c9d145fa31eaf0ac","modified":1644828281532},{"_id":"public/archives/2015/12/index.html","hash":"3e5f85fa35439eab1d0c8ce5371140d8194c5950","modified":1644828281532},{"_id":"public/archives/2016/index.html","hash":"0bd38c4bcde4866c890c838ec0cdac4a8c36840e","modified":1644828281532},{"_id":"public/archives/2016/06/index.html","hash":"bd1f1e52bf42e997da61c7a1a4aab5c41091b532","modified":1644828281532},{"_id":"public/archives/2016/07/index.html","hash":"b91f821aa4d1ddb2d57c205f37136a750f5eb915","modified":1644828281532},{"_id":"public/archives/2016/08/index.html","hash":"32085ef1a907fd3198b6bb1b6a529882c634be13","modified":1644828281532},{"_id":"public/archives/2016/11/index.html","hash":"aa93be05b58d395d04eac831c2757613fbb05801","modified":1644828281532},{"_id":"public/archives/2017/index.html","hash":"9cfaaf2fe2814c4c7ae870b1302dfb97dfdb2368","modified":1644828281532},{"_id":"public/archives/2017/06/index.html","hash":"0965204308437fdbe7edc6bb74c8e32fe7e8a097","modified":1644828281532},{"_id":"public/archives/2017/08/index.html","hash":"67ec2d472b310c8b94389c7e87b3b0a05faa5c99","modified":1644828281532},{"_id":"public/categories/Life/index.html","hash":"ee5188b242292fa1be32b3d52350764ad526de4a","modified":1644828281532},{"_id":"public/categories/Android/index.html","hash":"252d2dafc6164e861ad7c067cedfc431c3a3e407","modified":1644828281532},{"_id":"public/categories/计算机网络/index.html","hash":"a1f4740f955488813c14843d94d8cfbf1a4b1cdc","modified":1644828281532},{"_id":"public/categories/iOS/index.html","hash":"59fce9f30beaf4ceb123b304c73a4c8878036f1e","modified":1644828695612},{"_id":"public/page/2/index.html","hash":"c26e87b2073ab58eca4e4eea36a7bc3027e43a67","modified":1644830496290},{"_id":"public/tags/Jiar/index.html","hash":"e6621765e4d9f6ca133046d0f958f30f6a82f501","modified":1644828281532},{"_id":"public/tags/Blog/index.html","hash":"34a442b619aee0c4f8fdab2ac85c637c9e3d4478","modified":1644828281532},{"_id":"public/tags/Jiar-s-Blog/index.html","hash":"dd83cc590dc0011a162a419f4e16ea5255c4a2d6","modified":1644828281532},{"_id":"public/tags/iOS/index.html","hash":"44b408e0114882721c7c7ef7418d3ccfda1a6ed0","modified":1644828695612},{"_id":"public/tags/Android/index.html","hash":"d0637dcf32b923762c336af70c4fcfc25b9318cc","modified":1644828281532},{"_id":"public/tags/开发者/index.html","hash":"41794b66c04ae08f035864967608296de027b0bd","modified":1644828281532},{"_id":"public/tags/BaiduMap/index.html","hash":"0588764d9b3403121336e60d19e481d586e2a319","modified":1644828281532},{"_id":"public/tags/MyLocationConfiguration/index.html","hash":"28a8bb62bba58f93feeb8f64086a50d266277463","modified":1644828281532},{"_id":"public/tags/accuracyCircleStrokeColor/index.html","hash":"5f343cbdaf1578c5773ee83a1f2e22649ab58f8e","modified":1644828281532},{"_id":"public/tags/accuracyCircleFillColor/index.html","hash":"699fb66484f1bb8b0d765c427215ba201ca56fea","modified":1644828281532},{"_id":"public/tags/计算机网络/index.html","hash":"bbdf9c56224eafe58142b1c8b3996fc5a0a10578","modified":1644828281532},{"_id":"public/tags/TCP/index.html","hash":"0048b658122aaae8f64004019732636ae18197b7","modified":1644828281532},{"_id":"public/tags/cell/index.html","hash":"7dc55a6d260e673fe5bec4fc24f948644637d531","modified":1644828281532},{"_id":"public/tags/UITableview/index.html","hash":"d298eb79f117468b85a87a7bd7166dc6562ffa41","modified":1644828281532},{"_id":"public/tags/UITableview分割线/index.html","hash":"402d436043486be34fa5fa10cdf61c051dc86199","modified":1644828281532},{"_id":"public/tags/UITableview分割线补全/index.html","hash":"aa71a0acec7e82f661eb8544769693e60125b212","modified":1644828281532},{"_id":"public/tags/UITableview分割线隐藏/index.html","hash":"8486e61448358fbcf3372e2872cf916ea3098e31","modified":1644828281532},{"_id":"public/tags/UITextField/index.html","hash":"c576b31200a9dbeb0106511c5ba6710581798f1d","modified":1644828281532},{"_id":"public/tags/持续集成/index.html","hash":"085cc95fe8c01a1013f2ded1342da83ed2e6123b","modified":1644828281532},{"_id":"public/tags/打包/index.html","hash":"2c708bf733f7c5faeb1a36f93f1877882fdd881d","modified":1644828281532},{"_id":"public/tags/Jenkins/index.html","hash":"135aa1dcde5f5feab7035b98e651e2b79cba5a9a","modified":1644828281532},{"_id":"public/tags/Shell/index.html","hash":"5935a543b0a573d666427b0ec705ba8a58c150a3","modified":1644828281532},{"_id":"public/tags/键盘/index.html","hash":"317d166b56711011654fb27b2069281ea35bfdef","modified":1644828281532},{"_id":"public/tags/输入框/index.html","hash":"d6d70c961a6bce8d0f12aa46a746a0eb94c795d3","modified":1644828281532},{"_id":"public/tags/遮盖/index.html","hash":"1bf5ea40e2d44f06238b00cbf7d64631f056ffc8","modified":1644828281532},{"_id":"public/tags/Swift4/index.html","hash":"43672f6f8b21230ca5eb3635a913029dd2dbf0db","modified":1644828281532},{"_id":"public/tags/Xcode9-0-beta/index.html","hash":"e47c1d81fe68f2162783540ad44eaeebccdd0992","modified":1644828281532},{"_id":"public/tags/OC-Objective-C-与Swift4混编/index.html","hash":"6e04b246d7c5f406f43d16d877ab476cda04dcaa","modified":1644828281532},{"_id":"public/tags/OC-Objective-C-调用Swift4/index.html","hash":"bee1f53b5582fc5255e9f895912c4ca627f4e34a","modified":1644828281532},{"_id":"public/tags/Swift/index.html","hash":"f039be168aad58cf6ac61324f9be9b9151e72bba","modified":1644828281532},{"_id":"public/tags/JRAlertController/index.html","hash":"28ca0377c65c6df87e12ecdd9787c727d1645c28","modified":1644828281532},{"_id":"public/tags/UIAlertController/index.html","hash":"a0b4169b912a33b6441a4f491b84b6311d299928","modified":1644828281532},{"_id":"public/tags/alert/index.html","hash":"af21e09c1c0952706ba7774fe9e7242a2c83045e","modified":1644828281532},{"_id":"public/tags/sheet/index.html","hash":"6f986bc2e07d496c5f74db98733b6018b9f6853e","modified":1644828281532},{"_id":"public/2017/08/24/TCP四次挥手简介/index.html","hash":"701ffc25e8ae277e4b60c7768746895709a2644d","modified":1644830496290},{"_id":"public/2017/08/11/TCP三次握手简介/index.html","hash":"345d9411f7054ad3a63d9489a03cc95deee3f14d","modified":1644829128999},{"_id":"public/2017/06/09/适配Xcode9-0-beta与Swift4.0/index.html","hash":"15069fcce3cd7416bc8bec355729906fd9d65bca","modified":1644830330675},{"_id":"public/2016/11/11/JRAlertController/index.html","hash":"868e49966107e35554d53b6451def8404742191b","modified":1644829128999},{"_id":"public/2016/08/28/iOS项目持续集成/index.html","hash":"e87f5491b5fb593f22fad45042a6a1331a8e81e4","modified":1644829128999},{"_id":"public/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/index.html","hash":"6490c045188472b87239b959cc7139f5221cfe3c","modified":1644829128999},{"_id":"public/2016/06/02/UITableview分割线/index.html","hash":"033776f6ddd46abb5f10ad864cf36d601cff0948","modified":1644828281532},{"_id":"public/2015/12/07/从此不再担心键盘遮住输入框OC2/index.html","hash":"85c08db43b8c5d8256555dd4bdc5342dd9abf412","modified":1644830496290},{"_id":"public/2015/11/15/从此不再担心键盘遮住输入框OC1/index.html","hash":"dde1732e8eefcf3ee944d83b2b25cf963dc8f958","modified":1644830496290},{"_id":"public/index.html","hash":"5c153686712b568e8ba60b348ad8f222d0df1e4f","modified":1644830560829},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1605066403050},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1605066403050},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1605066403050},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1605066403050},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1605066403050},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1605066403050},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1605066403050},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1605066403050},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1605066403050},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1605066403050},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1605066403050},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1605066403050},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1605066403050},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1605066403050},{"_id":"public/CNAME","hash":"3c5c14a0932a7475cb678d3e9a2750ed9eac5ac8","modified":1605066403050},{"_id":"public/README.md","hash":"0fdce265e11861fb596beef08cee278081033366","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/tcp_head.png","hash":"52244bc1ff68d4fe0001a11106625e435252aefe","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/tcp_head.png","hash":"52244bc1ff68d4fe0001a11106625e435252aefe","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/163EmailHelp.png","hash":"18635a141ec857edf9521a4fe561539349151a6a","modified":1605066403050},{"_id":"public/2016/11/11/JRAlertController/weibo.jpeg","hash":"273237291a49a2317d512e52e0da3f78174b0424","modified":1605066403050},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1605066403050},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1605066403050},{"_id":"public/2017/06/09/适配Xcode9-0-beta与Swift4.0/Project-Build-Settings-Swift-Language-Version.png","hash":"18768b1243ece6a46d6a1e1d9807075270e03022","modified":1605066403050},{"_id":"public/images/Dingyuehao.jpg","hash":"f0b67f7feb19a9235847f0bcdc8e6fff9349d68c","modified":1605066403050},{"_id":"public/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png","hash":"902d67478438ee7a2f4b4d204ef40880ce9d5dff","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ExecuteShell.jpeg","hash":"dc271d4aebccaaf70b3601dfec40257f9cf13a00","modified":1605066403050},{"_id":"public/2017/06/09/适配Xcode9-0-beta与Swift4.0/Eureka-commit.jpeg","hash":"cf9b07c2692ad5749d21cfe2642e4a16815bcdef","modified":1605066403050},{"_id":"public/2017/06/09/适配Xcode9-0-beta与Swift4.0/Xcode9.0-beta-icon.png","hash":"4c19e4d06836aac4f68b6a776b12bd6583a8c2ae","modified":1605066403050},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1605066403050},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1605066403050},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1605066403050},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1605066403050},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1605066403050},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1605066403050},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1605066403050},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1605066403050},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1605066403050},{"_id":"public/css/main.css","hash":"896d3b1594e5344f8045b316de682b228af2230d","modified":1605066403050},{"_id":"public/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png","hash":"5dbdc7d6cdd30632c0fe971f6dc6e048f98e9088","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/tcp_hand_shake_detail.png","hash":"b2eb2704cc7e0e87d4d857df4eaa126e1a2b7bb4","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/HaveFileNameAndUUID.png","hash":"11f105a5f63d7d221c42c205f988ec8fa8c4a52a","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ignore.jpeg","hash":"5d10453c768f9d4c74ab1f70144c71d3ebfd0cab","modified":1605066403050},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1605066403050},{"_id":"public/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png","hash":"4e32c6d59e4767f1caf3408eb7b2a1ecaa175451","modified":1605066403050},{"_id":"public/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png","hash":"ab6258c092f9289cb31a0e5d8295f821bd73cdb0","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/wireshark_welcome.png","hash":"32c9146c3efdec6f5f5a2bdac7e1a03a95e0be33","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_welcome.png","hash":"32c9146c3efdec6f5f5a2bdac7e1a03a95e0be33","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/EditableEmailNotificationStep3.jpeg","hash":"ae49a858936ae5e51f7c75c53e66cf8c7f066dc8","modified":1605066403050},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/tcp_hand_wave_detail.png","hash":"05d840184ea4864c435b35156707555ed25457bf","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ProvisioningProfilesDirectoryPath.jpeg","hash":"9b36dc63cdfd52207152f659dc5d89ad92af6d27","modified":1605066403050},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1605066403050},{"_id":"public/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png","hash":"958ebb0377b676981dc55901f0a02bc0e5316894","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/CodeSigning&OSXKeychainOptions.jpeg","hash":"dcb3f64ff6540ab614a7792e3105638c6fbdba1b","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/EditableEmailNotificationStep2.jpeg","hash":"9df7869b7fe384c77b5cbc7397a66a12446fbf26","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ExtendedE-mailNotificationPart1.jpeg","hash":"aa84a82f43205c6615775fb52117a9dec174b27c","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/客户端授权密码.jpeg","hash":"f92e380a066db7fda42bc487402418c8fb6bcc58","modified":1605066403050},{"_id":"public/2016/07/05/UITextField光标异常/UITextField光标异常.gif","hash":"66503d6ca51a0f02f68234bf9af80f97ecd3af05","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/邮件通知.jpeg","hash":"ed111fab23be9fd534dfde84878c425e9ac84afe","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/tcp_hand_shake_three_times.png","hash":"8409beb1c0dcb894e4ca87fbb7ff743ed71525fe","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/wireshark_main.png","hash":"8e41a997bfc100b1534d8fec66258592dc6d0c04","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_main.png","hash":"8e41a997bfc100b1534d8fec66258592dc6d0c04","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/EditableEmailNotificationStep1.jpeg","hash":"b0c6b36f01cc5e574566b2082b9132d69ed7a5b7","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/POP3SMTPIMAP.jpeg","hash":"def55b0d898fa5ccda17c0539d76d3ef63c90531","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/EditableEmailNotificationStep4.jpeg","hash":"ac5b7157e32d5e0bf8af90adebff70fd9902af9b","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ExtendedE-mailNotificationPart3.jpeg","hash":"2d1c07f3dc0102b0113e649ca0cb2837a10644b6","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/KeychainsAndCodeSigningIdentities.jpeg","hash":"76b1d7d4ee3e14176094ba9310f17a2248fe272c","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/EditableEmailNotificationStep5.jpeg","hash":"145b6dbf869ebc5407a9b127f600a65f0fa754ab","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/wireshark_tcp_shake_first.png","hash":"7fffab23543be774a137fb824c13f8474dbd0b57","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/wireshark_tcp_shake_third.png","hash":"9112d01922a9328cd42fdd6c7ab0c105613e3b8e","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/wireshark_tcp_shake_second.png","hash":"58b82d1dd44e49a97ce921f02be5a05348edb387","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ExtendedE-mailNotificationPart2.jpeg","hash":"ee7527488d1dfd067813f3e117f50b6929cf8d64","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_tcp_wave.png","hash":"968892bf79454c8a0a24705096bd9c3a332e2616","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_tcp_wave_second.png","hash":"ac45b7bb26de831c2ca02cc84918161991cbcf85","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/NoFileNameAndUUID.jpeg","hash":"7670ee927ac32fb48a81f6e8d5e3358f8952282a","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_tcp_wave_third.png","hash":"e1aaef991d59fc6c7d39293d1733707a09fb470a","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_tcp_wave_first.png","hash":"052ad5b984df4e981d77c0a608d90e3939ad8498","modified":1605066403050},{"_id":"public/2016/08/28/iOS项目持续集成/ContentTokenReference.jpeg","hash":"f6624eba975928a75481e65528e658dfa9f1cbc0","modified":1605066403050},{"_id":"public/2017/08/24/TCP四次挥手简介/wireshark_tcp_wave_fourth.png","hash":"461bf70d4df9b4fd8a34afa2a682bce2394af0d2","modified":1605066403050},{"_id":"public/2017/08/11/TCP三次握手简介/wireshark_tcp_shake.png","hash":"e89136f3f77e0f3ed416aebc0f5b6c5065ccd566","modified":1605066403050},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution.md","hash":"b6a3281274ff5f471b1ec658d9c4bb781b73f9a3","modified":1644830555784},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/Logo.png","hash":"b9e31032c3edd9e1ca5ce477314f6965bdd1582d","modified":1644826303399},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/canCacheScrollState.gif","hash":"929c5f61d7c26f83927743b5b294410027c83a9b","modified":1644827967185},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/twitter.gif","hash":"8c2e6a1c56a654b21dd4aaa520bedc45fdccc192","modified":1644827560003},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/weibo.gif","hash":"94f2ab7b20f022f60e5fdca6e1658b3183b1c67a","modified":1644827490110},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/transparent.gif","hash":"e04da0f374cf4bdc6f20f271b2bf11ef646f1e2b","modified":1547555553000},{"_id":"public/archives/2019/index.html","hash":"6d29c4b0a5882157a3d4c54d45d583ba74e16d82","modified":1644828695612},{"_id":"public/archives/2019/02/index.html","hash":"37bd1c237de378e2472047056a74007f114faf09","modified":1644828695612},{"_id":"public/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/index.html","hash":"29be66978bd99adb7eebe4a17d9045f621cbb210","modified":1644830560829},{"_id":"public/tags/UIScrollView/index.html","hash":"ecd811bc794844f24b12eaa32ff6d83fd8687429","modified":1644828695612},{"_id":"public/tags/嵌套/index.html","hash":"750d77a70ca49493c12f9bf058bed0b53f22c2e7","modified":1644828695612},{"_id":"public/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/Logo.png","hash":"b9e31032c3edd9e1ca5ce477314f6965bdd1582d","modified":1644828281532},{"_id":"public/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/canCacheScrollState.gif","hash":"929c5f61d7c26f83927743b5b294410027c83a9b","modified":1644828281532},{"_id":"public/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/twitter.gif","hash":"8c2e6a1c56a654b21dd4aaa520bedc45fdccc192","modified":1644828281532},{"_id":"public/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/weibo.gif","hash":"94f2ab7b20f022f60e5fdca6e1658b3183b1c67a","modified":1644828281532},{"_id":"public/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/transparent.gif","hash":"e04da0f374cf4bdc6f20f271b2bf11ef646f1e2b","modified":1644828281532}],"Category":[{"name":"Life","_id":"ckhcv3f6j0004rlf6acuuhbje"},{"name":"Android","_id":"ckhcv3f6n000arlf6562m2q9w"},{"name":"计算机网络","_id":"ckhcv3f6p000frlf6d0921haq"},{"name":"iOS","_id":"ckhcv3f6t000nrlf6cxcn4csp"}],"Data":[],"Page":[{"title":"about","date":"2017-07-14T17:17:33.000Z","type":"about","comments":0,"_content":"\nWelcome to Jiar's Blog","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-07-15 01:17:33\ntype: \"about\"\ncomments: false\n---\n\nWelcome to Jiar's Blog","updated":"2020-11-11T03:01:54.131Z","path":"about/index.html","layout":"page","_id":"ckhcv3f6b0000rlf6fz5j6byd","content":"<p>Welcome to Jiar’s Blog</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to Jiar’s Blog</p>\n"},{"title":"categories","date":"2017-07-14T17:06:08.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-15 01:06:08\ntype: \"categories\"\ncomments: false\n---\n\n","updated":"2017-08-11T02:20:24.000Z","path":"categories/index.html","layout":"page","_id":"ckhcv3f6h0002rlf629j28dl8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-06-01T09:03:15.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-01 17:03:15\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-06-01T09:04:42.000Z","path":"tags/index.html","layout":"page","_id":"ckhcv3f6l0006rlf6edtpaxrs","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"About Blog About Me","date":"2015-11-11T00:30:00.000Z","_content":"\n- 关于博客\n\n\t- 博客由来：\n\n\t\t一方面为了记录一些技术相关内容，写作的同时可以巩固知识，同时可以提升写作水平。另一方面又可以发扬知识分享精神，给大家分享一些博主的所学所得。利人利己，何乐不为。\n\n\t- 博客方向：\n\n    \tJiar's Blog 是计算机编程技术博客，于2015年11月11日（这是一个比较有意思的节日）正式上线。博客包括的主要方向：移动软件开发，网站开发，后台开发，前端开发，微信建站，手机游戏开发...包括的主要编程语言有：Objective-C，Swift，Java，js...分类无上限，适博主心情而定。\n\n\n- 关于我\n\n    - 学习经历：\n\n        大一玩得比较多，勉勉强强自学了C和Java。写了“C版链表式学生管理系统”，“Java版多人聊天室”等小成品。\n\n        大二进了一个工作室，从此一发不可收拾...自学了javaweb、sql、html、css、js、SSH、Android、iOS...大二学得比较宽泛，也没那么精细，但还是写了些小玩意：“基于javaweb的网页版学生信息管理系统”，“基于SSH框架的眼镜在线直销，“Android app Dr.Car行车伴侣”...同时也和工作室的小伙伴们拿了五六个计算机技术类奖，下至省级三等奖，上到国家一等奖。\n\n        大三的生活主要以在学长开的公司接外包项目锻炼技术为主，目前已经有了5个项目经历，除了第一个项目是负责Android端独立开发，剩下的四个项目中皆是负责iOS端独立开发...\n\n        大四...待定...\n\n    - 自定义：\n        \n        喜欢编程，尤其是一些新奇的编程技术，爱好极客产品。喜欢逛Github、V2EX、知乎、简书等社区论坛。喜欢旅行，唱歌，爬山，游泳。\n        \n        爱编程，爱交友，爱玩。\n\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/About-Blog-About-Me.md","raw":"---\ntitle: About Blog About Me\ndate: 2015-11-11 8:30:00\ncategories: Life\ntags:\n- Jiar\n- Blog\n- Jiar's Blog\n- iOS\n- Android\n- 开发者\n---\n\n- 关于博客\n\n\t- 博客由来：\n\n\t\t一方面为了记录一些技术相关内容，写作的同时可以巩固知识，同时可以提升写作水平。另一方面又可以发扬知识分享精神，给大家分享一些博主的所学所得。利人利己，何乐不为。\n\n\t- 博客方向：\n\n    \tJiar's Blog 是计算机编程技术博客，于2015年11月11日（这是一个比较有意思的节日）正式上线。博客包括的主要方向：移动软件开发，网站开发，后台开发，前端开发，微信建站，手机游戏开发...包括的主要编程语言有：Objective-C，Swift，Java，js...分类无上限，适博主心情而定。\n\n\n- 关于我\n\n    - 学习经历：\n\n        大一玩得比较多，勉勉强强自学了C和Java。写了“C版链表式学生管理系统”，“Java版多人聊天室”等小成品。\n\n        大二进了一个工作室，从此一发不可收拾...自学了javaweb、sql、html、css、js、SSH、Android、iOS...大二学得比较宽泛，也没那么精细，但还是写了些小玩意：“基于javaweb的网页版学生信息管理系统”，“基于SSH框架的眼镜在线直销，“Android app Dr.Car行车伴侣”...同时也和工作室的小伙伴们拿了五六个计算机技术类奖，下至省级三等奖，上到国家一等奖。\n\n        大三的生活主要以在学长开的公司接外包项目锻炼技术为主，目前已经有了5个项目经历，除了第一个项目是负责Android端独立开发，剩下的四个项目中皆是负责iOS端独立开发...\n\n        大四...待定...\n\n    - 自定义：\n        \n        喜欢编程，尤其是一些新奇的编程技术，爱好极客产品。喜欢逛Github、V2EX、知乎、简书等社区论坛。喜欢旅行，唱歌，爬山，游泳。\n        \n        爱编程，爱交友，爱玩。\n\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"About-Blog-About-Me","published":1,"updated":"2022-02-14T08:52:29.641Z","_id":"ckhcv3f6f0001rlf669d4ggdr","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>关于博客</p>\n<ul>\n<li><p>博客由来：</p>\n<p>  一方面为了记录一些技术相关内容，写作的同时可以巩固知识，同时可以提升写作水平。另一方面又可以发扬知识分享精神，给大家分享一些博主的所学所得。利人利己，何乐不为。</p>\n</li>\n<li><p>博客方向：</p>\n<p>  Jiar’s Blog 是计算机编程技术博客，于2015年11月11日（这是一个比较有意思的节日）正式上线。博客包括的主要方向：移动软件开发，网站开发，后台开发，前端开发，微信建站，手机游戏开发…包括的主要编程语言有：Objective-C，Swift，Java，js…分类无上限，适博主心情而定。</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>关于我</p>\n<ul>\n<li><p>学习经历：</p>\n<p>  大一玩得比较多，勉勉强强自学了C和Java。写了“C版链表式学生管理系统”，“Java版多人聊天室”等小成品。</p>\n<p>  大二进了一个工作室，从此一发不可收拾…自学了javaweb、sql、html、css、js、SSH、Android、iOS…大二学得比较宽泛，也没那么精细，但还是写了些小玩意：“基于javaweb的网页版学生信息管理系统”，“基于SSH框架的眼镜在线直销，“Android app Dr.Car行车伴侣”…同时也和工作室的小伙伴们拿了五六个计算机技术类奖，下至省级三等奖，上到国家一等奖。</p>\n<p>  大三的生活主要以在学长开的公司接外包项目锻炼技术为主，目前已经有了5个项目经历，除了第一个项目是负责Android端独立开发，剩下的四个项目中皆是负责iOS端独立开发…</p>\n<p>  大四…待定…</p>\n</li>\n<li><p>自定义：</p>\n<p>  喜欢编程，尤其是一些新奇的编程技术，爱好极客产品。喜欢逛Github、V2EX、知乎、简书等社区论坛。喜欢旅行，唱歌，爬山，游泳。</p>\n<p>  爱编程，爱交友，爱玩。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>关于博客</p>\n<ul>\n<li><p>博客由来：</p>\n<p>  一方面为了记录一些技术相关内容，写作的同时可以巩固知识，同时可以提升写作水平。另一方面又可以发扬知识分享精神，给大家分享一些博主的所学所得。利人利己，何乐不为。</p>\n</li>\n<li><p>博客方向：</p>\n<p>  Jiar’s Blog 是计算机编程技术博客，于2015年11月11日（这是一个比较有意思的节日）正式上线。博客包括的主要方向：移动软件开发，网站开发，后台开发，前端开发，微信建站，手机游戏开发…包括的主要编程语言有：Objective-C，Swift，Java，js…分类无上限，适博主心情而定。</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>关于我</p>\n<ul>\n<li><p>学习经历：</p>\n<p>  大一玩得比较多，勉勉强强自学了C和Java。写了“C版链表式学生管理系统”，“Java版多人聊天室”等小成品。</p>\n<p>  大二进了一个工作室，从此一发不可收拾…自学了javaweb、sql、html、css、js、SSH、Android、iOS…大二学得比较宽泛，也没那么精细，但还是写了些小玩意：“基于javaweb的网页版学生信息管理系统”，“基于SSH框架的眼镜在线直销，“Android app Dr.Car行车伴侣”…同时也和工作室的小伙伴们拿了五六个计算机技术类奖，下至省级三等奖，上到国家一等奖。</p>\n<p>  大三的生活主要以在学长开的公司接外包项目锻炼技术为主，目前已经有了5个项目经历，除了第一个项目是负责Android端独立开发，剩下的四个项目中皆是负责iOS端独立开发…</p>\n<p>  大四…待定…</p>\n</li>\n<li><p>自定义：</p>\n<p>  喜欢编程，尤其是一些新奇的编程技术，爱好极客产品。喜欢逛Github、V2EX、知乎、简书等社区论坛。喜欢旅行，唱歌，爬山，游泳。</p>\n<p>  爱编程，爱交友，爱玩。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n"},{"title":"Android BaiduMap MyLocationConfiguration Set Color","date":"2016-06-02T06:14:23.000Z","_content":"\n如何正确设置 MyLocationConfiguration 的 accuracyCircleStrokeColor 与 accuracyCircleFillColor 属性的颜色值\n\nAndroid开发中，经常用到地图定位服务，百度地图api正提供了这样的服务，然而客户需求的效果和api自带的样式不尽相同，那么就需要我们就行一些定制化操作了。\n\n<!--more-->\n\n如下图，百度地图api默认提供了蓝色的外边框（accuracyCircleStrokeColor），淡蓝色的内部填充（accuracyCircleFillColor）\n![百度地图api MyLocationConfiguration 默认样式](Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png)\n\n因为客户的需求是修改填充部分颜色，接下来我们通过代码来修改内部填充色：\n\n设置填充色为红色\n\n```\n\tMyLocationConfiguration confit = new MyLocationConfiguration(LocationMode.FOLLOWING, true, mCurrentMarker);\n\t// 红色\n\tconfit.accuracyCircleFillColor = 0xFF0000FF;\n\tmBaiduMap.setMyLocationConfigeration(confit);\n```\n\n设置后，运行效果如下：\n![内部红色填充色](Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png)\n\n设置填充色为蓝色\n\n```\n\tMyLocationConfiguration confit = new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);\n\t// 蓝色\n\tconfit.accuracyCircleFillColor = 0xFFFF0000;\n\tmBaiduMap.setMyLocationConfigeration(confit);\n```\n\n设置后，运行效果如下：\n![内部蓝色填充色](Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png)\n\n设置填充色为绿色\n\n```\n\tMyLocationConfiguration confit = new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);\n\t// 绿色\n\tconfit.accuracyCircleFillColor = 0xFF00FF00;\n\tmBaiduMap.setMyLocationConfigeration(confit);\n```\n\n设置后，运行效果如下：\n![内部绿色填充色](Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png)\n\n到此，颜色修改成功！accuracyCircleStrokeColor与accuracyCircleFillColor的设置方式一样。\n可是问题来了，小伙伴们会说，这个颜色的值要怎么设置呢。这个“0xFF0000FF”，“0xFFFF0000”，“0xFF00FF00”都是怎么来的呢？接下来就来回答这个问题。\n我们首先会想到的解决方式是去点进 MyLocationConfiguration 的类里面去查看有没有相关方法或是提示。\n在 MyLocationConfiguration 中我们发现了 accuracyCircleFillColor 和 accuracyCircleStrokeColor 被设置了默认值（其实我们会发现这两个分别是构造默认的蓝色边框和淡蓝色填充需要用到的值）\n```\n\tpublic int accuracyCircleFillColor = 4521984;\n\tpublic int accuracyCircleStrokeColor = 4653056;\n```\n还有一个比较重要的`a`方法（真想吐槽这个方法名）：\n```\n\tprivate int a(int var1) {\n\t\tint var2 = (var1 & -16777216) >> 24;\n\t\tint var3 = (var1 & 16711680) >> 16;\n\t\tint var4 = (var1 & '\\uff00') >> 8;\n\t\tint var5 = var1 & 255;\n\t\tint var6 = Color.argb(var2, var5, var4, var3);\n\t\treturn var6;\n\t}\n```\n在 MyLocationConfiguration 其中的两个个构造方法中，我们会发现api都调用了`a`方法给accuracyCircleFillColor和accuracyCircleStrokeColor重新设值（下面给出了其中一个构造的代码）\n```\n\tpublic MyLocationConfiguration(MyLocationConfiguration.LocationMode var1, boolean var2, BitmapDescriptor var3) {\n\t\tif(var1 == null) {\n\t\t\tvar1 = MyLocationConfiguration.LocationMode.NORMAL;\n\t\t}\n\t\tthis.locationMode = var1;\n\t\tthis.enableDirection = var2;\n\t\tthis.customMarker = var3;\n\t\tthis.accuracyCircleFillColor = this.a(this.accuracyCircleFillColor);\n\t\tthis.accuracyCircleStrokeColor = this.a(this.accuracyCircleStrokeColor);\n\t}\n```\n\n不难发现，`a`方法在构造颜色中起了很重要的作用，算法好的同学们，可能很容易推测验证出`a`方法的作用。我在这里也不深究`a`方法如何构造出需要的颜色。下面我通过一张说明图来解释如果构造自己需要的颜色。\n![颜色构造说明](Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png)\n\nNow, all is OK...\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color.md","raw":"---\ntitle: Android BaiduMap MyLocationConfiguration Set Color\ndate: 2016-06-02 14:14:23\ncategories: Android\ntags:\n- Android\n- BaiduMap\n- MyLocationConfiguration\n- accuracyCircleStrokeColor\n- accuracyCircleFillColor\n---\n\n如何正确设置 MyLocationConfiguration 的 accuracyCircleStrokeColor 与 accuracyCircleFillColor 属性的颜色值\n\nAndroid开发中，经常用到地图定位服务，百度地图api正提供了这样的服务，然而客户需求的效果和api自带的样式不尽相同，那么就需要我们就行一些定制化操作了。\n\n<!--more-->\n\n如下图，百度地图api默认提供了蓝色的外边框（accuracyCircleStrokeColor），淡蓝色的内部填充（accuracyCircleFillColor）\n![百度地图api MyLocationConfiguration 默认样式](Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png)\n\n因为客户的需求是修改填充部分颜色，接下来我们通过代码来修改内部填充色：\n\n设置填充色为红色\n\n```\n\tMyLocationConfiguration confit = new MyLocationConfiguration(LocationMode.FOLLOWING, true, mCurrentMarker);\n\t// 红色\n\tconfit.accuracyCircleFillColor = 0xFF0000FF;\n\tmBaiduMap.setMyLocationConfigeration(confit);\n```\n\n设置后，运行效果如下：\n![内部红色填充色](Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png)\n\n设置填充色为蓝色\n\n```\n\tMyLocationConfiguration confit = new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);\n\t// 蓝色\n\tconfit.accuracyCircleFillColor = 0xFFFF0000;\n\tmBaiduMap.setMyLocationConfigeration(confit);\n```\n\n设置后，运行效果如下：\n![内部蓝色填充色](Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png)\n\n设置填充色为绿色\n\n```\n\tMyLocationConfiguration confit = new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);\n\t// 绿色\n\tconfit.accuracyCircleFillColor = 0xFF00FF00;\n\tmBaiduMap.setMyLocationConfigeration(confit);\n```\n\n设置后，运行效果如下：\n![内部绿色填充色](Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png)\n\n到此，颜色修改成功！accuracyCircleStrokeColor与accuracyCircleFillColor的设置方式一样。\n可是问题来了，小伙伴们会说，这个颜色的值要怎么设置呢。这个“0xFF0000FF”，“0xFFFF0000”，“0xFF00FF00”都是怎么来的呢？接下来就来回答这个问题。\n我们首先会想到的解决方式是去点进 MyLocationConfiguration 的类里面去查看有没有相关方法或是提示。\n在 MyLocationConfiguration 中我们发现了 accuracyCircleFillColor 和 accuracyCircleStrokeColor 被设置了默认值（其实我们会发现这两个分别是构造默认的蓝色边框和淡蓝色填充需要用到的值）\n```\n\tpublic int accuracyCircleFillColor = 4521984;\n\tpublic int accuracyCircleStrokeColor = 4653056;\n```\n还有一个比较重要的`a`方法（真想吐槽这个方法名）：\n```\n\tprivate int a(int var1) {\n\t\tint var2 = (var1 & -16777216) >> 24;\n\t\tint var3 = (var1 & 16711680) >> 16;\n\t\tint var4 = (var1 & '\\uff00') >> 8;\n\t\tint var5 = var1 & 255;\n\t\tint var6 = Color.argb(var2, var5, var4, var3);\n\t\treturn var6;\n\t}\n```\n在 MyLocationConfiguration 其中的两个个构造方法中，我们会发现api都调用了`a`方法给accuracyCircleFillColor和accuracyCircleStrokeColor重新设值（下面给出了其中一个构造的代码）\n```\n\tpublic MyLocationConfiguration(MyLocationConfiguration.LocationMode var1, boolean var2, BitmapDescriptor var3) {\n\t\tif(var1 == null) {\n\t\t\tvar1 = MyLocationConfiguration.LocationMode.NORMAL;\n\t\t}\n\t\tthis.locationMode = var1;\n\t\tthis.enableDirection = var2;\n\t\tthis.customMarker = var3;\n\t\tthis.accuracyCircleFillColor = this.a(this.accuracyCircleFillColor);\n\t\tthis.accuracyCircleStrokeColor = this.a(this.accuracyCircleStrokeColor);\n\t}\n```\n\n不难发现，`a`方法在构造颜色中起了很重要的作用，算法好的同学们，可能很容易推测验证出`a`方法的作用。我在这里也不深究`a`方法如何构造出需要的颜色。下面我通过一张说明图来解释如果构造自己需要的颜色。\n![颜色构造说明](Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png)\n\nNow, all is OK...\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"Android-BaiduMap-MyLocationConfiguration-Set-Color","published":1,"updated":"2022-02-14T08:55:25.035Z","_id":"ckhcv3f6h0003rlf601tjcblo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>如何正确设置 MyLocationConfiguration 的 accuracyCircleStrokeColor 与 accuracyCircleFillColor 属性的颜色值</p>\n<p>Android开发中，经常用到地图定位服务，百度地图api正提供了这样的服务，然而客户需求的效果和api自带的样式不尽相同，那么就需要我们就行一些定制化操作了。</p>\n<a id=\"more\"></a>\n\n<p>如下图，百度地图api默认提供了蓝色的外边框（accuracyCircleStrokeColor），淡蓝色的内部填充（accuracyCircleFillColor）<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png\" alt=\"百度地图api MyLocationConfiguration 默认样式\"></p>\n<p>因为客户的需求是修改填充部分颜色，接下来我们通过代码来修改内部填充色：</p>\n<p>设置填充色为红色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLocationConfiguration confit &#x3D; new MyLocationConfiguration(LocationMode.FOLLOWING, true, mCurrentMarker);</span><br><span class=\"line\">&#x2F;&#x2F; 红色</span><br><span class=\"line\">confit.accuracyCircleFillColor &#x3D; 0xFF0000FF;</span><br><span class=\"line\">mBaiduMap.setMyLocationConfigeration(confit);</span><br></pre></td></tr></table></figure>\n\n<p>设置后，运行效果如下：<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png\" alt=\"内部红色填充色\"></p>\n<p>设置填充色为蓝色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLocationConfiguration confit &#x3D; new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);</span><br><span class=\"line\">&#x2F;&#x2F; 蓝色</span><br><span class=\"line\">confit.accuracyCircleFillColor &#x3D; 0xFFFF0000;</span><br><span class=\"line\">mBaiduMap.setMyLocationConfigeration(confit);</span><br></pre></td></tr></table></figure>\n\n<p>设置后，运行效果如下：<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png\" alt=\"内部蓝色填充色\"></p>\n<p>设置填充色为绿色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLocationConfiguration confit &#x3D; new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);</span><br><span class=\"line\">&#x2F;&#x2F; 绿色</span><br><span class=\"line\">confit.accuracyCircleFillColor &#x3D; 0xFF00FF00;</span><br><span class=\"line\">mBaiduMap.setMyLocationConfigeration(confit);</span><br></pre></td></tr></table></figure>\n\n<p>设置后，运行效果如下：<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png\" alt=\"内部绿色填充色\"></p>\n<p>到此，颜色修改成功！accuracyCircleStrokeColor与accuracyCircleFillColor的设置方式一样。<br>可是问题来了，小伙伴们会说，这个颜色的值要怎么设置呢。这个“0xFF0000FF”，“0xFFFF0000”，“0xFF00FF00”都是怎么来的呢？接下来就来回答这个问题。<br>我们首先会想到的解决方式是去点进 MyLocationConfiguration 的类里面去查看有没有相关方法或是提示。<br>在 MyLocationConfiguration 中我们发现了 accuracyCircleFillColor 和 accuracyCircleStrokeColor 被设置了默认值（其实我们会发现这两个分别是构造默认的蓝色边框和淡蓝色填充需要用到的值）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int accuracyCircleFillColor &#x3D; 4521984;</span><br><span class=\"line\">public int accuracyCircleStrokeColor &#x3D; 4653056;</span><br></pre></td></tr></table></figure>\n<p>还有一个比较重要的<code>a</code>方法（真想吐槽这个方法名）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int a(int var1) &#123;</span><br><span class=\"line\">\tint var2 &#x3D; (var1 &amp; -16777216) &gt;&gt; 24;</span><br><span class=\"line\">\tint var3 &#x3D; (var1 &amp; 16711680) &gt;&gt; 16;</span><br><span class=\"line\">\tint var4 &#x3D; (var1 &amp; &#39;\\uff00&#39;) &gt;&gt; 8;</span><br><span class=\"line\">\tint var5 &#x3D; var1 &amp; 255;</span><br><span class=\"line\">\tint var6 &#x3D; Color.argb(var2, var5, var4, var3);</span><br><span class=\"line\">\treturn var6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 MyLocationConfiguration 其中的两个个构造方法中，我们会发现api都调用了<code>a</code>方法给accuracyCircleFillColor和accuracyCircleStrokeColor重新设值（下面给出了其中一个构造的代码）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public MyLocationConfiguration(MyLocationConfiguration.LocationMode var1, boolean var2, BitmapDescriptor var3) &#123;</span><br><span class=\"line\">\tif(var1 &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">\t\tvar1 &#x3D; MyLocationConfiguration.LocationMode.NORMAL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.locationMode &#x3D; var1;</span><br><span class=\"line\">\tthis.enableDirection &#x3D; var2;</span><br><span class=\"line\">\tthis.customMarker &#x3D; var3;</span><br><span class=\"line\">\tthis.accuracyCircleFillColor &#x3D; this.a(this.accuracyCircleFillColor);</span><br><span class=\"line\">\tthis.accuracyCircleStrokeColor &#x3D; this.a(this.accuracyCircleStrokeColor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现，<code>a</code>方法在构造颜色中起了很重要的作用，算法好的同学们，可能很容易推测验证出<code>a</code>方法的作用。我在这里也不深究<code>a</code>方法如何构造出需要的颜色。下面我通过一张说明图来解释如果构造自己需要的颜色。<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png\" alt=\"颜色构造说明\"></p>\n<p>Now, all is OK…</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p>如何正确设置 MyLocationConfiguration 的 accuracyCircleStrokeColor 与 accuracyCircleFillColor 属性的颜色值</p>\n<p>Android开发中，经常用到地图定位服务，百度地图api正提供了这样的服务，然而客户需求的效果和api自带的样式不尽相同，那么就需要我们就行一些定制化操作了。</p>","more":"<p>如下图，百度地图api默认提供了蓝色的外边框（accuracyCircleStrokeColor），淡蓝色的内部填充（accuracyCircleFillColor）<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png\" alt=\"百度地图api MyLocationConfiguration 默认样式\"></p>\n<p>因为客户的需求是修改填充部分颜色，接下来我们通过代码来修改内部填充色：</p>\n<p>设置填充色为红色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLocationConfiguration confit &#x3D; new MyLocationConfiguration(LocationMode.FOLLOWING, true, mCurrentMarker);</span><br><span class=\"line\">&#x2F;&#x2F; 红色</span><br><span class=\"line\">confit.accuracyCircleFillColor &#x3D; 0xFF0000FF;</span><br><span class=\"line\">mBaiduMap.setMyLocationConfigeration(confit);</span><br></pre></td></tr></table></figure>\n\n<p>设置后，运行效果如下：<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png\" alt=\"内部红色填充色\"></p>\n<p>设置填充色为蓝色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLocationConfiguration confit &#x3D; new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);</span><br><span class=\"line\">&#x2F;&#x2F; 蓝色</span><br><span class=\"line\">confit.accuracyCircleFillColor &#x3D; 0xFFFF0000;</span><br><span class=\"line\">mBaiduMap.setMyLocationConfigeration(confit);</span><br></pre></td></tr></table></figure>\n\n<p>设置后，运行效果如下：<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png\" alt=\"内部蓝色填充色\"></p>\n<p>设置填充色为绿色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLocationConfiguration confit &#x3D; new MyLocationConfiguration(LocationMode.COMPASS, true, mCurrentMarker);</span><br><span class=\"line\">&#x2F;&#x2F; 绿色</span><br><span class=\"line\">confit.accuracyCircleFillColor &#x3D; 0xFF00FF00;</span><br><span class=\"line\">mBaiduMap.setMyLocationConfigeration(confit);</span><br></pre></td></tr></table></figure>\n\n<p>设置后，运行效果如下：<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png\" alt=\"内部绿色填充色\"></p>\n<p>到此，颜色修改成功！accuracyCircleStrokeColor与accuracyCircleFillColor的设置方式一样。<br>可是问题来了，小伙伴们会说，这个颜色的值要怎么设置呢。这个“0xFF0000FF”，“0xFFFF0000”，“0xFF00FF00”都是怎么来的呢？接下来就来回答这个问题。<br>我们首先会想到的解决方式是去点进 MyLocationConfiguration 的类里面去查看有没有相关方法或是提示。<br>在 MyLocationConfiguration 中我们发现了 accuracyCircleFillColor 和 accuracyCircleStrokeColor 被设置了默认值（其实我们会发现这两个分别是构造默认的蓝色边框和淡蓝色填充需要用到的值）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int accuracyCircleFillColor &#x3D; 4521984;</span><br><span class=\"line\">public int accuracyCircleStrokeColor &#x3D; 4653056;</span><br></pre></td></tr></table></figure>\n<p>还有一个比较重要的<code>a</code>方法（真想吐槽这个方法名）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int a(int var1) &#123;</span><br><span class=\"line\">\tint var2 &#x3D; (var1 &amp; -16777216) &gt;&gt; 24;</span><br><span class=\"line\">\tint var3 &#x3D; (var1 &amp; 16711680) &gt;&gt; 16;</span><br><span class=\"line\">\tint var4 &#x3D; (var1 &amp; &#39;\\uff00&#39;) &gt;&gt; 8;</span><br><span class=\"line\">\tint var5 &#x3D; var1 &amp; 255;</span><br><span class=\"line\">\tint var6 &#x3D; Color.argb(var2, var5, var4, var3);</span><br><span class=\"line\">\treturn var6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 MyLocationConfiguration 其中的两个个构造方法中，我们会发现api都调用了<code>a</code>方法给accuracyCircleFillColor和accuracyCircleStrokeColor重新设值（下面给出了其中一个构造的代码）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public MyLocationConfiguration(MyLocationConfiguration.LocationMode var1, boolean var2, BitmapDescriptor var3) &#123;</span><br><span class=\"line\">\tif(var1 &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">\t\tvar1 &#x3D; MyLocationConfiguration.LocationMode.NORMAL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.locationMode &#x3D; var1;</span><br><span class=\"line\">\tthis.enableDirection &#x3D; var2;</span><br><span class=\"line\">\tthis.customMarker &#x3D; var3;</span><br><span class=\"line\">\tthis.accuracyCircleFillColor &#x3D; this.a(this.accuracyCircleFillColor);</span><br><span class=\"line\">\tthis.accuracyCircleStrokeColor &#x3D; this.a(this.accuracyCircleStrokeColor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现，<code>a</code>方法在构造颜色中起了很重要的作用，算法好的同学们，可能很容易推测验证出<code>a</code>方法的作用。我在这里也不深究<code>a</code>方法如何构造出需要的颜色。下面我通过一张说明图来解释如果构造自己需要的颜色。<br><img src=\"/2016/06/02/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png\" alt=\"颜色构造说明\"></p>\n<p>Now, all is OK…</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"TCP三次握手简介","date":"2017-08-11T02:09:20.000Z","_content":"\n[简书阅读地址在这里](http://www.jianshu.com/p/448f37ed29fe)\n\n身处在互联网时代，计算机网络至关重要，然而却一直没有好好的了解这方面的知识。好在今年总算是毕业了，工作也相对稳定了，是时候拿起书籍阅读，提升自己。\n\n首先，就拿最近接触的TCP三次握手来小试，若本文存在错误或者不恰当指出，还望指出 :)\n\n![TCP三次握手（原创图片）](tcp_hand_shake_detail.png)\n\n<!--more-->\n\n\n### TCP首部简介\n\nTCP三次握手涉及到TCP首部的一些知识，所有有必要先介绍下TCP首部的相关知识。如果嫌TCP首部内容太多，那么只要看下`ACK`和`SYN`这两个标志比特就行了（因为TCP三次握手过程主要用到这两个标志比特）。\n\n![TCP首部（图片来自网络））](tcp_head.png)\n\n> * 源端口(Source Port)和目的端口(Destination Port): 分别占用16位，表示源端口号和目的端口号。用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接。\n> * 序号(Sequence Number): 用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号。主要用来解决网络报乱序的问题。\n> * 确认号(Acknowledgment Number): 32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题。\n> * 数据偏移(Offset): 给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有选项字段，正常的长度是20字节。\n> * 保留: 占6位。保留为今后使用，目前置为0。\n> * 标志比特(TCP Flags): TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下: \n\t- URG: 此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据。\n\t- ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。\n\t- PSH: 这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队。\n\t- RST: 这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包。\n\t- SYN: 表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0。连接被响应的时候，SYN=1，ACK=1。这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口。但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手。\n\t- FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。\n> * 窗口(Window): 也就是有名的滑动窗口，用来进行流量控制。这是一个复杂的问题，这篇博文中并不会进行总结。\n> * 校验和: 占2字节。该字段检验的范围包括首部和数据这两部分。由发端计算和存储，并由收端进行验证。\n> * 紧急指针: 占2个字节，紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数。当所有紧急数据处理完毕时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可发送紧急数据。\n> * 选项: 长度可变，最长可达40字节，当没有选项时，TCP的首部长度是20字节。最大报文段长度MSS，MSS是指每一个TCP报文段中的数据字段的最大长度。\n\n\n### TCP三次握手过程\n\n其实以下这张图片就能说明TCP三次握手的过程以及握手两端状态的变化。\n\n![TCP三次握手（原创图片）](tcp_hand_shake_detail.png)\n\n- 第一次握手: 建立连接。客户端发送连接请求报文段，将SYN位置为1，Seq(Sequence Number)为X(由操作系统动态随机选取一个32位长的序列号)。然后，客户端进入SYN_SEND状态，等待服务器的确认。\n\n- 第二次握手: 服务器收到客户端的SYN报文段。需要对这个SYN报文段进行确认，设置Ack(Acknowledgment Number)设置为X(第一次握手中的Seq的值)+1。同时，自己还要发送SYN请求信息，将SYN位置为1，Seq(Sequence Number)为Y(由操作系统动态随机选取一个32位长的序列号)。服务器端将上述所有信息一并发送给客户端，此时服务器进入SYN_RECV状态。\n\n- 第三次握手: 客户端收到服务器的报文段。然后将Ack(Acknowledgment Number)设置为Y(第二次握手中的Seq的值)+1，Seq(Sequence Number)设置为X+1`第二次握手中的Ack(Acknowledgment Number)值`，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。\n\nTCP的SYN同步标志位被设计成占用一个字节的编号，既然是一个字节的数据，按照TCP对有数据的TCP Segment必须确认的原则，所以可看到一端发送SYN，则另一端用ACK进行响应。\n\n\n### 握手中断\n\n- 第一次握手中断: A发送给B的SYN中断，A会周期性超时重传，直到A收到B的确认响应。\n- 第二次握手中断: B发送给A的SYN、ACK中断，B会周期性超时重传，直到B收到A的确认响应。\n- 第三次握手中断: A发送给B的ACK中断，A不会重传。超时后，B会重传SYN信号(即回到第二次握手)，直到B收到A的确认响应。\n\n\n### 为什么要三次握手\n\n以下是两种比较权威说法：\n\n> * 在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\n\n> * 在Google Groups的[TopLanguage](https://groups.google.com/forum/#!forum/pongba)中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“[TCP建立连接为什么是三次握手？](https://groups.google.com/forum/#!topic/pongba/kF6O7-MFxM0/discussion)”的问题，在众多回复中，有[一条回复](https://groups.google.com/forum/#!msg/pongba/kF6O7-MFxM0/5S7zIJ4yqKUJ)写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。\n\n是不是觉得好难懂的样子，那么可以先看下下面我画的对“为什么要三次握手”的图解，再回头看上面的讲解。\n\n![为什么是三次握手？（原创图片）](tcp_hand_shake_three_times.png)\n\n由图可以得出，三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。\n\n\n### 实践(抓包分析)\n\n接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是`Wireshark`。\n\n- 打开`Wireshark`，选择需要捕获的网络。\n![wireshark_welcome](wireshark_welcome.png)\n\n- 进入到主界面\n![wireshark_main](wireshark_main.png)\n\n- 找到TCP三次握手\n![wireshark_tcp_shake](wireshark_tcp_shake.png)\n观察`Wireshark`上部已经捕获的网络数据包列表部分，看`Info`部分，能找到相对连续的三列(分别显示`A -> B [SYN]...`、`B -> A [SYN, ACK]...`、`A -> B [ACK]...`)，便是TCP的三次握手，在找的时候，注意`Source`栏和`Destination`栏中的ip地址的相对应，以及`Info`栏中的端口的对应。\n\n- 查看第一次握手的详情\n![wireshark_tcp_shake_first](wireshark_tcp_shake_first.png)\n\n- 查看第二次握手的详情\n![wireshark_tcp_shake_second](wireshark_tcp_shake_second.png)\n\n- 查看第三次握手的详情\n![wireshark_tcp_shake_third](wireshark_tcp_shake_third.png)\n\n选中每次一的握手数据包，点击下方的`Transmission Control Protocol(TCP)`，即可显示每次TCP握手的详情。在详情中，我们展开`Flags`，可以看到比特标志位是否有被设置的情况。\n我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。\n\n- 第一次握手: [SYN] Seq=0\n- 第二次握手: [SYN, ACK] Seq=0 Ack=1\n- 第三次握手: [ACK] Seq=1 Ack=1\n\n\n### 参考\n\n感谢下列作者的分享\n\n> * [通俗大白话来理解TCP协议的三次握手和四次分手 - jawil](https://github.com/jawil/blog/issues/14)\n> * [TCP连接建立过程中为什么需要“三次握手” - TechZi](http://www.cnblogs.com/techzi/archive/2011/10/18/2216751.html)\n> * [TCP 为什么是三次握手，为什么不是两次或四次？ - 回答作者: 车小胖](https://zhihu.com/question/24853633/answer/115173386)\n> * [TCP为什么需要3次握手与4次挥手 - xifeijian](http://www.voidcn.com/blog/xifeijian/article/p-633810.html)\n> * [TCP的三次握手与四次挥手过程的每一步的具体状态变换 - 阿铭铭](http://ab3813.blog.51cto.com/10538332/1773751)\n> * [TCP报文段的首部格式 - wszddup](http://blog.sina.com.cn/s/blog_7f2a66c70102v5ry.html)\n> * [TCP - x_zhaohu](http://www.jianshu.com/p/0c4828e3b100)\n> * [使用抓包工具分析TCP三次握手过程 - 嘿嘿_小余同学](http://www.jianshu.com/p/afa438cb7d73)\n\n\n### 结束语\n\n以上便是我这次关于`TCP三次握手`方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/TCP三次握手简介.md","raw":"---\ntitle: TCP三次握手简介\ndate: 2017-08-11 10:09:20\ncategories: 计算机网络\ntags: \n- 计算机网络\n- TCP\n---\n\n[简书阅读地址在这里](http://www.jianshu.com/p/448f37ed29fe)\n\n身处在互联网时代，计算机网络至关重要，然而却一直没有好好的了解这方面的知识。好在今年总算是毕业了，工作也相对稳定了，是时候拿起书籍阅读，提升自己。\n\n首先，就拿最近接触的TCP三次握手来小试，若本文存在错误或者不恰当指出，还望指出 :)\n\n![TCP三次握手（原创图片）](tcp_hand_shake_detail.png)\n\n<!--more-->\n\n\n### TCP首部简介\n\nTCP三次握手涉及到TCP首部的一些知识，所有有必要先介绍下TCP首部的相关知识。如果嫌TCP首部内容太多，那么只要看下`ACK`和`SYN`这两个标志比特就行了（因为TCP三次握手过程主要用到这两个标志比特）。\n\n![TCP首部（图片来自网络））](tcp_head.png)\n\n> * 源端口(Source Port)和目的端口(Destination Port): 分别占用16位，表示源端口号和目的端口号。用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接。\n> * 序号(Sequence Number): 用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号。主要用来解决网络报乱序的问题。\n> * 确认号(Acknowledgment Number): 32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题。\n> * 数据偏移(Offset): 给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有选项字段，正常的长度是20字节。\n> * 保留: 占6位。保留为今后使用，目前置为0。\n> * 标志比特(TCP Flags): TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下: \n\t- URG: 此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据。\n\t- ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。\n\t- PSH: 这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队。\n\t- RST: 这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包。\n\t- SYN: 表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0。连接被响应的时候，SYN=1，ACK=1。这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口。但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手。\n\t- FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。\n> * 窗口(Window): 也就是有名的滑动窗口，用来进行流量控制。这是一个复杂的问题，这篇博文中并不会进行总结。\n> * 校验和: 占2字节。该字段检验的范围包括首部和数据这两部分。由发端计算和存储，并由收端进行验证。\n> * 紧急指针: 占2个字节，紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数。当所有紧急数据处理完毕时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可发送紧急数据。\n> * 选项: 长度可变，最长可达40字节，当没有选项时，TCP的首部长度是20字节。最大报文段长度MSS，MSS是指每一个TCP报文段中的数据字段的最大长度。\n\n\n### TCP三次握手过程\n\n其实以下这张图片就能说明TCP三次握手的过程以及握手两端状态的变化。\n\n![TCP三次握手（原创图片）](tcp_hand_shake_detail.png)\n\n- 第一次握手: 建立连接。客户端发送连接请求报文段，将SYN位置为1，Seq(Sequence Number)为X(由操作系统动态随机选取一个32位长的序列号)。然后，客户端进入SYN_SEND状态，等待服务器的确认。\n\n- 第二次握手: 服务器收到客户端的SYN报文段。需要对这个SYN报文段进行确认，设置Ack(Acknowledgment Number)设置为X(第一次握手中的Seq的值)+1。同时，自己还要发送SYN请求信息，将SYN位置为1，Seq(Sequence Number)为Y(由操作系统动态随机选取一个32位长的序列号)。服务器端将上述所有信息一并发送给客户端，此时服务器进入SYN_RECV状态。\n\n- 第三次握手: 客户端收到服务器的报文段。然后将Ack(Acknowledgment Number)设置为Y(第二次握手中的Seq的值)+1，Seq(Sequence Number)设置为X+1`第二次握手中的Ack(Acknowledgment Number)值`，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。\n\nTCP的SYN同步标志位被设计成占用一个字节的编号，既然是一个字节的数据，按照TCP对有数据的TCP Segment必须确认的原则，所以可看到一端发送SYN，则另一端用ACK进行响应。\n\n\n### 握手中断\n\n- 第一次握手中断: A发送给B的SYN中断，A会周期性超时重传，直到A收到B的确认响应。\n- 第二次握手中断: B发送给A的SYN、ACK中断，B会周期性超时重传，直到B收到A的确认响应。\n- 第三次握手中断: A发送给B的ACK中断，A不会重传。超时后，B会重传SYN信号(即回到第二次握手)，直到B收到A的确认响应。\n\n\n### 为什么要三次握手\n\n以下是两种比较权威说法：\n\n> * 在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\n\n> * 在Google Groups的[TopLanguage](https://groups.google.com/forum/#!forum/pongba)中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“[TCP建立连接为什么是三次握手？](https://groups.google.com/forum/#!topic/pongba/kF6O7-MFxM0/discussion)”的问题，在众多回复中，有[一条回复](https://groups.google.com/forum/#!msg/pongba/kF6O7-MFxM0/5S7zIJ4yqKUJ)写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。\n\n是不是觉得好难懂的样子，那么可以先看下下面我画的对“为什么要三次握手”的图解，再回头看上面的讲解。\n\n![为什么是三次握手？（原创图片）](tcp_hand_shake_three_times.png)\n\n由图可以得出，三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。\n\n\n### 实践(抓包分析)\n\n接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是`Wireshark`。\n\n- 打开`Wireshark`，选择需要捕获的网络。\n![wireshark_welcome](wireshark_welcome.png)\n\n- 进入到主界面\n![wireshark_main](wireshark_main.png)\n\n- 找到TCP三次握手\n![wireshark_tcp_shake](wireshark_tcp_shake.png)\n观察`Wireshark`上部已经捕获的网络数据包列表部分，看`Info`部分，能找到相对连续的三列(分别显示`A -> B [SYN]...`、`B -> A [SYN, ACK]...`、`A -> B [ACK]...`)，便是TCP的三次握手，在找的时候，注意`Source`栏和`Destination`栏中的ip地址的相对应，以及`Info`栏中的端口的对应。\n\n- 查看第一次握手的详情\n![wireshark_tcp_shake_first](wireshark_tcp_shake_first.png)\n\n- 查看第二次握手的详情\n![wireshark_tcp_shake_second](wireshark_tcp_shake_second.png)\n\n- 查看第三次握手的详情\n![wireshark_tcp_shake_third](wireshark_tcp_shake_third.png)\n\n选中每次一的握手数据包，点击下方的`Transmission Control Protocol(TCP)`，即可显示每次TCP握手的详情。在详情中，我们展开`Flags`，可以看到比特标志位是否有被设置的情况。\n我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。\n\n- 第一次握手: [SYN] Seq=0\n- 第二次握手: [SYN, ACK] Seq=0 Ack=1\n- 第三次握手: [ACK] Seq=1 Ack=1\n\n\n### 参考\n\n感谢下列作者的分享\n\n> * [通俗大白话来理解TCP协议的三次握手和四次分手 - jawil](https://github.com/jawil/blog/issues/14)\n> * [TCP连接建立过程中为什么需要“三次握手” - TechZi](http://www.cnblogs.com/techzi/archive/2011/10/18/2216751.html)\n> * [TCP 为什么是三次握手，为什么不是两次或四次？ - 回答作者: 车小胖](https://zhihu.com/question/24853633/answer/115173386)\n> * [TCP为什么需要3次握手与4次挥手 - xifeijian](http://www.voidcn.com/blog/xifeijian/article/p-633810.html)\n> * [TCP的三次握手与四次挥手过程的每一步的具体状态变换 - 阿铭铭](http://ab3813.blog.51cto.com/10538332/1773751)\n> * [TCP报文段的首部格式 - wszddup](http://blog.sina.com.cn/s/blog_7f2a66c70102v5ry.html)\n> * [TCP - x_zhaohu](http://www.jianshu.com/p/0c4828e3b100)\n> * [使用抓包工具分析TCP三次握手过程 - 嘿嘿_小余同学](http://www.jianshu.com/p/afa438cb7d73)\n\n\n### 结束语\n\n以上便是我这次关于`TCP三次握手`方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"TCP三次握手简介","published":1,"updated":"2022-02-14T08:56:47.692Z","_id":"ckhcv3f6l0007rlf62ys4hggu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.jianshu.com/p/448f37ed29fe\">简书阅读地址在这里</a></p>\n<p>身处在互联网时代，计算机网络至关重要，然而却一直没有好好的了解这方面的知识。好在今年总算是毕业了，工作也相对稳定了，是时候拿起书籍阅读，提升自己。</p>\n<p>首先，就拿最近接触的TCP三次握手来小试，若本文存在错误或者不恰当指出，还望指出 :)</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_shake_detail.png\" alt=\"TCP三次握手（原创图片）\"></p>\n<a id=\"more\"></a>\n\n\n<h3 id=\"TCP首部简介\"><a href=\"#TCP首部简介\" class=\"headerlink\" title=\"TCP首部简介\"></a>TCP首部简介</h3><p>TCP三次握手涉及到TCP首部的一些知识，所有有必要先介绍下TCP首部的相关知识。如果嫌TCP首部内容太多，那么只要看下<code>ACK</code>和<code>SYN</code>这两个标志比特就行了（因为TCP三次握手过程主要用到这两个标志比特）。</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_head.png\" alt=\"TCP首部（图片来自网络））\"></p>\n<blockquote>\n<ul>\n<li>源端口(Source Port)和目的端口(Destination Port): 分别占用16位，表示源端口号和目的端口号。用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接。</li>\n<li>序号(Sequence Number): 用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号。主要用来解决网络报乱序的问题。</li>\n<li>确认号(Acknowledgment Number): 32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题。</li>\n<li>数据偏移(Offset): 给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有选项字段，正常的长度是20字节。</li>\n<li>保留: 占6位。保留为今后使用，目前置为0。</li>\n<li>标志比特(TCP Flags): TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下: <ul>\n<li>URG: 此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据。</li>\n<li>ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。</li>\n<li>PSH: 这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队。</li>\n<li>RST: 这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包。</li>\n<li>SYN: 表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0。连接被响应的时候，SYN=1，ACK=1。这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口。但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手。</li>\n<li>FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n</li>\n<li>窗口(Window): 也就是有名的滑动窗口，用来进行流量控制。这是一个复杂的问题，这篇博文中并不会进行总结。</li>\n<li>校验和: 占2字节。该字段检验的范围包括首部和数据这两部分。由发端计算和存储，并由收端进行验证。</li>\n<li>紧急指针: 占2个字节，紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数。当所有紧急数据处理完毕时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可发送紧急数据。</li>\n<li>选项: 长度可变，最长可达40字节，当没有选项时，TCP的首部长度是20字节。最大报文段长度MSS，MSS是指每一个TCP报文段中的数据字段的最大长度。</li>\n</ul>\n</blockquote>\n<h3 id=\"TCP三次握手过程\"><a href=\"#TCP三次握手过程\" class=\"headerlink\" title=\"TCP三次握手过程\"></a>TCP三次握手过程</h3><p>其实以下这张图片就能说明TCP三次握手的过程以及握手两端状态的变化。</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_shake_detail.png\" alt=\"TCP三次握手（原创图片）\"></p>\n<ul>\n<li><p>第一次握手: 建立连接。客户端发送连接请求报文段，将SYN位置为1，Seq(Sequence Number)为X(由操作系统动态随机选取一个32位长的序列号)。然后，客户端进入SYN_SEND状态，等待服务器的确认。</p>\n</li>\n<li><p>第二次握手: 服务器收到客户端的SYN报文段。需要对这个SYN报文段进行确认，设置Ack(Acknowledgment Number)设置为X(第一次握手中的Seq的值)+1。同时，自己还要发送SYN请求信息，将SYN位置为1，Seq(Sequence Number)为Y(由操作系统动态随机选取一个32位长的序列号)。服务器端将上述所有信息一并发送给客户端，此时服务器进入SYN_RECV状态。</p>\n</li>\n<li><p>第三次握手: 客户端收到服务器的报文段。然后将Ack(Acknowledgment Number)设置为Y(第二次握手中的Seq的值)+1，Seq(Sequence Number)设置为X+1<code>第二次握手中的Ack(Acknowledgment Number)值</code>，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>\n</li>\n</ul>\n<p>TCP的SYN同步标志位被设计成占用一个字节的编号，既然是一个字节的数据，按照TCP对有数据的TCP Segment必须确认的原则，所以可看到一端发送SYN，则另一端用ACK进行响应。</p>\n<h3 id=\"握手中断\"><a href=\"#握手中断\" class=\"headerlink\" title=\"握手中断\"></a>握手中断</h3><ul>\n<li>第一次握手中断: A发送给B的SYN中断，A会周期性超时重传，直到A收到B的确认响应。</li>\n<li>第二次握手中断: B发送给A的SYN、ACK中断，B会周期性超时重传，直到B收到A的确认响应。</li>\n<li>第三次握手中断: A发送给B的ACK中断，A不会重传。超时后，B会重传SYN信号(即回到第二次握手)，直到B收到A的确认响应。</li>\n</ul>\n<h3 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手\"></a>为什么要三次握手</h3><p>以下是两种比较权威说法：</p>\n<blockquote>\n<ul>\n<li>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在Google Groups的<a href=\"https://groups.google.com/forum/#!forum/pongba\">TopLanguage</a>中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“<a href=\"https://groups.google.com/forum/#!topic/pongba/kF6O7-MFxM0/discussion\">TCP建立连接为什么是三次握手？</a>”的问题，在众多回复中，有<a href=\"https://groups.google.com/forum/#!msg/pongba/kF6O7-MFxM0/5S7zIJ4yqKUJ\">一条回复</a>写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。</li>\n</ul>\n</blockquote>\n<p>是不是觉得好难懂的样子，那么可以先看下下面我画的对“为什么要三次握手”的图解，再回头看上面的讲解。</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_shake_three_times.png\" alt=\"为什么是三次握手？（原创图片）\"></p>\n<p>由图可以得出，三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。</p>\n<h3 id=\"实践-抓包分析\"><a href=\"#实践-抓包分析\" class=\"headerlink\" title=\"实践(抓包分析)\"></a>实践(抓包分析)</h3><p>接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是<code>Wireshark</code>。</p>\n<ul>\n<li><p>打开<code>Wireshark</code>，选择需要捕获的网络。<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_welcome.png\" alt=\"wireshark_welcome\"></p>\n</li>\n<li><p>进入到主界面<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_main.png\" alt=\"wireshark_main\"></p>\n</li>\n<li><p>找到TCP三次握手<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake.png\" alt=\"wireshark_tcp_shake\"><br>观察<code>Wireshark</code>上部已经捕获的网络数据包列表部分，看<code>Info</code>部分，能找到相对连续的三列(分别显示<code>A -&gt; B [SYN]...</code>、<code>B -&gt; A [SYN, ACK]...</code>、<code>A -&gt; B [ACK]...</code>)，便是TCP的三次握手，在找的时候，注意<code>Source</code>栏和<code>Destination</code>栏中的ip地址的相对应，以及<code>Info</code>栏中的端口的对应。</p>\n</li>\n<li><p>查看第一次握手的详情<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake_first.png\" alt=\"wireshark_tcp_shake_first\"></p>\n</li>\n<li><p>查看第二次握手的详情<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake_second.png\" alt=\"wireshark_tcp_shake_second\"></p>\n</li>\n<li><p>查看第三次握手的详情<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake_third.png\" alt=\"wireshark_tcp_shake_third\"></p>\n</li>\n</ul>\n<p>选中每次一的握手数据包，点击下方的<code>Transmission Control Protocol(TCP)</code>，即可显示每次TCP握手的详情。在详情中，我们展开<code>Flags</code>，可以看到比特标志位是否有被设置的情况。<br>我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。</p>\n<ul>\n<li>第一次握手: [SYN] Seq=0</li>\n<li>第二次握手: [SYN, ACK] Seq=0 Ack=1</li>\n<li>第三次握手: [ACK] Seq=1 Ack=1</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>感谢下列作者的分享</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/jawil/blog/issues/14\">通俗大白话来理解TCP协议的三次握手和四次分手 - jawil</a></li>\n<li><a href=\"http://www.cnblogs.com/techzi/archive/2011/10/18/2216751.html\">TCP连接建立过程中为什么需要“三次握手” - TechZi</a></li>\n<li><a href=\"https://zhihu.com/question/24853633/answer/115173386\">TCP 为什么是三次握手，为什么不是两次或四次？ - 回答作者: 车小胖</a></li>\n<li><a href=\"http://www.voidcn.com/blog/xifeijian/article/p-633810.html\">TCP为什么需要3次握手与4次挥手 - xifeijian</a></li>\n<li><a href=\"http://ab3813.blog.51cto.com/10538332/1773751\">TCP的三次握手与四次挥手过程的每一步的具体状态变换 - 阿铭铭</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_7f2a66c70102v5ry.html\">TCP报文段的首部格式 - wszddup</a></li>\n<li><a href=\"http://www.jianshu.com/p/0c4828e3b100\">TCP - x_zhaohu</a></li>\n<li><a href=\"http://www.jianshu.com/p/afa438cb7d73\">使用抓包工具分析TCP三次握手过程 - 嘿嘿_小余同学</a></li>\n</ul>\n</blockquote>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>以上便是我这次关于<code>TCP三次握手</code>方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.jianshu.com/p/448f37ed29fe\">简书阅读地址在这里</a></p>\n<p>身处在互联网时代，计算机网络至关重要，然而却一直没有好好的了解这方面的知识。好在今年总算是毕业了，工作也相对稳定了，是时候拿起书籍阅读，提升自己。</p>\n<p>首先，就拿最近接触的TCP三次握手来小试，若本文存在错误或者不恰当指出，还望指出 :)</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_shake_detail.png\" alt=\"TCP三次握手（原创图片）\"></p>","more":"<h3 id=\"TCP首部简介\"><a href=\"#TCP首部简介\" class=\"headerlink\" title=\"TCP首部简介\"></a>TCP首部简介</h3><p>TCP三次握手涉及到TCP首部的一些知识，所有有必要先介绍下TCP首部的相关知识。如果嫌TCP首部内容太多，那么只要看下<code>ACK</code>和<code>SYN</code>这两个标志比特就行了（因为TCP三次握手过程主要用到这两个标志比特）。</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_head.png\" alt=\"TCP首部（图片来自网络））\"></p>\n<blockquote>\n<ul>\n<li>源端口(Source Port)和目的端口(Destination Port): 分别占用16位，表示源端口号和目的端口号。用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接。</li>\n<li>序号(Sequence Number): 用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号。主要用来解决网络报乱序的问题。</li>\n<li>确认号(Acknowledgment Number): 32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题。</li>\n<li>数据偏移(Offset): 给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有选项字段，正常的长度是20字节。</li>\n<li>保留: 占6位。保留为今后使用，目前置为0。</li>\n<li>标志比特(TCP Flags): TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下: <ul>\n<li>URG: 此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据。</li>\n<li>ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。</li>\n<li>PSH: 这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队。</li>\n<li>RST: 这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包。</li>\n<li>SYN: 表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0。连接被响应的时候，SYN=1，ACK=1。这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口。但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手。</li>\n<li>FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n</li>\n<li>窗口(Window): 也就是有名的滑动窗口，用来进行流量控制。这是一个复杂的问题，这篇博文中并不会进行总结。</li>\n<li>校验和: 占2字节。该字段检验的范围包括首部和数据这两部分。由发端计算和存储，并由收端进行验证。</li>\n<li>紧急指针: 占2个字节，紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数。当所有紧急数据处理完毕时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可发送紧急数据。</li>\n<li>选项: 长度可变，最长可达40字节，当没有选项时，TCP的首部长度是20字节。最大报文段长度MSS，MSS是指每一个TCP报文段中的数据字段的最大长度。</li>\n</ul>\n</blockquote>\n<h3 id=\"TCP三次握手过程\"><a href=\"#TCP三次握手过程\" class=\"headerlink\" title=\"TCP三次握手过程\"></a>TCP三次握手过程</h3><p>其实以下这张图片就能说明TCP三次握手的过程以及握手两端状态的变化。</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_shake_detail.png\" alt=\"TCP三次握手（原创图片）\"></p>\n<ul>\n<li><p>第一次握手: 建立连接。客户端发送连接请求报文段，将SYN位置为1，Seq(Sequence Number)为X(由操作系统动态随机选取一个32位长的序列号)。然后，客户端进入SYN_SEND状态，等待服务器的确认。</p>\n</li>\n<li><p>第二次握手: 服务器收到客户端的SYN报文段。需要对这个SYN报文段进行确认，设置Ack(Acknowledgment Number)设置为X(第一次握手中的Seq的值)+1。同时，自己还要发送SYN请求信息，将SYN位置为1，Seq(Sequence Number)为Y(由操作系统动态随机选取一个32位长的序列号)。服务器端将上述所有信息一并发送给客户端，此时服务器进入SYN_RECV状态。</p>\n</li>\n<li><p>第三次握手: 客户端收到服务器的报文段。然后将Ack(Acknowledgment Number)设置为Y(第二次握手中的Seq的值)+1，Seq(Sequence Number)设置为X+1<code>第二次握手中的Ack(Acknowledgment Number)值</code>，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>\n</li>\n</ul>\n<p>TCP的SYN同步标志位被设计成占用一个字节的编号，既然是一个字节的数据，按照TCP对有数据的TCP Segment必须确认的原则，所以可看到一端发送SYN，则另一端用ACK进行响应。</p>\n<h3 id=\"握手中断\"><a href=\"#握手中断\" class=\"headerlink\" title=\"握手中断\"></a>握手中断</h3><ul>\n<li>第一次握手中断: A发送给B的SYN中断，A会周期性超时重传，直到A收到B的确认响应。</li>\n<li>第二次握手中断: B发送给A的SYN、ACK中断，B会周期性超时重传，直到B收到A的确认响应。</li>\n<li>第三次握手中断: A发送给B的ACK中断，A不会重传。超时后，B会重传SYN信号(即回到第二次握手)，直到B收到A的确认响应。</li>\n</ul>\n<h3 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手\"></a>为什么要三次握手</h3><p>以下是两种比较权威说法：</p>\n<blockquote>\n<ul>\n<li>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。这两种不用的表述其实阐明的是同一个问题。谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>在Google Groups的<a href=\"https://groups.google.com/forum/#!forum/pongba\">TopLanguage</a>中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“<a href=\"https://groups.google.com/forum/#!topic/pongba/kF6O7-MFxM0/discussion\">TCP建立连接为什么是三次握手？</a>”的问题，在众多回复中，有<a href=\"https://groups.google.com/forum/#!msg/pongba/kF6O7-MFxM0/5S7zIJ4yqKUJ\">一条回复</a>写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题,  无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。</li>\n</ul>\n</blockquote>\n<p>是不是觉得好难懂的样子，那么可以先看下下面我画的对“为什么要三次握手”的图解，再回头看上面的讲解。</p>\n<p><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_shake_three_times.png\" alt=\"为什么是三次握手？（原创图片）\"></p>\n<p>由图可以得出，三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。</p>\n<h3 id=\"实践-抓包分析\"><a href=\"#实践-抓包分析\" class=\"headerlink\" title=\"实践(抓包分析)\"></a>实践(抓包分析)</h3><p>接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是<code>Wireshark</code>。</p>\n<ul>\n<li><p>打开<code>Wireshark</code>，选择需要捕获的网络。<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_welcome.png\" alt=\"wireshark_welcome\"></p>\n</li>\n<li><p>进入到主界面<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_main.png\" alt=\"wireshark_main\"></p>\n</li>\n<li><p>找到TCP三次握手<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake.png\" alt=\"wireshark_tcp_shake\"><br>观察<code>Wireshark</code>上部已经捕获的网络数据包列表部分，看<code>Info</code>部分，能找到相对连续的三列(分别显示<code>A -&gt; B [SYN]...</code>、<code>B -&gt; A [SYN, ACK]...</code>、<code>A -&gt; B [ACK]...</code>)，便是TCP的三次握手，在找的时候，注意<code>Source</code>栏和<code>Destination</code>栏中的ip地址的相对应，以及<code>Info</code>栏中的端口的对应。</p>\n</li>\n<li><p>查看第一次握手的详情<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake_first.png\" alt=\"wireshark_tcp_shake_first\"></p>\n</li>\n<li><p>查看第二次握手的详情<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake_second.png\" alt=\"wireshark_tcp_shake_second\"></p>\n</li>\n<li><p>查看第三次握手的详情<br><img src=\"/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_shake_third.png\" alt=\"wireshark_tcp_shake_third\"></p>\n</li>\n</ul>\n<p>选中每次一的握手数据包，点击下方的<code>Transmission Control Protocol(TCP)</code>，即可显示每次TCP握手的详情。在详情中，我们展开<code>Flags</code>，可以看到比特标志位是否有被设置的情况。<br>我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。</p>\n<ul>\n<li>第一次握手: [SYN] Seq=0</li>\n<li>第二次握手: [SYN, ACK] Seq=0 Ack=1</li>\n<li>第三次握手: [ACK] Seq=1 Ack=1</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>感谢下列作者的分享</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/jawil/blog/issues/14\">通俗大白话来理解TCP协议的三次握手和四次分手 - jawil</a></li>\n<li><a href=\"http://www.cnblogs.com/techzi/archive/2011/10/18/2216751.html\">TCP连接建立过程中为什么需要“三次握手” - TechZi</a></li>\n<li><a href=\"https://zhihu.com/question/24853633/answer/115173386\">TCP 为什么是三次握手，为什么不是两次或四次？ - 回答作者: 车小胖</a></li>\n<li><a href=\"http://www.voidcn.com/blog/xifeijian/article/p-633810.html\">TCP为什么需要3次握手与4次挥手 - xifeijian</a></li>\n<li><a href=\"http://ab3813.blog.51cto.com/10538332/1773751\">TCP的三次握手与四次挥手过程的每一步的具体状态变换 - 阿铭铭</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_7f2a66c70102v5ry.html\">TCP报文段的首部格式 - wszddup</a></li>\n<li><a href=\"http://www.jianshu.com/p/0c4828e3b100\">TCP - x_zhaohu</a></li>\n<li><a href=\"http://www.jianshu.com/p/afa438cb7d73\">使用抓包工具分析TCP三次握手过程 - 嘿嘿_小余同学</a></li>\n</ul>\n</blockquote>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>以上便是我这次关于<code>TCP三次握手</code>方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"TCP四次挥手简介","date":"2017-08-24T07:34:53.000Z","_content":"\n[简书阅读地址在这里](http://www.jianshu.com/p/a57a40163d4b)\n\n阅读前提示：因为有部分知识会涉及到作者的另一篇博文《TCP三次握手简介》中的内容，建议先跳转阅读，[传送门在这里](http://blog.jiar.me/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B)。\n\n![TCP四次挥手（原创图片）](tcp_hand_wave_detail.png)\n\n<!--more-->\n\n### TCP首部简介\n\nTCP四次挥手同样也涉及到TCP首部的一些知识，先前在《TCP三次握手简介》中介绍过TCP头部的内容了，这里就不列举所有了，挥手主要涉及到`ACK`和`FIN`这两个标志比特位\n\n![TCP首部（图片来自网络）](tcp_head.png)\n\n- ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。\n- FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。\n\n\n### TCP四次挥手过程\n\n其实以下这张图片就能说明TCP四次挥手的过程以及握手两端状态的变化。\n\n![TCP四次挥手（原创图片）](tcp_hand_wave_detail.png)\n\nTCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当A发出FIN报文段时，只是表示A已经没有数据要发送了，A告诉B，它的数据已经全部发送完毕了；但是，这个时候A还是可以接受来自B的数据；当B返回ACK报文段时，表示B已经知道A没有数据发送了，但是B还是可以发送数据到A的；当B也发送了FIN报文段时，这个时候就表示B也没有数据要发送了，B就会告诉A自己也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。\n\n\n#### 挥手过程\n\n- 第一次挥手: 主动关闭方(可以使客户端，也可以是服务器端，这里标记为：A)，将FIN置为1，ACK置为1，Seq(Sequence Number)设置为X`为上一次对方传送过来的Ack(Acknowledgment Number)值`，Ack(Acknowledgment Number)设置为Y`为上一次对方传过来的Seq(Sequence Number)值+1`。设置好以上值后，将数据发送至被动关闭方(这里标记为：B)。然后A进入FIN_WAIT_1状态。\n\n- 第二次挥手：B收到了A发送的FIN报文段，向A回复，将ACK置为1，Ack(Acknowledgment Number)设置为X`第一次挥手中的Seq(Sequence Number)值`+1，Seq(Sequence Number)设置为Y`第一次挥手中的Ack(Acknowledgment Number)值`。然后B进入CLOSE_WAIT状态，A收到B的回复后，进入FIN_WAIT_2状态。\n\n- 第三次挥手：B再次向A发送报文，将FIN置为1，ACK置为1，Ack(Acknowledgment Number)设置为X+1`第二次挥手中的Ack(Acknowledgment Number)值`，Seq(Sequence Number)设置为Y`第二次挥手中的Seq(Sequence Number)值`。然后B进入LAST_ACK状态，A收到B的报文后，进入TIME_WAIT状态。\n\n- 第四次挥手：A收到B发送的FIN报文段，像B回复，将ACK置为1，Ack(Acknowledgment Number)设置为Y`第三次挥手中的Seq(Sequence Number)值`+1，Seq(Sequence Number)设置为X+1`第三次挥手中的Ack(Acknowledgment Number)值`。然后A进入TIME_WAIT状态，B在收到报文后进入CLOSED状态，A在发送完报文等待了2MSL时间后进入CLOSED状态。\n\n\n#### 状态变化\n\n\n- ESTABLISHED：已建立连接\n\n- FIN_WAIT_1和FIN_WAIT_2：FIN_WAIT_1和FIN_WAIT_2的意义在于等待B发送FIN报文（B在第三次挥手发送了FIN报文）。\n\n- FIN_WAIT_1：A发送给B报文，请求关闭连接，然后A便进入这个状态，这个时候，表示A已经没有数据要发送了，不过A还能接收数据。\n\n- FIN_WAIT_2：这个时候，SOCKET处于半连接状态，即A要求关闭连接，但是还要稍微等会，等到A收到B发送的FIN报文，并相应了这个报文，并过了2MSL后，才真正关闭，这里只是做个关闭标记。\n\n- CLOSE_WAIT：这个过程是B在等待自己发送FIN报文。当A发送一个FIN报文给B后，B毫无疑问应该立刻回复ACK报文，此时B进入这个状态。接下来，B会观察自己是否还有数据没有发送给A，如果有，先把数据发送给A，再发送FIN报文；如果没有，那么B直接发送FIN报文给A。其实这个状态下，B是在等待自己做完剩余的工作，然后再准备结束关闭连接。\n\n- LAST_ACK：这个状态是B在发送完FIN报文后，等待A的响应。如果接收到A的响应，则进入CLOSED状态。\n\n- TIME_WAIT：A收到了B发送的FIN报文，用ACK报文进行回复。然后等待2MSL时长后，A进入CLOSED状态。如果A在FIN_WAIT_1状态下，同时收到了B的FIN标志和ACK标志的报文，则A可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。\n\n\n### 为什么 TIME_WAIT 状态要等待 2MSL 之后才关闭连接\n\n- 2MSL表示两个MSL的时长，MSL全称为Maximum Segment Life，表示TCP 对TCP Segment 生存时间的限制。\n\n- 为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST_ACK状态的B收不到对自己已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段。而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后A和B都正常进入到CLOSED状态。如果A在TIME_WAIT状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会在发送一次确认报文段。这样，B就无法按照正常步骤进入CLOSED状态。\n\n- 防止已失效的连接请求报文段出现在本连接中。A在发送完最后一个ACK报文段后，在经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。\n\n\n### 为什么要四次挥手\n\n我在《TCP三次握手简介》得出过这样一个结论：`三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。`那么，TCP四次挥手中的第二次、第三次挥手，能否也能合为一次呢？\n\n答案是否定的。将TCP四次挥手中的第二次、第三次挥手，合为一次。也就是将CLOSE_WAIT状态的停留时间变为0。然而，B之所以存在CLOSE_WAIT状态，是因为B可能还存在着需要发送给A但是未发送的数据，如果存在着这些数据，那么这个状态的时间，就是用来发送这些数据的，所以，TCP四次挥手中的第二次、第三次挥手无法合并为一次。所以，也就无法实现“TCP三次挥手”。\n\n\n### 实践(抓包分析)\n\n接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是`Wireshark`。\n\n- 打开`Wireshark`，选择需要捕获的网络。\n![wireshark_welcome](wireshark_welcome.png)\n\n- 进入到主界面\n![wireshark_main](wireshark_main.png)\n\n- 找到TCP四次挥手\n![wireshark_tcp_wave](wireshark_tcp_wave.png)\n观察`Wireshark`上部已经捕获的网络数据包列表部分，看`Info`部分，能找到相对连续的四列(分别显示`A -> B [FIN, ACK]...`、`B -> A [ACK]...`、`B -> A [FIN, ACK]...`、`A -> B [ACK]...`)，便是TCP的四次挥手，在找的时候，注意`Source`栏和`Destination`栏中的ip地址的相对应，以及`Info`栏中的端口的对应。在`Wireshark`直接寻找四次挥手比寻找三次挥手要难得多。再下一篇文章中，我将会展示如何快速找到一组SOCKET的握手和挥手信息。\n\n- 查看第一次挥手的详情\n![wireshark_tcp_wave_first](wireshark_tcp_wave_first.png)\n\n- 查看第二次挥手的详情\n![wireshark_tcp_wave_second](wireshark_tcp_wave_second.png)\n\n- 查看第三次挥手的详情\n![wireshark_tcp_wave_third](wireshark_tcp_wave_third.png)\n\n- 查看第四次挥手的详情\n![wireshark_tcp_wave_fourth](wireshark_tcp_wave_fourth.png)\n\n选中每次一的挥手数据包，点击下方的`Transmission Control Protocol(TCP)`，即可显示每次TCP握手的详情。在详情中，我们展开`Flags`，可以看到比特标志位是否有被设置的情况。\n我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。\n\n- 第一次挥手: [FIN, ACK] Seq=161 Ack=734\n- 第二次挥手: [ACK] Seq=734 Ack=162\n- 第三次挥手: [FIN, ACK] Seq=734 Ack=162\n- 第四次挥手: [ACK] Seq=162 Ack=735\n\n\n### 参考\n\n感谢下列作者的分享\n\n> * [通俗大白话来理解TCP协议的三次握手和四次分手 - jawil](https://github.com/jawil/blog/issues/14)\n> * [TCP的三次握手与四次挥手过程的每一步的具体状态变换](http://ab3813.blog.51cto.com/10538332/1773751)\n\n\n### 结束语\n\n以上便是我这次关于`TCP四次挥手`方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/TCP四次挥手简介.md","raw":"---\ntitle: TCP四次挥手简介\ndate: 2017-08-24 15:34:53\ncategories: 计算机网络\ntags: \n- 计算机网络\n- TCP\n---\n\n[简书阅读地址在这里](http://www.jianshu.com/p/a57a40163d4b)\n\n阅读前提示：因为有部分知识会涉及到作者的另一篇博文《TCP三次握手简介》中的内容，建议先跳转阅读，[传送门在这里](http://blog.jiar.me/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B)。\n\n![TCP四次挥手（原创图片）](tcp_hand_wave_detail.png)\n\n<!--more-->\n\n### TCP首部简介\n\nTCP四次挥手同样也涉及到TCP首部的一些知识，先前在《TCP三次握手简介》中介绍过TCP头部的内容了，这里就不列举所有了，挥手主要涉及到`ACK`和`FIN`这两个标志比特位\n\n![TCP首部（图片来自网络）](tcp_head.png)\n\n- ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。\n- FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。\n\n\n### TCP四次挥手过程\n\n其实以下这张图片就能说明TCP四次挥手的过程以及握手两端状态的变化。\n\n![TCP四次挥手（原创图片）](tcp_hand_wave_detail.png)\n\nTCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当A发出FIN报文段时，只是表示A已经没有数据要发送了，A告诉B，它的数据已经全部发送完毕了；但是，这个时候A还是可以接受来自B的数据；当B返回ACK报文段时，表示B已经知道A没有数据发送了，但是B还是可以发送数据到A的；当B也发送了FIN报文段时，这个时候就表示B也没有数据要发送了，B就会告诉A自己也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。\n\n\n#### 挥手过程\n\n- 第一次挥手: 主动关闭方(可以使客户端，也可以是服务器端，这里标记为：A)，将FIN置为1，ACK置为1，Seq(Sequence Number)设置为X`为上一次对方传送过来的Ack(Acknowledgment Number)值`，Ack(Acknowledgment Number)设置为Y`为上一次对方传过来的Seq(Sequence Number)值+1`。设置好以上值后，将数据发送至被动关闭方(这里标记为：B)。然后A进入FIN_WAIT_1状态。\n\n- 第二次挥手：B收到了A发送的FIN报文段，向A回复，将ACK置为1，Ack(Acknowledgment Number)设置为X`第一次挥手中的Seq(Sequence Number)值`+1，Seq(Sequence Number)设置为Y`第一次挥手中的Ack(Acknowledgment Number)值`。然后B进入CLOSE_WAIT状态，A收到B的回复后，进入FIN_WAIT_2状态。\n\n- 第三次挥手：B再次向A发送报文，将FIN置为1，ACK置为1，Ack(Acknowledgment Number)设置为X+1`第二次挥手中的Ack(Acknowledgment Number)值`，Seq(Sequence Number)设置为Y`第二次挥手中的Seq(Sequence Number)值`。然后B进入LAST_ACK状态，A收到B的报文后，进入TIME_WAIT状态。\n\n- 第四次挥手：A收到B发送的FIN报文段，像B回复，将ACK置为1，Ack(Acknowledgment Number)设置为Y`第三次挥手中的Seq(Sequence Number)值`+1，Seq(Sequence Number)设置为X+1`第三次挥手中的Ack(Acknowledgment Number)值`。然后A进入TIME_WAIT状态，B在收到报文后进入CLOSED状态，A在发送完报文等待了2MSL时间后进入CLOSED状态。\n\n\n#### 状态变化\n\n\n- ESTABLISHED：已建立连接\n\n- FIN_WAIT_1和FIN_WAIT_2：FIN_WAIT_1和FIN_WAIT_2的意义在于等待B发送FIN报文（B在第三次挥手发送了FIN报文）。\n\n- FIN_WAIT_1：A发送给B报文，请求关闭连接，然后A便进入这个状态，这个时候，表示A已经没有数据要发送了，不过A还能接收数据。\n\n- FIN_WAIT_2：这个时候，SOCKET处于半连接状态，即A要求关闭连接，但是还要稍微等会，等到A收到B发送的FIN报文，并相应了这个报文，并过了2MSL后，才真正关闭，这里只是做个关闭标记。\n\n- CLOSE_WAIT：这个过程是B在等待自己发送FIN报文。当A发送一个FIN报文给B后，B毫无疑问应该立刻回复ACK报文，此时B进入这个状态。接下来，B会观察自己是否还有数据没有发送给A，如果有，先把数据发送给A，再发送FIN报文；如果没有，那么B直接发送FIN报文给A。其实这个状态下，B是在等待自己做完剩余的工作，然后再准备结束关闭连接。\n\n- LAST_ACK：这个状态是B在发送完FIN报文后，等待A的响应。如果接收到A的响应，则进入CLOSED状态。\n\n- TIME_WAIT：A收到了B发送的FIN报文，用ACK报文进行回复。然后等待2MSL时长后，A进入CLOSED状态。如果A在FIN_WAIT_1状态下，同时收到了B的FIN标志和ACK标志的报文，则A可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。\n\n\n### 为什么 TIME_WAIT 状态要等待 2MSL 之后才关闭连接\n\n- 2MSL表示两个MSL的时长，MSL全称为Maximum Segment Life，表示TCP 对TCP Segment 生存时间的限制。\n\n- 为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST_ACK状态的B收不到对自己已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段。而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后A和B都正常进入到CLOSED状态。如果A在TIME_WAIT状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会在发送一次确认报文段。这样，B就无法按照正常步骤进入CLOSED状态。\n\n- 防止已失效的连接请求报文段出现在本连接中。A在发送完最后一个ACK报文段后，在经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。\n\n\n### 为什么要四次挥手\n\n我在《TCP三次握手简介》得出过这样一个结论：`三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。`那么，TCP四次挥手中的第二次、第三次挥手，能否也能合为一次呢？\n\n答案是否定的。将TCP四次挥手中的第二次、第三次挥手，合为一次。也就是将CLOSE_WAIT状态的停留时间变为0。然而，B之所以存在CLOSE_WAIT状态，是因为B可能还存在着需要发送给A但是未发送的数据，如果存在着这些数据，那么这个状态的时间，就是用来发送这些数据的，所以，TCP四次挥手中的第二次、第三次挥手无法合并为一次。所以，也就无法实现“TCP三次挥手”。\n\n\n### 实践(抓包分析)\n\n接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是`Wireshark`。\n\n- 打开`Wireshark`，选择需要捕获的网络。\n![wireshark_welcome](wireshark_welcome.png)\n\n- 进入到主界面\n![wireshark_main](wireshark_main.png)\n\n- 找到TCP四次挥手\n![wireshark_tcp_wave](wireshark_tcp_wave.png)\n观察`Wireshark`上部已经捕获的网络数据包列表部分，看`Info`部分，能找到相对连续的四列(分别显示`A -> B [FIN, ACK]...`、`B -> A [ACK]...`、`B -> A [FIN, ACK]...`、`A -> B [ACK]...`)，便是TCP的四次挥手，在找的时候，注意`Source`栏和`Destination`栏中的ip地址的相对应，以及`Info`栏中的端口的对应。在`Wireshark`直接寻找四次挥手比寻找三次挥手要难得多。再下一篇文章中，我将会展示如何快速找到一组SOCKET的握手和挥手信息。\n\n- 查看第一次挥手的详情\n![wireshark_tcp_wave_first](wireshark_tcp_wave_first.png)\n\n- 查看第二次挥手的详情\n![wireshark_tcp_wave_second](wireshark_tcp_wave_second.png)\n\n- 查看第三次挥手的详情\n![wireshark_tcp_wave_third](wireshark_tcp_wave_third.png)\n\n- 查看第四次挥手的详情\n![wireshark_tcp_wave_fourth](wireshark_tcp_wave_fourth.png)\n\n选中每次一的挥手数据包，点击下方的`Transmission Control Protocol(TCP)`，即可显示每次TCP握手的详情。在详情中，我们展开`Flags`，可以看到比特标志位是否有被设置的情况。\n我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。\n\n- 第一次挥手: [FIN, ACK] Seq=161 Ack=734\n- 第二次挥手: [ACK] Seq=734 Ack=162\n- 第三次挥手: [FIN, ACK] Seq=734 Ack=162\n- 第四次挥手: [ACK] Seq=162 Ack=735\n\n\n### 参考\n\n感谢下列作者的分享\n\n> * [通俗大白话来理解TCP协议的三次握手和四次分手 - jawil](https://github.com/jawil/blog/issues/14)\n> * [TCP的三次握手与四次挥手过程的每一步的具体状态变换](http://ab3813.blog.51cto.com/10538332/1773751)\n\n\n### 结束语\n\n以上便是我这次关于`TCP四次挥手`方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"TCP四次挥手简介","published":1,"updated":"2022-02-14T09:20:13.475Z","_id":"ckhcv3f6m0008rlf69wy2e9ti","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.jianshu.com/p/a57a40163d4b\">简书阅读地址在这里</a></p>\n<p>阅读前提示：因为有部分知识会涉及到作者的另一篇博文《TCP三次握手简介》中的内容，建议先跳转阅读，<a href=\"http://blog.jiar.me/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B\">传送门在这里</a>。</p>\n<p><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_wave_detail.png\" alt=\"TCP四次挥手（原创图片）\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"TCP首部简介\"><a href=\"#TCP首部简介\" class=\"headerlink\" title=\"TCP首部简介\"></a>TCP首部简介</h3><p>TCP四次挥手同样也涉及到TCP首部的一些知识，先前在《TCP三次握手简介》中介绍过TCP头部的内容了，这里就不列举所有了，挥手主要涉及到<code>ACK</code>和<code>FIN</code>这两个标志比特位</p>\n<p><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_head.png\" alt=\"TCP首部（图片来自网络）\"></p>\n<ul>\n<li>ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。</li>\n<li>FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n<h3 id=\"TCP四次挥手过程\"><a href=\"#TCP四次挥手过程\" class=\"headerlink\" title=\"TCP四次挥手过程\"></a>TCP四次挥手过程</h3><p>其实以下这张图片就能说明TCP四次挥手的过程以及握手两端状态的变化。</p>\n<p><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_wave_detail.png\" alt=\"TCP四次挥手（原创图片）\"></p>\n<p>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当A发出FIN报文段时，只是表示A已经没有数据要发送了，A告诉B，它的数据已经全部发送完毕了；但是，这个时候A还是可以接受来自B的数据；当B返回ACK报文段时，表示B已经知道A没有数据发送了，但是B还是可以发送数据到A的；当B也发送了FIN报文段时，这个时候就表示B也没有数据要发送了，B就会告诉A自己也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p>\n<h4 id=\"挥手过程\"><a href=\"#挥手过程\" class=\"headerlink\" title=\"挥手过程\"></a>挥手过程</h4><ul>\n<li><p>第一次挥手: 主动关闭方(可以使客户端，也可以是服务器端，这里标记为：A)，将FIN置为1，ACK置为1，Seq(Sequence Number)设置为X<code>为上一次对方传送过来的Ack(Acknowledgment Number)值</code>，Ack(Acknowledgment Number)设置为Y<code>为上一次对方传过来的Seq(Sequence Number)值+1</code>。设置好以上值后，将数据发送至被动关闭方(这里标记为：B)。然后A进入FIN_WAIT_1状态。</p>\n</li>\n<li><p>第二次挥手：B收到了A发送的FIN报文段，向A回复，将ACK置为1，Ack(Acknowledgment Number)设置为X<code>第一次挥手中的Seq(Sequence Number)值</code>+1，Seq(Sequence Number)设置为Y<code>第一次挥手中的Ack(Acknowledgment Number)值</code>。然后B进入CLOSE_WAIT状态，A收到B的回复后，进入FIN_WAIT_2状态。</p>\n</li>\n<li><p>第三次挥手：B再次向A发送报文，将FIN置为1，ACK置为1，Ack(Acknowledgment Number)设置为X+1<code>第二次挥手中的Ack(Acknowledgment Number)值</code>，Seq(Sequence Number)设置为Y<code>第二次挥手中的Seq(Sequence Number)值</code>。然后B进入LAST_ACK状态，A收到B的报文后，进入TIME_WAIT状态。</p>\n</li>\n<li><p>第四次挥手：A收到B发送的FIN报文段，像B回复，将ACK置为1，Ack(Acknowledgment Number)设置为Y<code>第三次挥手中的Seq(Sequence Number)值</code>+1，Seq(Sequence Number)设置为X+1<code>第三次挥手中的Ack(Acknowledgment Number)值</code>。然后A进入TIME_WAIT状态，B在收到报文后进入CLOSED状态，A在发送完报文等待了2MSL时间后进入CLOSED状态。</p>\n</li>\n</ul>\n<h4 id=\"状态变化\"><a href=\"#状态变化\" class=\"headerlink\" title=\"状态变化\"></a>状态变化</h4><ul>\n<li><p>ESTABLISHED：已建立连接</p>\n</li>\n<li><p>FIN_WAIT_1和FIN_WAIT_2：FIN_WAIT_1和FIN_WAIT_2的意义在于等待B发送FIN报文（B在第三次挥手发送了FIN报文）。</p>\n</li>\n<li><p>FIN_WAIT_1：A发送给B报文，请求关闭连接，然后A便进入这个状态，这个时候，表示A已经没有数据要发送了，不过A还能接收数据。</p>\n</li>\n<li><p>FIN_WAIT_2：这个时候，SOCKET处于半连接状态，即A要求关闭连接，但是还要稍微等会，等到A收到B发送的FIN报文，并相应了这个报文，并过了2MSL后，才真正关闭，这里只是做个关闭标记。</p>\n</li>\n<li><p>CLOSE_WAIT：这个过程是B在等待自己发送FIN报文。当A发送一个FIN报文给B后，B毫无疑问应该立刻回复ACK报文，此时B进入这个状态。接下来，B会观察自己是否还有数据没有发送给A，如果有，先把数据发送给A，再发送FIN报文；如果没有，那么B直接发送FIN报文给A。其实这个状态下，B是在等待自己做完剩余的工作，然后再准备结束关闭连接。</p>\n</li>\n<li><p>LAST_ACK：这个状态是B在发送完FIN报文后，等待A的响应。如果接收到A的响应，则进入CLOSED状态。</p>\n</li>\n<li><p>TIME_WAIT：A收到了B发送的FIN报文，用ACK报文进行回复。然后等待2MSL时长后，A进入CLOSED状态。如果A在FIN_WAIT_1状态下，同时收到了B的FIN标志和ACK标志的报文，则A可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</p>\n</li>\n</ul>\n<h3 id=\"为什么-TIME-WAIT-状态要等待-2MSL-之后才关闭连接\"><a href=\"#为什么-TIME-WAIT-状态要等待-2MSL-之后才关闭连接\" class=\"headerlink\" title=\"为什么 TIME_WAIT 状态要等待 2MSL 之后才关闭连接\"></a>为什么 TIME_WAIT 状态要等待 2MSL 之后才关闭连接</h3><ul>\n<li><p>2MSL表示两个MSL的时长，MSL全称为Maximum Segment Life，表示TCP 对TCP Segment 生存时间的限制。</p>\n</li>\n<li><p>为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST_ACK状态的B收不到对自己已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段。而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后A和B都正常进入到CLOSED状态。如果A在TIME_WAIT状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会在发送一次确认报文段。这样，B就无法按照正常步骤进入CLOSED状态。</p>\n</li>\n<li><p>防止已失效的连接请求报文段出现在本连接中。A在发送完最后一个ACK报文段后，在经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p>\n</li>\n</ul>\n<h3 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手\"></a>为什么要四次挥手</h3><p>我在《TCP三次握手简介》得出过这样一个结论：<code>三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。</code>那么，TCP四次挥手中的第二次、第三次挥手，能否也能合为一次呢？</p>\n<p>答案是否定的。将TCP四次挥手中的第二次、第三次挥手，合为一次。也就是将CLOSE_WAIT状态的停留时间变为0。然而，B之所以存在CLOSE_WAIT状态，是因为B可能还存在着需要发送给A但是未发送的数据，如果存在着这些数据，那么这个状态的时间，就是用来发送这些数据的，所以，TCP四次挥手中的第二次、第三次挥手无法合并为一次。所以，也就无法实现“TCP三次挥手”。</p>\n<h3 id=\"实践-抓包分析\"><a href=\"#实践-抓包分析\" class=\"headerlink\" title=\"实践(抓包分析)\"></a>实践(抓包分析)</h3><p>接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是<code>Wireshark</code>。</p>\n<ul>\n<li><p>打开<code>Wireshark</code>，选择需要捕获的网络。<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_welcome.png\" alt=\"wireshark_welcome\"></p>\n</li>\n<li><p>进入到主界面<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_main.png\" alt=\"wireshark_main\"></p>\n</li>\n<li><p>找到TCP四次挥手<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave.png\" alt=\"wireshark_tcp_wave\"><br>观察<code>Wireshark</code>上部已经捕获的网络数据包列表部分，看<code>Info</code>部分，能找到相对连续的四列(分别显示<code>A -&gt; B [FIN, ACK]...</code>、<code>B -&gt; A [ACK]...</code>、<code>B -&gt; A [FIN, ACK]...</code>、<code>A -&gt; B [ACK]...</code>)，便是TCP的四次挥手，在找的时候，注意<code>Source</code>栏和<code>Destination</code>栏中的ip地址的相对应，以及<code>Info</code>栏中的端口的对应。在<code>Wireshark</code>直接寻找四次挥手比寻找三次挥手要难得多。再下一篇文章中，我将会展示如何快速找到一组SOCKET的握手和挥手信息。</p>\n</li>\n<li><p>查看第一次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_first.png\" alt=\"wireshark_tcp_wave_first\"></p>\n</li>\n<li><p>查看第二次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_second.png\" alt=\"wireshark_tcp_wave_second\"></p>\n</li>\n<li><p>查看第三次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_third.png\" alt=\"wireshark_tcp_wave_third\"></p>\n</li>\n<li><p>查看第四次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_fourth.png\" alt=\"wireshark_tcp_wave_fourth\"></p>\n</li>\n</ul>\n<p>选中每次一的挥手数据包，点击下方的<code>Transmission Control Protocol(TCP)</code>，即可显示每次TCP握手的详情。在详情中，我们展开<code>Flags</code>，可以看到比特标志位是否有被设置的情况。<br>我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。</p>\n<ul>\n<li>第一次挥手: [FIN, ACK] Seq=161 Ack=734</li>\n<li>第二次挥手: [ACK] Seq=734 Ack=162</li>\n<li>第三次挥手: [FIN, ACK] Seq=734 Ack=162</li>\n<li>第四次挥手: [ACK] Seq=162 Ack=735</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>感谢下列作者的分享</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/jawil/blog/issues/14\">通俗大白话来理解TCP协议的三次握手和四次分手 - jawil</a></li>\n<li><a href=\"http://ab3813.blog.51cto.com/10538332/1773751\">TCP的三次握手与四次挥手过程的每一步的具体状态变换</a></li>\n</ul>\n</blockquote>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>以上便是我这次关于<code>TCP四次挥手</code>方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.jianshu.com/p/a57a40163d4b\">简书阅读地址在这里</a></p>\n<p>阅读前提示：因为有部分知识会涉及到作者的另一篇博文《TCP三次握手简介》中的内容，建议先跳转阅读，<a href=\"http://blog.jiar.me/2017/08/11/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80%E4%BB%8B\">传送门在这里</a>。</p>\n<p><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_wave_detail.png\" alt=\"TCP四次挥手（原创图片）\"></p>","more":"<h3 id=\"TCP首部简介\"><a href=\"#TCP首部简介\" class=\"headerlink\" title=\"TCP首部简介\"></a>TCP首部简介</h3><p>TCP四次挥手同样也涉及到TCP首部的一些知识，先前在《TCP三次握手简介》中介绍过TCP头部的内容了，这里就不列举所有了，挥手主要涉及到<code>ACK</code>和<code>FIN</code>这两个标志比特位</p>\n<p><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_head.png\" alt=\"TCP首部（图片来自网络）\"></p>\n<ul>\n<li>ACK: 此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中。有两个取值: 0和1，为1的时候表示应答域有效，反之为0。</li>\n<li>FIN: 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>\n</ul>\n<h3 id=\"TCP四次挥手过程\"><a href=\"#TCP四次挥手过程\" class=\"headerlink\" title=\"TCP四次挥手过程\"></a>TCP四次挥手过程</h3><p>其实以下这张图片就能说明TCP四次挥手的过程以及握手两端状态的变化。</p>\n<p><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/tcp_hand_wave_detail.png\" alt=\"TCP四次挥手（原创图片）\"></p>\n<p>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当A发出FIN报文段时，只是表示A已经没有数据要发送了，A告诉B，它的数据已经全部发送完毕了；但是，这个时候A还是可以接受来自B的数据；当B返回ACK报文段时，表示B已经知道A没有数据发送了，但是B还是可以发送数据到A的；当B也发送了FIN报文段时，这个时候就表示B也没有数据要发送了，B就会告诉A自己也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p>\n<h4 id=\"挥手过程\"><a href=\"#挥手过程\" class=\"headerlink\" title=\"挥手过程\"></a>挥手过程</h4><ul>\n<li><p>第一次挥手: 主动关闭方(可以使客户端，也可以是服务器端，这里标记为：A)，将FIN置为1，ACK置为1，Seq(Sequence Number)设置为X<code>为上一次对方传送过来的Ack(Acknowledgment Number)值</code>，Ack(Acknowledgment Number)设置为Y<code>为上一次对方传过来的Seq(Sequence Number)值+1</code>。设置好以上值后，将数据发送至被动关闭方(这里标记为：B)。然后A进入FIN_WAIT_1状态。</p>\n</li>\n<li><p>第二次挥手：B收到了A发送的FIN报文段，向A回复，将ACK置为1，Ack(Acknowledgment Number)设置为X<code>第一次挥手中的Seq(Sequence Number)值</code>+1，Seq(Sequence Number)设置为Y<code>第一次挥手中的Ack(Acknowledgment Number)值</code>。然后B进入CLOSE_WAIT状态，A收到B的回复后，进入FIN_WAIT_2状态。</p>\n</li>\n<li><p>第三次挥手：B再次向A发送报文，将FIN置为1，ACK置为1，Ack(Acknowledgment Number)设置为X+1<code>第二次挥手中的Ack(Acknowledgment Number)值</code>，Seq(Sequence Number)设置为Y<code>第二次挥手中的Seq(Sequence Number)值</code>。然后B进入LAST_ACK状态，A收到B的报文后，进入TIME_WAIT状态。</p>\n</li>\n<li><p>第四次挥手：A收到B发送的FIN报文段，像B回复，将ACK置为1，Ack(Acknowledgment Number)设置为Y<code>第三次挥手中的Seq(Sequence Number)值</code>+1，Seq(Sequence Number)设置为X+1<code>第三次挥手中的Ack(Acknowledgment Number)值</code>。然后A进入TIME_WAIT状态，B在收到报文后进入CLOSED状态，A在发送完报文等待了2MSL时间后进入CLOSED状态。</p>\n</li>\n</ul>\n<h4 id=\"状态变化\"><a href=\"#状态变化\" class=\"headerlink\" title=\"状态变化\"></a>状态变化</h4><ul>\n<li><p>ESTABLISHED：已建立连接</p>\n</li>\n<li><p>FIN_WAIT_1和FIN_WAIT_2：FIN_WAIT_1和FIN_WAIT_2的意义在于等待B发送FIN报文（B在第三次挥手发送了FIN报文）。</p>\n</li>\n<li><p>FIN_WAIT_1：A发送给B报文，请求关闭连接，然后A便进入这个状态，这个时候，表示A已经没有数据要发送了，不过A还能接收数据。</p>\n</li>\n<li><p>FIN_WAIT_2：这个时候，SOCKET处于半连接状态，即A要求关闭连接，但是还要稍微等会，等到A收到B发送的FIN报文，并相应了这个报文，并过了2MSL后，才真正关闭，这里只是做个关闭标记。</p>\n</li>\n<li><p>CLOSE_WAIT：这个过程是B在等待自己发送FIN报文。当A发送一个FIN报文给B后，B毫无疑问应该立刻回复ACK报文，此时B进入这个状态。接下来，B会观察自己是否还有数据没有发送给A，如果有，先把数据发送给A，再发送FIN报文；如果没有，那么B直接发送FIN报文给A。其实这个状态下，B是在等待自己做完剩余的工作，然后再准备结束关闭连接。</p>\n</li>\n<li><p>LAST_ACK：这个状态是B在发送完FIN报文后，等待A的响应。如果接收到A的响应，则进入CLOSED状态。</p>\n</li>\n<li><p>TIME_WAIT：A收到了B发送的FIN报文，用ACK报文进行回复。然后等待2MSL时长后，A进入CLOSED状态。如果A在FIN_WAIT_1状态下，同时收到了B的FIN标志和ACK标志的报文，则A可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</p>\n</li>\n</ul>\n<h3 id=\"为什么-TIME-WAIT-状态要等待-2MSL-之后才关闭连接\"><a href=\"#为什么-TIME-WAIT-状态要等待-2MSL-之后才关闭连接\" class=\"headerlink\" title=\"为什么 TIME_WAIT 状态要等待 2MSL 之后才关闭连接\"></a>为什么 TIME_WAIT 状态要等待 2MSL 之后才关闭连接</h3><ul>\n<li><p>2MSL表示两个MSL的时长，MSL全称为Maximum Segment Life，表示TCP 对TCP Segment 生存时间的限制。</p>\n</li>\n<li><p>为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST_ACK状态的B收不到对自己已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段。而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后A和B都正常进入到CLOSED状态。如果A在TIME_WAIT状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会在发送一次确认报文段。这样，B就无法按照正常步骤进入CLOSED状态。</p>\n</li>\n<li><p>防止已失效的连接请求报文段出现在本连接中。A在发送完最后一个ACK报文段后，在经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p>\n</li>\n</ul>\n<h3 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手\"></a>为什么要四次挥手</h3><p>我在《TCP三次握手简介》得出过这样一个结论：<code>三次握手的本质是：将“四次握手”中的第二次、第三次握手合为一次，因为“四次握手”中的第二次、第三次握手都是由B向A传递报文，而且这两次发送报文的目的允许这两次报文合并为一次。</code>那么，TCP四次挥手中的第二次、第三次挥手，能否也能合为一次呢？</p>\n<p>答案是否定的。将TCP四次挥手中的第二次、第三次挥手，合为一次。也就是将CLOSE_WAIT状态的停留时间变为0。然而，B之所以存在CLOSE_WAIT状态，是因为B可能还存在着需要发送给A但是未发送的数据，如果存在着这些数据，那么这个状态的时间，就是用来发送这些数据的，所以，TCP四次挥手中的第二次、第三次挥手无法合并为一次。所以，也就无法实现“TCP三次挥手”。</p>\n<h3 id=\"实践-抓包分析\"><a href=\"#实践-抓包分析\" class=\"headerlink\" title=\"实践(抓包分析)\"></a>实践(抓包分析)</h3><p>接下来我们通过网络抓包的方式来了解TCP的三次握手。我这里使用的抓包软件是<code>Wireshark</code>。</p>\n<ul>\n<li><p>打开<code>Wireshark</code>，选择需要捕获的网络。<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_welcome.png\" alt=\"wireshark_welcome\"></p>\n</li>\n<li><p>进入到主界面<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_main.png\" alt=\"wireshark_main\"></p>\n</li>\n<li><p>找到TCP四次挥手<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave.png\" alt=\"wireshark_tcp_wave\"><br>观察<code>Wireshark</code>上部已经捕获的网络数据包列表部分，看<code>Info</code>部分，能找到相对连续的四列(分别显示<code>A -&gt; B [FIN, ACK]...</code>、<code>B -&gt; A [ACK]...</code>、<code>B -&gt; A [FIN, ACK]...</code>、<code>A -&gt; B [ACK]...</code>)，便是TCP的四次挥手，在找的时候，注意<code>Source</code>栏和<code>Destination</code>栏中的ip地址的相对应，以及<code>Info</code>栏中的端口的对应。在<code>Wireshark</code>直接寻找四次挥手比寻找三次挥手要难得多。再下一篇文章中，我将会展示如何快速找到一组SOCKET的握手和挥手信息。</p>\n</li>\n<li><p>查看第一次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_first.png\" alt=\"wireshark_tcp_wave_first\"></p>\n</li>\n<li><p>查看第二次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_second.png\" alt=\"wireshark_tcp_wave_second\"></p>\n</li>\n<li><p>查看第三次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_third.png\" alt=\"wireshark_tcp_wave_third\"></p>\n</li>\n<li><p>查看第四次挥手的详情<br><img src=\"/2017/08/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%AE%80%E4%BB%8B/wireshark_tcp_wave_fourth.png\" alt=\"wireshark_tcp_wave_fourth\"></p>\n</li>\n</ul>\n<p>选中每次一的挥手数据包，点击下方的<code>Transmission Control Protocol(TCP)</code>，即可显示每次TCP握手的详情。在详情中，我们展开<code>Flags</code>，可以看到比特标志位是否有被设置的情况。<br>我们能发现，实践中的TCP状态情况，跟上面提到的理论是一致的。</p>\n<ul>\n<li>第一次挥手: [FIN, ACK] Seq=161 Ack=734</li>\n<li>第二次挥手: [ACK] Seq=734 Ack=162</li>\n<li>第三次挥手: [FIN, ACK] Seq=734 Ack=162</li>\n<li>第四次挥手: [ACK] Seq=162 Ack=735</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>感谢下列作者的分享</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/jawil/blog/issues/14\">通俗大白话来理解TCP协议的三次握手和四次分手 - jawil</a></li>\n<li><a href=\"http://ab3813.blog.51cto.com/10538332/1773751\">TCP的三次握手与四次挥手过程的每一步的具体状态变换</a></li>\n</ul>\n</blockquote>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>以上便是我这次关于<code>TCP四次挥手</code>方面的分享，同时也感谢我在文章中提到的博文的博主的分享。如果您在阅读本文时发现有错误或不恰当之处，欢迎在评论中指出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"UITableview分割线","date":"2016-06-02T04:23:48.000Z","_content":"1. cell分割线补全\n\t- 指定cell分割线补全：\n\t在`cellForRowAtIndexPath`代理中加入如下代码：\n\t```\n\tcell.preservesSuperviewLayoutMargins = NO;\n\tcell.layoutMargins = UIEdgeInsetsZero;\n\tcell.separatorInset = UIEdgeInsetsZero;\n\t```\n\t<!--more-->\n\t- 全局cell分割线补全：\n\t在`UIControllerView`中加入重写如下方法：\n\t```\n\t- (void)viewDidLayoutSubviews {\n\t    if ([self.table respondsToSelector:@selector(setSeparatorInset:)]) {\n\t        [self.table setSeparatorInset:UIEdgeInsetsMake(0,0,0,0)];\n\t    }\n\t    if ([self.table respondsToSelector:@selector(setLayoutMargins:)]) {\n\t        [self.table setLayoutMargins:UIEdgeInsetsMake(0,0,0,0)];\n\t    }\n\t}\n\t\n\t- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {\n\t    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {\n\t        [cell setSeparatorInset:UIEdgeInsetsZero];\n\t    }\n\t    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {\n\t        [cell setLayoutMargins:UIEdgeInsetsZero];\n\t    }\n\t}\n\t```\n2. cell分割线隐藏\n\t- 指定cell分割线隐藏：\n\t首先保证指定`cell分割线已经补全`，然后加入如下代码：\n\t```\n\tcell.separatorInset = UIEdgeInsetsMake(0, 0, 0, kDeviceWidth);\n\t```\n\n\t- 全局cell分割先隐藏：\n\t```\n\tself.table.separatorStyle = UITableViewCellSeparatorStyleNone;\n\t```\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/UITableview分割线.md","raw":"---\ntitle: UITableview分割线\ndate: 2016-06-02 12:23:48\ncategories: iOS\ntags:\n- iOS\n- cell\n- UITableview\n- UITableview分割线\n- UITableview分割线补全\n- UITableview分割线隐藏\n---\n1. cell分割线补全\n\t- 指定cell分割线补全：\n\t在`cellForRowAtIndexPath`代理中加入如下代码：\n\t```\n\tcell.preservesSuperviewLayoutMargins = NO;\n\tcell.layoutMargins = UIEdgeInsetsZero;\n\tcell.separatorInset = UIEdgeInsetsZero;\n\t```\n\t<!--more-->\n\t- 全局cell分割线补全：\n\t在`UIControllerView`中加入重写如下方法：\n\t```\n\t- (void)viewDidLayoutSubviews {\n\t    if ([self.table respondsToSelector:@selector(setSeparatorInset:)]) {\n\t        [self.table setSeparatorInset:UIEdgeInsetsMake(0,0,0,0)];\n\t    }\n\t    if ([self.table respondsToSelector:@selector(setLayoutMargins:)]) {\n\t        [self.table setLayoutMargins:UIEdgeInsetsMake(0,0,0,0)];\n\t    }\n\t}\n\t\n\t- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {\n\t    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {\n\t        [cell setSeparatorInset:UIEdgeInsetsZero];\n\t    }\n\t    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {\n\t        [cell setLayoutMargins:UIEdgeInsetsZero];\n\t    }\n\t}\n\t```\n2. cell分割线隐藏\n\t- 指定cell分割线隐藏：\n\t首先保证指定`cell分割线已经补全`，然后加入如下代码：\n\t```\n\tcell.separatorInset = UIEdgeInsetsMake(0, 0, 0, kDeviceWidth);\n\t```\n\n\t- 全局cell分割先隐藏：\n\t```\n\tself.table.separatorStyle = UITableViewCellSeparatorStyleNone;\n\t```\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"UITableview分割线","published":1,"updated":"2020-11-11T03:05:36.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhcv3f6n0009rlf6dagwf318","content":"<ol>\n<li><p>cell分割线补全</p>\n<ul>\n<li>指定cell分割线补全：<br>在<code>cellForRowAtIndexPath</code>代理中加入如下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell.preservesSuperviewLayoutMargins &#x3D; NO;</span><br><span class=\"line\">cell.layoutMargins &#x3D; UIEdgeInsetsZero;</span><br><span class=\"line\">cell.separatorInset &#x3D; UIEdgeInsetsZero;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li>全局cell分割线补全：<br>在<code>UIControllerView</code>中加入重写如下方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLayoutSubviews &#123;</span><br><span class=\"line\">    if ([self.table respondsToSelector:@selector(setSeparatorInset:)]) &#123;</span><br><span class=\"line\">        [self.table setSeparatorInset:UIEdgeInsetsMake(0,0,0,0)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ([self.table respondsToSelector:@selector(setLayoutMargins:)]) &#123;</span><br><span class=\"line\">        [self.table setLayoutMargins:UIEdgeInsetsMake(0,0,0,0)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) &#123;</span><br><span class=\"line\">        [cell setSeparatorInset:UIEdgeInsetsZero];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) &#123;</span><br><span class=\"line\">        [cell setLayoutMargins:UIEdgeInsetsZero];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>cell分割线隐藏</p>\n<ul>\n<li><p>指定cell分割线隐藏：<br>首先保证指定<code>cell分割线已经补全</code>，然后加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell.separatorInset &#x3D; UIEdgeInsetsMake(0, 0, 0, kDeviceWidth);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局cell分割先隐藏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.table.separatorStyle &#x3D; UITableViewCellSeparatorStyleNone;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ol>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>cell分割线补全</p>\n<ul>\n<li>指定cell分割线补全：<br>在<code>cellForRowAtIndexPath</code>代理中加入如下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell.preservesSuperviewLayoutMargins &#x3D; NO;</span><br><span class=\"line\">cell.layoutMargins &#x3D; UIEdgeInsetsZero;</span><br><span class=\"line\">cell.separatorInset &#x3D; UIEdgeInsetsZero;</span><br></pre></td></tr></table></figure>","more":"</li>\n<li>全局cell分割线补全：<br>在<code>UIControllerView</code>中加入重写如下方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLayoutSubviews &#123;</span><br><span class=\"line\">    if ([self.table respondsToSelector:@selector(setSeparatorInset:)]) &#123;</span><br><span class=\"line\">        [self.table setSeparatorInset:UIEdgeInsetsMake(0,0,0,0)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ([self.table respondsToSelector:@selector(setLayoutMargins:)]) &#123;</span><br><span class=\"line\">        [self.table setLayoutMargins:UIEdgeInsetsMake(0,0,0,0)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) &#123;</span><br><span class=\"line\">        [cell setSeparatorInset:UIEdgeInsetsZero];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) &#123;</span><br><span class=\"line\">        [cell setLayoutMargins:UIEdgeInsetsZero];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>cell分割线隐藏</p>\n<ul>\n<li><p>指定cell分割线隐藏：<br>首先保证指定<code>cell分割线已经补全</code>，然后加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell.separatorInset &#x3D; UIEdgeInsetsMake(0, 0, 0, kDeviceWidth);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局cell分割先隐藏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.table.separatorStyle &#x3D; UITableViewCellSeparatorStyleNone;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ol>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"UITextField光标异常","date":"2016-07-05T02:02:38.000Z","_content":"\n在`iOS`开发中，用`xib`写了那么多的界面，我也是头一次遇到这样一个问题，如下图所示：\n![UITextField光标异常](UITextField光标异常.gif)\n\n<!--more-->\n\n这是一个普通的登录界面，因为界面简单，采用xib实现，还有可能会对`UITextField`光标产生影响的是项目使用了`IQKeyboardManager`。\n我在`viewDidLoad`加入了`[self.phoneField becomeFirstResponder];`使得输入手机号的文本框获取焦点，于是产生了上图显示的问题。\n\n解决方法：首先去掉`[self.phoneField becomeFirstResponder];`，然后用如下两种方案替换：\n方案一：\n```\n\t// 刚进入该界面时，IQKeyboardManager的控件会先变黑一下，再变回来\n\tself.automaticallyAdjustsScrollViewInsets = NO;\n\t[self.phoneField becomeFirstResponder];\n```\n方案二：\n```\n\t// 如果在xib中启用了clearsOnBeginEditing属性，则该属性有一定概率失效\n\tdispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n\t\t[self.phoneField becomeFirstResponder];\n\t});\n```\n方案三（推荐）：\n```\n\tself.automaticallyAdjustsScrollViewInsets = NO;\n\tdispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n\t\t[self.phoneField becomeFirstResponder];\n\t});\n```\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n\n","source":"_posts/UITextField光标异常.md","raw":"---\ntitle: UITextField光标异常\ndate: 2016-07-05 10:02:38\ncategories: iOS\ntags:\n- iOS\n- UITextField\n---\n\n在`iOS`开发中，用`xib`写了那么多的界面，我也是头一次遇到这样一个问题，如下图所示：\n![UITextField光标异常](UITextField光标异常.gif)\n\n<!--more-->\n\n这是一个普通的登录界面，因为界面简单，采用xib实现，还有可能会对`UITextField`光标产生影响的是项目使用了`IQKeyboardManager`。\n我在`viewDidLoad`加入了`[self.phoneField becomeFirstResponder];`使得输入手机号的文本框获取焦点，于是产生了上图显示的问题。\n\n解决方法：首先去掉`[self.phoneField becomeFirstResponder];`，然后用如下两种方案替换：\n方案一：\n```\n\t// 刚进入该界面时，IQKeyboardManager的控件会先变黑一下，再变回来\n\tself.automaticallyAdjustsScrollViewInsets = NO;\n\t[self.phoneField becomeFirstResponder];\n```\n方案二：\n```\n\t// 如果在xib中启用了clearsOnBeginEditing属性，则该属性有一定概率失效\n\tdispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n\t\t[self.phoneField becomeFirstResponder];\n\t});\n```\n方案三（推荐）：\n```\n\tself.automaticallyAdjustsScrollViewInsets = NO;\n\tdispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n\t\t[self.phoneField becomeFirstResponder];\n\t});\n```\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n\n","slug":"UITextField光标异常","published":1,"updated":"2022-02-14T08:57:37.520Z","_id":"ckhcv3f6o000crlf66daxe35g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在<code>iOS</code>开发中，用<code>xib</code>写了那么多的界面，我也是头一次遇到这样一个问题，如下图所示：<br><img src=\"/2016/07/05/UITextField%E5%85%89%E6%A0%87%E5%BC%82%E5%B8%B8/UITextField%E5%85%89%E6%A0%87%E5%BC%82%E5%B8%B8.gif\" alt=\"UITextField光标异常\"></p>\n<a id=\"more\"></a>\n\n<p>这是一个普通的登录界面，因为界面简单，采用xib实现，还有可能会对<code>UITextField</code>光标产生影响的是项目使用了<code>IQKeyboardManager</code>。<br>我在<code>viewDidLoad</code>加入了<code>[self.phoneField becomeFirstResponder];</code>使得输入手机号的文本框获取焦点，于是产生了上图显示的问题。</p>\n<p>解决方法：首先去掉<code>[self.phoneField becomeFirstResponder];</code>，然后用如下两种方案替换：<br>方案一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 刚进入该界面时，IQKeyboardManager的控件会先变黑一下，再变回来</span><br><span class=\"line\">self.automaticallyAdjustsScrollViewInsets &#x3D; NO;</span><br><span class=\"line\">[self.phoneField becomeFirstResponder];</span><br></pre></td></tr></table></figure>\n<p>方案二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 如果在xib中启用了clearsOnBeginEditing属性，则该属性有一定概率失效</span><br><span class=\"line\">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">\t[self.phoneField becomeFirstResponder];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方案三（推荐）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.automaticallyAdjustsScrollViewInsets &#x3D; NO;</span><br><span class=\"line\">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">\t[self.phoneField becomeFirstResponder];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p>在<code>iOS</code>开发中，用<code>xib</code>写了那么多的界面，我也是头一次遇到这样一个问题，如下图所示：<br><img src=\"/2016/07/05/UITextField%E5%85%89%E6%A0%87%E5%BC%82%E5%B8%B8/UITextField%E5%85%89%E6%A0%87%E5%BC%82%E5%B8%B8.gif\" alt=\"UITextField光标异常\"></p>","more":"<p>这是一个普通的登录界面，因为界面简单，采用xib实现，还有可能会对<code>UITextField</code>光标产生影响的是项目使用了<code>IQKeyboardManager</code>。<br>我在<code>viewDidLoad</code>加入了<code>[self.phoneField becomeFirstResponder];</code>使得输入手机号的文本框获取焦点，于是产生了上图显示的问题。</p>\n<p>解决方法：首先去掉<code>[self.phoneField becomeFirstResponder];</code>，然后用如下两种方案替换：<br>方案一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 刚进入该界面时，IQKeyboardManager的控件会先变黑一下，再变回来</span><br><span class=\"line\">self.automaticallyAdjustsScrollViewInsets &#x3D; NO;</span><br><span class=\"line\">[self.phoneField becomeFirstResponder];</span><br></pre></td></tr></table></figure>\n<p>方案二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 如果在xib中启用了clearsOnBeginEditing属性，则该属性有一定概率失效</span><br><span class=\"line\">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">\t[self.phoneField becomeFirstResponder];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方案三（推荐）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.automaticallyAdjustsScrollViewInsets &#x3D; NO;</span><br><span class=\"line\">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">\t[self.phoneField becomeFirstResponder];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"iOS项目持续集成","date":"2016-08-28T06:59:39.000Z","_content":"\n### 使用Jenkins持续集成\n\n#### 使用Jenkins持续集成\n\n最近老是看到关于使用Jenkins持续集成方面的文章，于是也去折腾了，稍作整理，这里分享下我是如何使用Jenkins持续集成iOS项目的。\n\n<!--more-->\n\n##### 相关博文\n\n* [fir.im weekly - 「 持续集成 」实践教程合集](http://blog.fir.im/fir_im_weekly160505/)\n* [从自动化测试到持续部署，你需要了解这些](http://blog.fir.im/testing_cd/)\n* [手把手教你利用Jenkins持续集成iOS项目](http://www.jianshu.com/p/41ecb06ae95f)\n* [一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP](http://www.jianshu.com/p/c69deb29720d)\n* [*jenkins*iOS项目持续集成（SVN+Cocoapods+Workspace）实战扩展（修改版）](http://www.jianshu.com/p/269d8d66472d)\n* [iOS使用Jenkins进行持续集成](http://www.jianshu.com/p/4ce6649973e6)\n* [Jenkins+GitHub+Xcode+fir搭了一个持续集成环境](http://www.jianshu.com/p/a17167274463)\n* [iOS持续集成简述](http://www.jianshu.com/p/f44d746ff8a9)\n* [iOS项目自动打包(一)](http://xu01.github.io/ios/2016/04/26/iOS-automates-the-integration-1.html)\n* [使用 jenkins 进行 iOS 项目持续集成与自动化构建](http://blog.ilovejuly.com/2015/06/20/use-jeninks-to-build-daily.html)\n* [使用jenkins + git + 蒲公英 对 iOS 项目进行持续集成](http://tttpeng.com/2015/11/14/jenkins-1/)\n* [iOS 下如何自动化打包 App](http://reviewcode.cn/article.html?reviewId=11)\n* [Jenkins+Github+Testflight在Mac下搭建持续集成环境](http://www.itiger.me/?p=30)\n* [Xcode&Jenkins持续集成的几种实现方式](http://huos3203.github.io/MyBlog/blog/2015/09/18/xcode-and-jenkinschi-xu-ji-cheng-de-ji-chong-shi-xian-fang-shi/)\n* [Jenkins、Git、CocoaPods、Fir.im 实现 iOS 应用持续集成](http://www.linfuyan.com/continuous-integration-of-ios-application-with-jenkins-git-cocoapods-fir.im/)\n* [Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成](http://www.jianshu.com/p/1fe8652918df)\n* [Jenkins/git/KeyChains & Provisioning, 记录CI中的一些坑](http://www.jianshu.com/p/e19c8327b167)\n* [Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成](http://www.jianshu.com/p/1fe8652918df)\n* [Jenkins构建Android项目持续集成之创建项目](http://blog.csdn.net/it_talk/article/details/50261229)(这个虽然是安卓，但是参考了构建失败与构建成功分别发送给不同的接受者邮件的方法)\n* [配置jenkins发送邮件](http://liuhongjiang.github.io/hexotech/2015/12/04/jenkins-send-email-after-build/)\n* [Jenkins 邮件配置 (使用 Jenkins Email Extension Plugin)](http://www.cnblogs.com/GGHHLL/p/jenkins.html)\n* [Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知](http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html)\n* [Using OCLint with Jenkins CI](http://docs.oclint.org/en/stable/guide/jenkins.html)\n\n#### 使用shell命令\n\n利用Xcode自带的命令xcodebuild、xcrun通过shell对iOS项目进行打包上传至第三方测试平台(fir.im、蒲公英等平台)\n\n##### 相关博文\n\n* [xcodebuild官方文档](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html)\n* [xcrun官方文档](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcrun.1.html)\n* [Shell教程](http://www.runoob.com/linux/linux-shell.html)\n* [shell打包到fir/蒲公英](http://www.jianshu.com/p/5abbe0d61cef)\n\n\n### Jenkins持续集成的理解\n\n在你的mac上搭建好Jenkins，安装好相应的插件，在项目配置中关联代码仓库(git、svn)，你可以设置固定时间点检查仓库或者固定时间循环检查仓库的方式来检查你的代码仓库，如仓库有变动，则执行编译等操作。每次编译，首先会将仓库中的代码update到本地，然后在本地编译，因此你可以使用本机的所有命令。\n\n如果你的iOS项目使用了`Cocoapods`，建议在提交代码的时候`ignore`如下:`Pods文件夹、`Podfile.lock文件`、`XXX.xcworkspace文件`。如下图：\n\n![ignore](ignore.jpeg)\n\n这样做的原因是pod来的代码，本来就是在第三方仓库，没必要再拉到自己的仓库里面占空间，这样设置之后，需要在`Jenkins`的`构建`步骤添加`Execute shell`操作，并输入脚本`pod install --verbose --no-repo-update`。如下图：\n\n![ExecuteShell](ExecuteShell.jpeg)\n\n\n### 我踩过的坑\n\n折腾这东西还真没少踩过坑，在这里分享一下，给入坑的同学提供一个解决的思路。\n\n#### Keychains and Provisioning Profiles Management\n\niOS打包需要签名文件和证书，所以我们借助了这个插件`Keychains and Provisioning Profiles Management`，然而你会发现，我上面提供的博文中，人家的`Keychains and Provisioning Profiles Management`插件设置中的最下方有`Filename`和`UUID`这两个选项，如下图：\n\n![HaveFileNameAndUUID](HaveFileNameAndUUID.png)\n\n而你的设置中却没有，如下图：\n\n![NoFileNameAndUUID](NoFileNameAndUUID.jpeg)\n\n这里要注意下，我们要先上传自己的`login.keychain`文件，才能在下面的`Keychains`中显示出来。但是你点击图片中最上方的`选择文件`按钮时，你会发现你要选择的`login.keychain`文件在这个路径下面(`/Users/Jiar/Library/Keychains`)，你根本无法选择到，这里一个简单的操作就是先把`login.keychain`拷贝到桌面再上传这个文件。\n\n\n进入Jenkins的全局设置，如下图：\n\n![ProvisioningProfilesDirectoryPath](ProvisioningProfilesDirectoryPath.jpeg)\n\n这里设置好签名文件以及证书路径后，到时候在项目中引用这个路径即可，如下图，在项目中引用这里设置的路径。（首先你要在项目的`构建`步骤里面添加`Xcode`步骤，然后在`Xcode`的`Code signing & OS X keychain options`项里面勾选`Unlock Keychain?`，进行配置路径）\n\n![CodeSigning&OSXKeychainOptions](CodeSigning&OSXKeychainOptions.jpeg)\n\n上面的步骤中，我们已经设置好了签名文件和证书的路径，也上传了`login.keychain`文件，通过这个文件可以为项目选择签名文件对应的证书。同时也在`Xcode`中设置了`Unlock Keychain`的path（path实际路径我们在系统设置中设置好了，这里只是一个引用），同时输入了unlock密码（就是你mac的登录密码）。这些做好了，还差一步，那就是我们需要告诉这个项目，选择那个签名文件，才可以通过签名文件找到对应的证书。我们在项目的`构建环境`中勾选`Keychains and Code Signing Identities`，然后执行以下操作，如下图：\n\n![KeychainsAndCodeSigningIdentities](KeychainsAndCodeSigningIdentities.jpeg)\n\n\n#### 上传至第三方测试平台\n\n这里的第三方测试平台主要是[fir.im](http://fir.im)、[蒲公英](https://www.pgyer.com/)\n\n##### 上传至fir.im\n首先你得先安装fir.im提供的上传工具`fir-cli`，使用如下命令安装：`sudo gem install fir-cli --no-ri --no-rdoc`。\n你可以通过两种方式来使用这个工具上传app至fir.im。\n- 使用fir.im为Jenkins提供的插件。[教程在这里](http://blog.fir.im/jenkins/)\n- 直接用命令来上传，命令如下：`fir p ${WORKSPACE}/build/TestJenkins.ipa -T #API Token#`\n\n##### 上传至蒲公英\n这里提供一个蒲公英官方api，[要看点这里](https://www.pgyer.com/doc/api#uploadApp)\n\n\n#### 邮件通知\n首先要知道Jenkins自带一个邮件通知，但是无法自定义邮件内容的样子，然后都会使用一个第三方插件`Extended E-mail Notification`。\n\n首先进入到系统设置里面，找到`邮件通知`，我这里使用的是163邮箱，网易163免费邮箱相关服务器信息如下图：\n\n![163EmailHelp](163EmailHelp.png)\n\n我们会发现使用`SMTP`服务，如果启用`SSL`协议，则有`465`或`994`两个端口可以选择。如果不用这个协议，则使用`25`端口。\n\n我的设置如下图：\n\n![邮件通知](邮件通知.jpeg)\n\n注意了，这里的密码不能使用你的邮箱登录密码，原因是163邮箱第三方登录需要设置授权码，同时，我们使用`SMTP`服务，也需要去邮箱设置好先，不然会不成功。如下两张图，分别对`POP3/SMTP/IMAP`和`客户端授权密码`进行设置（没办法，为了安全，只好那么麻烦，记得把设置的授权码作为密码填入到`邮件通知`的密码栏里面去）\n\n![POP3SMTPIMAP](POP3SMTPIMAP.jpeg)\n\n![客户端授权密码](客户端授权密码.jpeg)\n\n这些都设置好后，不出意外没什么问题了，点击`邮件通知`下面的`通过发送测试邮件测试配置`，填入一个邮箱测试一下是否成功。\n\n如果成功了，那么恭喜你，你可以把`邮件通知`这一块丢弃了，哈哈，因为刚才说了，我们不使用\nJenkins自带的邮件通知服务，“那你还让我们这么配置干啥？逗我们玩？” 别急，这里主要是用了Jenkins自带的邮件通知服务进行邮箱测试，如果这里成功了，再把这些内容配置到第三方插件`Extended E-mail Notification`中，那就可以了。好了，接下来看`Extended E-mail Notification`，同样的，在Jenkins的系统设置中找到`Extended E-mail Notification`，由于`Extended E-mail Notification`内容很长，我分图片显示：\n\n![ExtendedE-mailNotificationPart1](ExtendedE-mailNotificationPart1.jpeg)\n\n![ExtendedE-mailNotificationPart2](ExtendedE-mailNotificationPart2.jpeg)\n\n![ExtendedE-mailNotificationPart3](ExtendedE-mailNotificationPart3.jpeg)\n\n在这个链接里面有邮件内容的说明：[Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知](http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html)。当然，你可以查看`Extended E-mail Notification`自带的说明，在系统设置中找到`Extended E-mail Notification`，滚动到`Extended E-mail Notification`的底部，找到`Content Token Reference`选项，点击它最右边的问号图标，即可展开内容。如下图所示：\n\n![ContentTokenReference](ContentTokenReference.jpeg)\n\n在系统设置中设置好默认值后，打开项目设置，在`构建后操作`中添加`Editable Email Notification`。配置如图所示：\n\n![EditableEmailNotificationStep1](EditableEmailNotificationStep1.jpeg)\n\n![EditableEmailNotificationStep2](EditableEmailNotificationStep2.jpeg)\n\n![EditableEmailNotificationStep3](EditableEmailNotificationStep3.jpeg)\n\n展开 `Failure-Any`\n\n![EditableEmailNotificationStep4](EditableEmailNotificationStep4.jpeg)\n\n展开 `Success`\n\n![EditableEmailNotificationStep5](EditableEmailNotificationStep5.jpeg)\n\n\n到此如何在Jenkins中使用邮件服务就已经配置好了，这里再次强调一点。我们的邮件服务使用的是`Extended E-mail Notification`插件，而不是Jenkins自带的邮箱服务，也就是说，不要在`构建后操作`中添加`E-mail Notification`操作。\n\n\n### 结束语\n\n以上就是我在使用Jenkins持续集成iOS项目中的分享，感谢我在文章中提到的博文的博主的分享。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中之处。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/iOS项目持续集成.md","raw":"---\ntitle: iOS项目持续集成\ndate: 2016-08-28 14:59:39\ncategories: iOS\ntags:\n- iOS\n- 持续集成\n- 打包\n- Jenkins\n- Shell\n---\n\n### 使用Jenkins持续集成\n\n#### 使用Jenkins持续集成\n\n最近老是看到关于使用Jenkins持续集成方面的文章，于是也去折腾了，稍作整理，这里分享下我是如何使用Jenkins持续集成iOS项目的。\n\n<!--more-->\n\n##### 相关博文\n\n* [fir.im weekly - 「 持续集成 」实践教程合集](http://blog.fir.im/fir_im_weekly160505/)\n* [从自动化测试到持续部署，你需要了解这些](http://blog.fir.im/testing_cd/)\n* [手把手教你利用Jenkins持续集成iOS项目](http://www.jianshu.com/p/41ecb06ae95f)\n* [一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP](http://www.jianshu.com/p/c69deb29720d)\n* [*jenkins*iOS项目持续集成（SVN+Cocoapods+Workspace）实战扩展（修改版）](http://www.jianshu.com/p/269d8d66472d)\n* [iOS使用Jenkins进行持续集成](http://www.jianshu.com/p/4ce6649973e6)\n* [Jenkins+GitHub+Xcode+fir搭了一个持续集成环境](http://www.jianshu.com/p/a17167274463)\n* [iOS持续集成简述](http://www.jianshu.com/p/f44d746ff8a9)\n* [iOS项目自动打包(一)](http://xu01.github.io/ios/2016/04/26/iOS-automates-the-integration-1.html)\n* [使用 jenkins 进行 iOS 项目持续集成与自动化构建](http://blog.ilovejuly.com/2015/06/20/use-jeninks-to-build-daily.html)\n* [使用jenkins + git + 蒲公英 对 iOS 项目进行持续集成](http://tttpeng.com/2015/11/14/jenkins-1/)\n* [iOS 下如何自动化打包 App](http://reviewcode.cn/article.html?reviewId=11)\n* [Jenkins+Github+Testflight在Mac下搭建持续集成环境](http://www.itiger.me/?p=30)\n* [Xcode&Jenkins持续集成的几种实现方式](http://huos3203.github.io/MyBlog/blog/2015/09/18/xcode-and-jenkinschi-xu-ji-cheng-de-ji-chong-shi-xian-fang-shi/)\n* [Jenkins、Git、CocoaPods、Fir.im 实现 iOS 应用持续集成](http://www.linfuyan.com/continuous-integration-of-ios-application-with-jenkins-git-cocoapods-fir.im/)\n* [Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成](http://www.jianshu.com/p/1fe8652918df)\n* [Jenkins/git/KeyChains & Provisioning, 记录CI中的一些坑](http://www.jianshu.com/p/e19c8327b167)\n* [Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成](http://www.jianshu.com/p/1fe8652918df)\n* [Jenkins构建Android项目持续集成之创建项目](http://blog.csdn.net/it_talk/article/details/50261229)(这个虽然是安卓，但是参考了构建失败与构建成功分别发送给不同的接受者邮件的方法)\n* [配置jenkins发送邮件](http://liuhongjiang.github.io/hexotech/2015/12/04/jenkins-send-email-after-build/)\n* [Jenkins 邮件配置 (使用 Jenkins Email Extension Plugin)](http://www.cnblogs.com/GGHHLL/p/jenkins.html)\n* [Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知](http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html)\n* [Using OCLint with Jenkins CI](http://docs.oclint.org/en/stable/guide/jenkins.html)\n\n#### 使用shell命令\n\n利用Xcode自带的命令xcodebuild、xcrun通过shell对iOS项目进行打包上传至第三方测试平台(fir.im、蒲公英等平台)\n\n##### 相关博文\n\n* [xcodebuild官方文档](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html)\n* [xcrun官方文档](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcrun.1.html)\n* [Shell教程](http://www.runoob.com/linux/linux-shell.html)\n* [shell打包到fir/蒲公英](http://www.jianshu.com/p/5abbe0d61cef)\n\n\n### Jenkins持续集成的理解\n\n在你的mac上搭建好Jenkins，安装好相应的插件，在项目配置中关联代码仓库(git、svn)，你可以设置固定时间点检查仓库或者固定时间循环检查仓库的方式来检查你的代码仓库，如仓库有变动，则执行编译等操作。每次编译，首先会将仓库中的代码update到本地，然后在本地编译，因此你可以使用本机的所有命令。\n\n如果你的iOS项目使用了`Cocoapods`，建议在提交代码的时候`ignore`如下:`Pods文件夹、`Podfile.lock文件`、`XXX.xcworkspace文件`。如下图：\n\n![ignore](ignore.jpeg)\n\n这样做的原因是pod来的代码，本来就是在第三方仓库，没必要再拉到自己的仓库里面占空间，这样设置之后，需要在`Jenkins`的`构建`步骤添加`Execute shell`操作，并输入脚本`pod install --verbose --no-repo-update`。如下图：\n\n![ExecuteShell](ExecuteShell.jpeg)\n\n\n### 我踩过的坑\n\n折腾这东西还真没少踩过坑，在这里分享一下，给入坑的同学提供一个解决的思路。\n\n#### Keychains and Provisioning Profiles Management\n\niOS打包需要签名文件和证书，所以我们借助了这个插件`Keychains and Provisioning Profiles Management`，然而你会发现，我上面提供的博文中，人家的`Keychains and Provisioning Profiles Management`插件设置中的最下方有`Filename`和`UUID`这两个选项，如下图：\n\n![HaveFileNameAndUUID](HaveFileNameAndUUID.png)\n\n而你的设置中却没有，如下图：\n\n![NoFileNameAndUUID](NoFileNameAndUUID.jpeg)\n\n这里要注意下，我们要先上传自己的`login.keychain`文件，才能在下面的`Keychains`中显示出来。但是你点击图片中最上方的`选择文件`按钮时，你会发现你要选择的`login.keychain`文件在这个路径下面(`/Users/Jiar/Library/Keychains`)，你根本无法选择到，这里一个简单的操作就是先把`login.keychain`拷贝到桌面再上传这个文件。\n\n\n进入Jenkins的全局设置，如下图：\n\n![ProvisioningProfilesDirectoryPath](ProvisioningProfilesDirectoryPath.jpeg)\n\n这里设置好签名文件以及证书路径后，到时候在项目中引用这个路径即可，如下图，在项目中引用这里设置的路径。（首先你要在项目的`构建`步骤里面添加`Xcode`步骤，然后在`Xcode`的`Code signing & OS X keychain options`项里面勾选`Unlock Keychain?`，进行配置路径）\n\n![CodeSigning&OSXKeychainOptions](CodeSigning&OSXKeychainOptions.jpeg)\n\n上面的步骤中，我们已经设置好了签名文件和证书的路径，也上传了`login.keychain`文件，通过这个文件可以为项目选择签名文件对应的证书。同时也在`Xcode`中设置了`Unlock Keychain`的path（path实际路径我们在系统设置中设置好了，这里只是一个引用），同时输入了unlock密码（就是你mac的登录密码）。这些做好了，还差一步，那就是我们需要告诉这个项目，选择那个签名文件，才可以通过签名文件找到对应的证书。我们在项目的`构建环境`中勾选`Keychains and Code Signing Identities`，然后执行以下操作，如下图：\n\n![KeychainsAndCodeSigningIdentities](KeychainsAndCodeSigningIdentities.jpeg)\n\n\n#### 上传至第三方测试平台\n\n这里的第三方测试平台主要是[fir.im](http://fir.im)、[蒲公英](https://www.pgyer.com/)\n\n##### 上传至fir.im\n首先你得先安装fir.im提供的上传工具`fir-cli`，使用如下命令安装：`sudo gem install fir-cli --no-ri --no-rdoc`。\n你可以通过两种方式来使用这个工具上传app至fir.im。\n- 使用fir.im为Jenkins提供的插件。[教程在这里](http://blog.fir.im/jenkins/)\n- 直接用命令来上传，命令如下：`fir p ${WORKSPACE}/build/TestJenkins.ipa -T #API Token#`\n\n##### 上传至蒲公英\n这里提供一个蒲公英官方api，[要看点这里](https://www.pgyer.com/doc/api#uploadApp)\n\n\n#### 邮件通知\n首先要知道Jenkins自带一个邮件通知，但是无法自定义邮件内容的样子，然后都会使用一个第三方插件`Extended E-mail Notification`。\n\n首先进入到系统设置里面，找到`邮件通知`，我这里使用的是163邮箱，网易163免费邮箱相关服务器信息如下图：\n\n![163EmailHelp](163EmailHelp.png)\n\n我们会发现使用`SMTP`服务，如果启用`SSL`协议，则有`465`或`994`两个端口可以选择。如果不用这个协议，则使用`25`端口。\n\n我的设置如下图：\n\n![邮件通知](邮件通知.jpeg)\n\n注意了，这里的密码不能使用你的邮箱登录密码，原因是163邮箱第三方登录需要设置授权码，同时，我们使用`SMTP`服务，也需要去邮箱设置好先，不然会不成功。如下两张图，分别对`POP3/SMTP/IMAP`和`客户端授权密码`进行设置（没办法，为了安全，只好那么麻烦，记得把设置的授权码作为密码填入到`邮件通知`的密码栏里面去）\n\n![POP3SMTPIMAP](POP3SMTPIMAP.jpeg)\n\n![客户端授权密码](客户端授权密码.jpeg)\n\n这些都设置好后，不出意外没什么问题了，点击`邮件通知`下面的`通过发送测试邮件测试配置`，填入一个邮箱测试一下是否成功。\n\n如果成功了，那么恭喜你，你可以把`邮件通知`这一块丢弃了，哈哈，因为刚才说了，我们不使用\nJenkins自带的邮件通知服务，“那你还让我们这么配置干啥？逗我们玩？” 别急，这里主要是用了Jenkins自带的邮件通知服务进行邮箱测试，如果这里成功了，再把这些内容配置到第三方插件`Extended E-mail Notification`中，那就可以了。好了，接下来看`Extended E-mail Notification`，同样的，在Jenkins的系统设置中找到`Extended E-mail Notification`，由于`Extended E-mail Notification`内容很长，我分图片显示：\n\n![ExtendedE-mailNotificationPart1](ExtendedE-mailNotificationPart1.jpeg)\n\n![ExtendedE-mailNotificationPart2](ExtendedE-mailNotificationPart2.jpeg)\n\n![ExtendedE-mailNotificationPart3](ExtendedE-mailNotificationPart3.jpeg)\n\n在这个链接里面有邮件内容的说明：[Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知](http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html)。当然，你可以查看`Extended E-mail Notification`自带的说明，在系统设置中找到`Extended E-mail Notification`，滚动到`Extended E-mail Notification`的底部，找到`Content Token Reference`选项，点击它最右边的问号图标，即可展开内容。如下图所示：\n\n![ContentTokenReference](ContentTokenReference.jpeg)\n\n在系统设置中设置好默认值后，打开项目设置，在`构建后操作`中添加`Editable Email Notification`。配置如图所示：\n\n![EditableEmailNotificationStep1](EditableEmailNotificationStep1.jpeg)\n\n![EditableEmailNotificationStep2](EditableEmailNotificationStep2.jpeg)\n\n![EditableEmailNotificationStep3](EditableEmailNotificationStep3.jpeg)\n\n展开 `Failure-Any`\n\n![EditableEmailNotificationStep4](EditableEmailNotificationStep4.jpeg)\n\n展开 `Success`\n\n![EditableEmailNotificationStep5](EditableEmailNotificationStep5.jpeg)\n\n\n到此如何在Jenkins中使用邮件服务就已经配置好了，这里再次强调一点。我们的邮件服务使用的是`Extended E-mail Notification`插件，而不是Jenkins自带的邮箱服务，也就是说，不要在`构建后操作`中添加`E-mail Notification`操作。\n\n\n### 结束语\n\n以上就是我在使用Jenkins持续集成iOS项目中的分享，感谢我在文章中提到的博文的博主的分享。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中之处。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"iOS项目持续集成","published":1,"updated":"2022-02-14T08:56:19.991Z","_id":"ckhcv3f6p000drlf6cbi48h89","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"使用Jenkins持续集成\"><a href=\"#使用Jenkins持续集成\" class=\"headerlink\" title=\"使用Jenkins持续集成\"></a>使用Jenkins持续集成</h3><h4 id=\"使用Jenkins持续集成-1\"><a href=\"#使用Jenkins持续集成-1\" class=\"headerlink\" title=\"使用Jenkins持续集成\"></a>使用Jenkins持续集成</h4><p>最近老是看到关于使用Jenkins持续集成方面的文章，于是也去折腾了，稍作整理，这里分享下我是如何使用Jenkins持续集成iOS项目的。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"相关博文\"><a href=\"#相关博文\" class=\"headerlink\" title=\"相关博文\"></a>相关博文</h5><ul>\n<li><a href=\"http://blog.fir.im/fir_im_weekly160505/\">fir.im weekly - 「 持续集成 」实践教程合集</a></li>\n<li><a href=\"http://blog.fir.im/testing_cd/\">从自动化测试到持续部署，你需要了解这些</a></li>\n<li><a href=\"http://www.jianshu.com/p/41ecb06ae95f\">手把手教你利用Jenkins持续集成iOS项目</a></li>\n<li><a href=\"http://www.jianshu.com/p/c69deb29720d\">一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP</a></li>\n<li><a href=\"http://www.jianshu.com/p/269d8d66472d\"><em>jenkins</em>iOS项目持续集成（SVN+Cocoapods+Workspace）实战扩展（修改版）</a></li>\n<li><a href=\"http://www.jianshu.com/p/4ce6649973e6\">iOS使用Jenkins进行持续集成</a></li>\n<li><a href=\"http://www.jianshu.com/p/a17167274463\">Jenkins+GitHub+Xcode+fir搭了一个持续集成环境</a></li>\n<li><a href=\"http://www.jianshu.com/p/f44d746ff8a9\">iOS持续集成简述</a></li>\n<li><a href=\"http://xu01.github.io/ios/2016/04/26/iOS-automates-the-integration-1.html\">iOS项目自动打包(一)</a></li>\n<li><a href=\"http://blog.ilovejuly.com/2015/06/20/use-jeninks-to-build-daily.html\">使用 jenkins 进行 iOS 项目持续集成与自动化构建</a></li>\n<li><a href=\"http://tttpeng.com/2015/11/14/jenkins-1/\">使用jenkins + git + 蒲公英 对 iOS 项目进行持续集成</a></li>\n<li><a href=\"http://reviewcode.cn/article.html?reviewId=11\">iOS 下如何自动化打包 App</a></li>\n<li><a href=\"http://www.itiger.me/?p=30\">Jenkins+Github+Testflight在Mac下搭建持续集成环境</a></li>\n<li><a href=\"http://huos3203.github.io/MyBlog/blog/2015/09/18/xcode-and-jenkinschi-xu-ji-cheng-de-ji-chong-shi-xian-fang-shi/\">Xcode&amp;Jenkins持续集成的几种实现方式</a></li>\n<li><a href=\"http://www.linfuyan.com/continuous-integration-of-ios-application-with-jenkins-git-cocoapods-fir.im/\">Jenkins、Git、CocoaPods、Fir.im 实现 iOS 应用持续集成</a></li>\n<li><a href=\"http://www.jianshu.com/p/1fe8652918df\">Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成</a></li>\n<li><a href=\"http://www.jianshu.com/p/e19c8327b167\">Jenkins/git/KeyChains &amp; Provisioning, 记录CI中的一些坑</a></li>\n<li><a href=\"http://www.jianshu.com/p/1fe8652918df\">Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成</a></li>\n<li><a href=\"http://blog.csdn.net/it_talk/article/details/50261229\">Jenkins构建Android项目持续集成之创建项目</a>(这个虽然是安卓，但是参考了构建失败与构建成功分别发送给不同的接受者邮件的方法)</li>\n<li><a href=\"http://liuhongjiang.github.io/hexotech/2015/12/04/jenkins-send-email-after-build/\">配置jenkins发送邮件</a></li>\n<li><a href=\"http://www.cnblogs.com/GGHHLL/p/jenkins.html\">Jenkins 邮件配置 (使用 Jenkins Email Extension Plugin)</a></li>\n<li><a href=\"http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html\">Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知</a></li>\n<li><a href=\"http://docs.oclint.org/en/stable/guide/jenkins.html\">Using OCLint with Jenkins CI</a></li>\n</ul>\n<h4 id=\"使用shell命令\"><a href=\"#使用shell命令\" class=\"headerlink\" title=\"使用shell命令\"></a>使用shell命令</h4><p>利用Xcode自带的命令xcodebuild、xcrun通过shell对iOS项目进行打包上传至第三方测试平台(fir.im、蒲公英等平台)</p>\n<h5 id=\"相关博文-1\"><a href=\"#相关博文-1\" class=\"headerlink\" title=\"相关博文\"></a>相关博文</h5><ul>\n<li><a href=\"https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\">xcodebuild官方文档</a></li>\n<li><a href=\"https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcrun.1.html\">xcrun官方文档</a></li>\n<li><a href=\"http://www.runoob.com/linux/linux-shell.html\">Shell教程</a></li>\n<li><a href=\"http://www.jianshu.com/p/5abbe0d61cef\">shell打包到fir/蒲公英</a></li>\n</ul>\n<h3 id=\"Jenkins持续集成的理解\"><a href=\"#Jenkins持续集成的理解\" class=\"headerlink\" title=\"Jenkins持续集成的理解\"></a>Jenkins持续集成的理解</h3><p>在你的mac上搭建好Jenkins，安装好相应的插件，在项目配置中关联代码仓库(git、svn)，你可以设置固定时间点检查仓库或者固定时间循环检查仓库的方式来检查你的代码仓库，如仓库有变动，则执行编译等操作。每次编译，首先会将仓库中的代码update到本地，然后在本地编译，因此你可以使用本机的所有命令。</p>\n<p>如果你的iOS项目使用了<code>Cocoapods</code>，建议在提交代码的时候<code>ignore</code>如下:<code>Pods文件夹、</code>Podfile.lock文件<code>、</code>XXX.xcworkspace文件`。如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ignore.jpeg\" alt=\"ignore\"></p>\n<p>这样做的原因是pod来的代码，本来就是在第三方仓库，没必要再拉到自己的仓库里面占空间，这样设置之后，需要在<code>Jenkins</code>的<code>构建</code>步骤添加<code>Execute shell</code>操作，并输入脚本<code>pod install --verbose --no-repo-update</code>。如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExecuteShell.jpeg\" alt=\"ExecuteShell\"></p>\n<h3 id=\"我踩过的坑\"><a href=\"#我踩过的坑\" class=\"headerlink\" title=\"我踩过的坑\"></a>我踩过的坑</h3><p>折腾这东西还真没少踩过坑，在这里分享一下，给入坑的同学提供一个解决的思路。</p>\n<h4 id=\"Keychains-and-Provisioning-Profiles-Management\"><a href=\"#Keychains-and-Provisioning-Profiles-Management\" class=\"headerlink\" title=\"Keychains and Provisioning Profiles Management\"></a>Keychains and Provisioning Profiles Management</h4><p>iOS打包需要签名文件和证书，所以我们借助了这个插件<code>Keychains and Provisioning Profiles Management</code>，然而你会发现，我上面提供的博文中，人家的<code>Keychains and Provisioning Profiles Management</code>插件设置中的最下方有<code>Filename</code>和<code>UUID</code>这两个选项，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/HaveFileNameAndUUID.png\" alt=\"HaveFileNameAndUUID\"></p>\n<p>而你的设置中却没有，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/NoFileNameAndUUID.jpeg\" alt=\"NoFileNameAndUUID\"></p>\n<p>这里要注意下，我们要先上传自己的<code>login.keychain</code>文件，才能在下面的<code>Keychains</code>中显示出来。但是你点击图片中最上方的<code>选择文件</code>按钮时，你会发现你要选择的<code>login.keychain</code>文件在这个路径下面(<code>/Users/Jiar/Library/Keychains</code>)，你根本无法选择到，这里一个简单的操作就是先把<code>login.keychain</code>拷贝到桌面再上传这个文件。</p>\n<p>进入Jenkins的全局设置，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ProvisioningProfilesDirectoryPath.jpeg\" alt=\"ProvisioningProfilesDirectoryPath\"></p>\n<p>这里设置好签名文件以及证书路径后，到时候在项目中引用这个路径即可，如下图，在项目中引用这里设置的路径。（首先你要在项目的<code>构建</code>步骤里面添加<code>Xcode</code>步骤，然后在<code>Xcode</code>的<code>Code signing &amp; OS X keychain options</code>项里面勾选<code>Unlock Keychain?</code>，进行配置路径）</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/CodeSigning&OSXKeychainOptions.jpeg\" alt=\"CodeSigning&amp;OSXKeychainOptions\"></p>\n<p>上面的步骤中，我们已经设置好了签名文件和证书的路径，也上传了<code>login.keychain</code>文件，通过这个文件可以为项目选择签名文件对应的证书。同时也在<code>Xcode</code>中设置了<code>Unlock Keychain</code>的path（path实际路径我们在系统设置中设置好了，这里只是一个引用），同时输入了unlock密码（就是你mac的登录密码）。这些做好了，还差一步，那就是我们需要告诉这个项目，选择那个签名文件，才可以通过签名文件找到对应的证书。我们在项目的<code>构建环境</code>中勾选<code>Keychains and Code Signing Identities</code>，然后执行以下操作，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/KeychainsAndCodeSigningIdentities.jpeg\" alt=\"KeychainsAndCodeSigningIdentities\"></p>\n<h4 id=\"上传至第三方测试平台\"><a href=\"#上传至第三方测试平台\" class=\"headerlink\" title=\"上传至第三方测试平台\"></a>上传至第三方测试平台</h4><p>这里的第三方测试平台主要是<a href=\"http://fir.im/\">fir.im</a>、<a href=\"https://www.pgyer.com/\">蒲公英</a></p>\n<h5 id=\"上传至fir-im\"><a href=\"#上传至fir-im\" class=\"headerlink\" title=\"上传至fir.im\"></a>上传至fir.im</h5><p>首先你得先安装fir.im提供的上传工具<code>fir-cli</code>，使用如下命令安装：<code>sudo gem install fir-cli --no-ri --no-rdoc</code>。<br>你可以通过两种方式来使用这个工具上传app至fir.im。</p>\n<ul>\n<li>使用fir.im为Jenkins提供的插件。<a href=\"http://blog.fir.im/jenkins/\">教程在这里</a></li>\n<li>直接用命令来上传，命令如下：<code>fir p $&#123;WORKSPACE&#125;/build/TestJenkins.ipa -T #API Token#</code></li>\n</ul>\n<h5 id=\"上传至蒲公英\"><a href=\"#上传至蒲公英\" class=\"headerlink\" title=\"上传至蒲公英\"></a>上传至蒲公英</h5><p>这里提供一个蒲公英官方api，<a href=\"https://www.pgyer.com/doc/api#uploadApp\">要看点这里</a></p>\n<h4 id=\"邮件通知\"><a href=\"#邮件通知\" class=\"headerlink\" title=\"邮件通知\"></a>邮件通知</h4><p>首先要知道Jenkins自带一个邮件通知，但是无法自定义邮件内容的样子，然后都会使用一个第三方插件<code>Extended E-mail Notification</code>。</p>\n<p>首先进入到系统设置里面，找到<code>邮件通知</code>，我这里使用的是163邮箱，网易163免费邮箱相关服务器信息如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/163EmailHelp.png\" alt=\"163EmailHelp\"></p>\n<p>我们会发现使用<code>SMTP</code>服务，如果启用<code>SSL</code>协议，则有<code>465</code>或<code>994</code>两个端口可以选择。如果不用这个协议，则使用<code>25</code>端口。</p>\n<p>我的设置如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5.jpeg\" alt=\"邮件通知\"></p>\n<p>注意了，这里的密码不能使用你的邮箱登录密码，原因是163邮箱第三方登录需要设置授权码，同时，我们使用<code>SMTP</code>服务，也需要去邮箱设置好先，不然会不成功。如下两张图，分别对<code>POP3/SMTP/IMAP</code>和<code>客户端授权密码</code>进行设置（没办法，为了安全，只好那么麻烦，记得把设置的授权码作为密码填入到<code>邮件通知</code>的密码栏里面去）</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/POP3SMTPIMAP.jpeg\" alt=\"POP3SMTPIMAP\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%88%E6%9D%83%E5%AF%86%E7%A0%81.jpeg\" alt=\"客户端授权密码\"></p>\n<p>这些都设置好后，不出意外没什么问题了，点击<code>邮件通知</code>下面的<code>通过发送测试邮件测试配置</code>，填入一个邮箱测试一下是否成功。</p>\n<p>如果成功了，那么恭喜你，你可以把<code>邮件通知</code>这一块丢弃了，哈哈，因为刚才说了，我们不使用<br>Jenkins自带的邮件通知服务，“那你还让我们这么配置干啥？逗我们玩？” 别急，这里主要是用了Jenkins自带的邮件通知服务进行邮箱测试，如果这里成功了，再把这些内容配置到第三方插件<code>Extended E-mail Notification</code>中，那就可以了。好了，接下来看<code>Extended E-mail Notification</code>，同样的，在Jenkins的系统设置中找到<code>Extended E-mail Notification</code>，由于<code>Extended E-mail Notification</code>内容很长，我分图片显示：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExtendedE-mailNotificationPart1.jpeg\" alt=\"ExtendedE-mailNotificationPart1\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExtendedE-mailNotificationPart2.jpeg\" alt=\"ExtendedE-mailNotificationPart2\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExtendedE-mailNotificationPart3.jpeg\" alt=\"ExtendedE-mailNotificationPart3\"></p>\n<p>在这个链接里面有邮件内容的说明：<a href=\"http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html\">Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知</a>。当然，你可以查看<code>Extended E-mail Notification</code>自带的说明，在系统设置中找到<code>Extended E-mail Notification</code>，滚动到<code>Extended E-mail Notification</code>的底部，找到<code>Content Token Reference</code>选项，点击它最右边的问号图标，即可展开内容。如下图所示：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ContentTokenReference.jpeg\" alt=\"ContentTokenReference\"></p>\n<p>在系统设置中设置好默认值后，打开项目设置，在<code>构建后操作</code>中添加<code>Editable Email Notification</code>。配置如图所示：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep1.jpeg\" alt=\"EditableEmailNotificationStep1\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep2.jpeg\" alt=\"EditableEmailNotificationStep2\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep3.jpeg\" alt=\"EditableEmailNotificationStep3\"></p>\n<p>展开 <code>Failure-Any</code></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep4.jpeg\" alt=\"EditableEmailNotificationStep4\"></p>\n<p>展开 <code>Success</code></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep5.jpeg\" alt=\"EditableEmailNotificationStep5\"></p>\n<p>到此如何在Jenkins中使用邮件服务就已经配置好了，这里再次强调一点。我们的邮件服务使用的是<code>Extended E-mail Notification</code>插件，而不是Jenkins自带的邮箱服务，也就是说，不要在<code>构建后操作</code>中添加<code>E-mail Notification</code>操作。</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>以上就是我在使用Jenkins持续集成iOS项目中的分享，感谢我在文章中提到的博文的博主的分享。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中之处。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用Jenkins持续集成\"><a href=\"#使用Jenkins持续集成\" class=\"headerlink\" title=\"使用Jenkins持续集成\"></a>使用Jenkins持续集成</h3><h4 id=\"使用Jenkins持续集成-1\"><a href=\"#使用Jenkins持续集成-1\" class=\"headerlink\" title=\"使用Jenkins持续集成\"></a>使用Jenkins持续集成</h4><p>最近老是看到关于使用Jenkins持续集成方面的文章，于是也去折腾了，稍作整理，这里分享下我是如何使用Jenkins持续集成iOS项目的。</p>","more":"<h5 id=\"相关博文\"><a href=\"#相关博文\" class=\"headerlink\" title=\"相关博文\"></a>相关博文</h5><ul>\n<li><a href=\"http://blog.fir.im/fir_im_weekly160505/\">fir.im weekly - 「 持续集成 」实践教程合集</a></li>\n<li><a href=\"http://blog.fir.im/testing_cd/\">从自动化测试到持续部署，你需要了解这些</a></li>\n<li><a href=\"http://www.jianshu.com/p/41ecb06ae95f\">手把手教你利用Jenkins持续集成iOS项目</a></li>\n<li><a href=\"http://www.jianshu.com/p/c69deb29720d\">一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP</a></li>\n<li><a href=\"http://www.jianshu.com/p/269d8d66472d\"><em>jenkins</em>iOS项目持续集成（SVN+Cocoapods+Workspace）实战扩展（修改版）</a></li>\n<li><a href=\"http://www.jianshu.com/p/4ce6649973e6\">iOS使用Jenkins进行持续集成</a></li>\n<li><a href=\"http://www.jianshu.com/p/a17167274463\">Jenkins+GitHub+Xcode+fir搭了一个持续集成环境</a></li>\n<li><a href=\"http://www.jianshu.com/p/f44d746ff8a9\">iOS持续集成简述</a></li>\n<li><a href=\"http://xu01.github.io/ios/2016/04/26/iOS-automates-the-integration-1.html\">iOS项目自动打包(一)</a></li>\n<li><a href=\"http://blog.ilovejuly.com/2015/06/20/use-jeninks-to-build-daily.html\">使用 jenkins 进行 iOS 项目持续集成与自动化构建</a></li>\n<li><a href=\"http://tttpeng.com/2015/11/14/jenkins-1/\">使用jenkins + git + 蒲公英 对 iOS 项目进行持续集成</a></li>\n<li><a href=\"http://reviewcode.cn/article.html?reviewId=11\">iOS 下如何自动化打包 App</a></li>\n<li><a href=\"http://www.itiger.me/?p=30\">Jenkins+Github+Testflight在Mac下搭建持续集成环境</a></li>\n<li><a href=\"http://huos3203.github.io/MyBlog/blog/2015/09/18/xcode-and-jenkinschi-xu-ji-cheng-de-ji-chong-shi-xian-fang-shi/\">Xcode&amp;Jenkins持续集成的几种实现方式</a></li>\n<li><a href=\"http://www.linfuyan.com/continuous-integration-of-ios-application-with-jenkins-git-cocoapods-fir.im/\">Jenkins、Git、CocoaPods、Fir.im 实现 iOS 应用持续集成</a></li>\n<li><a href=\"http://www.jianshu.com/p/1fe8652918df\">Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成</a></li>\n<li><a href=\"http://www.jianshu.com/p/e19c8327b167\">Jenkins/git/KeyChains &amp; Provisioning, 记录CI中的一些坑</a></li>\n<li><a href=\"http://www.jianshu.com/p/1fe8652918df\">Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成</a></li>\n<li><a href=\"http://blog.csdn.net/it_talk/article/details/50261229\">Jenkins构建Android项目持续集成之创建项目</a>(这个虽然是安卓，但是参考了构建失败与构建成功分别发送给不同的接受者邮件的方法)</li>\n<li><a href=\"http://liuhongjiang.github.io/hexotech/2015/12/04/jenkins-send-email-after-build/\">配置jenkins发送邮件</a></li>\n<li><a href=\"http://www.cnblogs.com/GGHHLL/p/jenkins.html\">Jenkins 邮件配置 (使用 Jenkins Email Extension Plugin)</a></li>\n<li><a href=\"http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html\">Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知</a></li>\n<li><a href=\"http://docs.oclint.org/en/stable/guide/jenkins.html\">Using OCLint with Jenkins CI</a></li>\n</ul>\n<h4 id=\"使用shell命令\"><a href=\"#使用shell命令\" class=\"headerlink\" title=\"使用shell命令\"></a>使用shell命令</h4><p>利用Xcode自带的命令xcodebuild、xcrun通过shell对iOS项目进行打包上传至第三方测试平台(fir.im、蒲公英等平台)</p>\n<h5 id=\"相关博文-1\"><a href=\"#相关博文-1\" class=\"headerlink\" title=\"相关博文\"></a>相关博文</h5><ul>\n<li><a href=\"https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\">xcodebuild官方文档</a></li>\n<li><a href=\"https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcrun.1.html\">xcrun官方文档</a></li>\n<li><a href=\"http://www.runoob.com/linux/linux-shell.html\">Shell教程</a></li>\n<li><a href=\"http://www.jianshu.com/p/5abbe0d61cef\">shell打包到fir/蒲公英</a></li>\n</ul>\n<h3 id=\"Jenkins持续集成的理解\"><a href=\"#Jenkins持续集成的理解\" class=\"headerlink\" title=\"Jenkins持续集成的理解\"></a>Jenkins持续集成的理解</h3><p>在你的mac上搭建好Jenkins，安装好相应的插件，在项目配置中关联代码仓库(git、svn)，你可以设置固定时间点检查仓库或者固定时间循环检查仓库的方式来检查你的代码仓库，如仓库有变动，则执行编译等操作。每次编译，首先会将仓库中的代码update到本地，然后在本地编译，因此你可以使用本机的所有命令。</p>\n<p>如果你的iOS项目使用了<code>Cocoapods</code>，建议在提交代码的时候<code>ignore</code>如下:<code>Pods文件夹、</code>Podfile.lock文件<code>、</code>XXX.xcworkspace文件`。如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ignore.jpeg\" alt=\"ignore\"></p>\n<p>这样做的原因是pod来的代码，本来就是在第三方仓库，没必要再拉到自己的仓库里面占空间，这样设置之后，需要在<code>Jenkins</code>的<code>构建</code>步骤添加<code>Execute shell</code>操作，并输入脚本<code>pod install --verbose --no-repo-update</code>。如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExecuteShell.jpeg\" alt=\"ExecuteShell\"></p>\n<h3 id=\"我踩过的坑\"><a href=\"#我踩过的坑\" class=\"headerlink\" title=\"我踩过的坑\"></a>我踩过的坑</h3><p>折腾这东西还真没少踩过坑，在这里分享一下，给入坑的同学提供一个解决的思路。</p>\n<h4 id=\"Keychains-and-Provisioning-Profiles-Management\"><a href=\"#Keychains-and-Provisioning-Profiles-Management\" class=\"headerlink\" title=\"Keychains and Provisioning Profiles Management\"></a>Keychains and Provisioning Profiles Management</h4><p>iOS打包需要签名文件和证书，所以我们借助了这个插件<code>Keychains and Provisioning Profiles Management</code>，然而你会发现，我上面提供的博文中，人家的<code>Keychains and Provisioning Profiles Management</code>插件设置中的最下方有<code>Filename</code>和<code>UUID</code>这两个选项，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/HaveFileNameAndUUID.png\" alt=\"HaveFileNameAndUUID\"></p>\n<p>而你的设置中却没有，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/NoFileNameAndUUID.jpeg\" alt=\"NoFileNameAndUUID\"></p>\n<p>这里要注意下，我们要先上传自己的<code>login.keychain</code>文件，才能在下面的<code>Keychains</code>中显示出来。但是你点击图片中最上方的<code>选择文件</code>按钮时，你会发现你要选择的<code>login.keychain</code>文件在这个路径下面(<code>/Users/Jiar/Library/Keychains</code>)，你根本无法选择到，这里一个简单的操作就是先把<code>login.keychain</code>拷贝到桌面再上传这个文件。</p>\n<p>进入Jenkins的全局设置，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ProvisioningProfilesDirectoryPath.jpeg\" alt=\"ProvisioningProfilesDirectoryPath\"></p>\n<p>这里设置好签名文件以及证书路径后，到时候在项目中引用这个路径即可，如下图，在项目中引用这里设置的路径。（首先你要在项目的<code>构建</code>步骤里面添加<code>Xcode</code>步骤，然后在<code>Xcode</code>的<code>Code signing &amp; OS X keychain options</code>项里面勾选<code>Unlock Keychain?</code>，进行配置路径）</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/CodeSigning&OSXKeychainOptions.jpeg\" alt=\"CodeSigning&amp;OSXKeychainOptions\"></p>\n<p>上面的步骤中，我们已经设置好了签名文件和证书的路径，也上传了<code>login.keychain</code>文件，通过这个文件可以为项目选择签名文件对应的证书。同时也在<code>Xcode</code>中设置了<code>Unlock Keychain</code>的path（path实际路径我们在系统设置中设置好了，这里只是一个引用），同时输入了unlock密码（就是你mac的登录密码）。这些做好了，还差一步，那就是我们需要告诉这个项目，选择那个签名文件，才可以通过签名文件找到对应的证书。我们在项目的<code>构建环境</code>中勾选<code>Keychains and Code Signing Identities</code>，然后执行以下操作，如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/KeychainsAndCodeSigningIdentities.jpeg\" alt=\"KeychainsAndCodeSigningIdentities\"></p>\n<h4 id=\"上传至第三方测试平台\"><a href=\"#上传至第三方测试平台\" class=\"headerlink\" title=\"上传至第三方测试平台\"></a>上传至第三方测试平台</h4><p>这里的第三方测试平台主要是<a href=\"http://fir.im/\">fir.im</a>、<a href=\"https://www.pgyer.com/\">蒲公英</a></p>\n<h5 id=\"上传至fir-im\"><a href=\"#上传至fir-im\" class=\"headerlink\" title=\"上传至fir.im\"></a>上传至fir.im</h5><p>首先你得先安装fir.im提供的上传工具<code>fir-cli</code>，使用如下命令安装：<code>sudo gem install fir-cli --no-ri --no-rdoc</code>。<br>你可以通过两种方式来使用这个工具上传app至fir.im。</p>\n<ul>\n<li>使用fir.im为Jenkins提供的插件。<a href=\"http://blog.fir.im/jenkins/\">教程在这里</a></li>\n<li>直接用命令来上传，命令如下：<code>fir p $&#123;WORKSPACE&#125;/build/TestJenkins.ipa -T #API Token#</code></li>\n</ul>\n<h5 id=\"上传至蒲公英\"><a href=\"#上传至蒲公英\" class=\"headerlink\" title=\"上传至蒲公英\"></a>上传至蒲公英</h5><p>这里提供一个蒲公英官方api，<a href=\"https://www.pgyer.com/doc/api#uploadApp\">要看点这里</a></p>\n<h4 id=\"邮件通知\"><a href=\"#邮件通知\" class=\"headerlink\" title=\"邮件通知\"></a>邮件通知</h4><p>首先要知道Jenkins自带一个邮件通知，但是无法自定义邮件内容的样子，然后都会使用一个第三方插件<code>Extended E-mail Notification</code>。</p>\n<p>首先进入到系统设置里面，找到<code>邮件通知</code>，我这里使用的是163邮箱，网易163免费邮箱相关服务器信息如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/163EmailHelp.png\" alt=\"163EmailHelp\"></p>\n<p>我们会发现使用<code>SMTP</code>服务，如果启用<code>SSL</code>协议，则有<code>465</code>或<code>994</code>两个端口可以选择。如果不用这个协议，则使用<code>25</code>端口。</p>\n<p>我的设置如下图：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5.jpeg\" alt=\"邮件通知\"></p>\n<p>注意了，这里的密码不能使用你的邮箱登录密码，原因是163邮箱第三方登录需要设置授权码，同时，我们使用<code>SMTP</code>服务，也需要去邮箱设置好先，不然会不成功。如下两张图，分别对<code>POP3/SMTP/IMAP</code>和<code>客户端授权密码</code>进行设置（没办法，为了安全，只好那么麻烦，记得把设置的授权码作为密码填入到<code>邮件通知</code>的密码栏里面去）</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/POP3SMTPIMAP.jpeg\" alt=\"POP3SMTPIMAP\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%88%E6%9D%83%E5%AF%86%E7%A0%81.jpeg\" alt=\"客户端授权密码\"></p>\n<p>这些都设置好后，不出意外没什么问题了，点击<code>邮件通知</code>下面的<code>通过发送测试邮件测试配置</code>，填入一个邮箱测试一下是否成功。</p>\n<p>如果成功了，那么恭喜你，你可以把<code>邮件通知</code>这一块丢弃了，哈哈，因为刚才说了，我们不使用<br>Jenkins自带的邮件通知服务，“那你还让我们这么配置干啥？逗我们玩？” 别急，这里主要是用了Jenkins自带的邮件通知服务进行邮箱测试，如果这里成功了，再把这些内容配置到第三方插件<code>Extended E-mail Notification</code>中，那就可以了。好了，接下来看<code>Extended E-mail Notification</code>，同样的，在Jenkins的系统设置中找到<code>Extended E-mail Notification</code>，由于<code>Extended E-mail Notification</code>内容很长，我分图片显示：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExtendedE-mailNotificationPart1.jpeg\" alt=\"ExtendedE-mailNotificationPart1\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExtendedE-mailNotificationPart2.jpeg\" alt=\"ExtendedE-mailNotificationPart2\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ExtendedE-mailNotificationPart3.jpeg\" alt=\"ExtendedE-mailNotificationPart3\"></p>\n<p>在这个链接里面有邮件内容的说明：<a href=\"http://www.cnblogs.com/zz0412/p/jenkins_jj_01.html\">Jenkins进阶系列之——01使用email-ext替换Jenkins的默认邮件通知</a>。当然，你可以查看<code>Extended E-mail Notification</code>自带的说明，在系统设置中找到<code>Extended E-mail Notification</code>，滚动到<code>Extended E-mail Notification</code>的底部，找到<code>Content Token Reference</code>选项，点击它最右边的问号图标，即可展开内容。如下图所示：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/ContentTokenReference.jpeg\" alt=\"ContentTokenReference\"></p>\n<p>在系统设置中设置好默认值后，打开项目设置，在<code>构建后操作</code>中添加<code>Editable Email Notification</code>。配置如图所示：</p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep1.jpeg\" alt=\"EditableEmailNotificationStep1\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep2.jpeg\" alt=\"EditableEmailNotificationStep2\"></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep3.jpeg\" alt=\"EditableEmailNotificationStep3\"></p>\n<p>展开 <code>Failure-Any</code></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep4.jpeg\" alt=\"EditableEmailNotificationStep4\"></p>\n<p>展开 <code>Success</code></p>\n<p><img src=\"/2016/08/28/iOS%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/EditableEmailNotificationStep5.jpeg\" alt=\"EditableEmailNotificationStep5\"></p>\n<p>到此如何在Jenkins中使用邮件服务就已经配置好了，这里再次强调一点。我们的邮件服务使用的是<code>Extended E-mail Notification</code>插件，而不是Jenkins自带的邮箱服务，也就是说，不要在<code>构建后操作</code>中添加<code>E-mail Notification</code>操作。</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>以上就是我在使用Jenkins持续集成iOS项目中的分享，感谢我在文章中提到的博文的博主的分享。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中之处。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"从此不再担心键盘遮住输入框OC1","date":"2015-11-15T08:33:00.000Z","_content":"\n文章可能有更新，如需了解，请查看原文：[从此不再担心键盘遮住输入框OC(一)](http://www.jianshu.com/p/48993ff982c1)\n\n### 新版本在这里：[从此不再担心键盘遮住输入框OC(二)](http://blog.jiar.me/2015/12/07/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC2/)\n\n想必大家在iOS开发中都有遇到过这种问题。点击输入框后，弹出的键盘遮挡了输入框，然后你就无法看见你输入了什么。为了解决这个问题，我也在 [Github](https://github.com/)、[CocoaChina](http://www.cocoachina.com/)以及[Code4App](http://code4app.com/)上花了不少时间去找相关的代码以及实现。\n\n##### 找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有[IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)，优点是小巧易使用，支持[CocoaPods](https://cocoapods.org/)，侵入性小，作者爱交友~  \n\n先来一张效果图\n![KeyboardToolBar1 show](https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar1.gif) \n\n<!--more-->\n\n### 如何使用、源码分析\n\n下面我通过`如何使用`和`源码分析`两个方面来介绍[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)。\n\n#### 如何使用\n\n------\n\n##### 就是不想用[CocoaPods](https://cocoapods.org/)\n- 去[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)下载zip。将`Classes`文件夹下的代码复制到你的项目中去。\n\n##### 如果你也用[CocoaPods](https://cocoapods.org/)\n\n###### Podfile \n    platform :ios, '7.0'\n    pod 'KeyboardToolBar', '~> 1.0.0'\n###### import \n    /// 不要忘了先导入.h \n    #import \"KeyboardToolBar.h\"\n###### 注册使用KeyboardToolBar \n    /// 使用该方法给UITextField注册使用KeyboardToolBar \n    /// @param textField 需要注册的UITextField \n    [KeyboardToolBar registerKeyboardToolBar:self.textField];\n###### 反注册(移除)eyboardToolBar \n    /// 不想让UITextField使用KeyboardToolBar的时候 \n    /// 强烈建议使用该方法给UITextField移除KeyboardToolBar \n    /// @param textField 需要移除的UITextField\n    [KeyboardToolBar unregisterKeyboardToolBar:self.textField];\n###### unregisterAllKeyboardToolBar \n    /// 如果嫌一个一个给UITextField移除KeyboardToolBar麻烦 \n    /// 使用这个方法一次性将所有的UITextField移除KeyboardToolBar\n    [KeyboardToolBar unregisterAllKeyboardToolBar];\n\n#### 源码分析\n\n------\n\n##### 实现思路\n\n我的设想是在键盘上方的工具栏处做文章，哪怕是键盘挡住了输入框，但是如果将输入框上的`placeholder`以及输入的内容时刻在工具栏上显示，那么哪怕键盘挡住了输入框，依旧可以清楚知道我现在要输入哪方面的内容以及我现在输入的内容是什么。\n\n##### 源码分析\n\n为了看起来清楚些，以下代码中我使用`KTB`代表`KeyboardToolBar单例对象`。\n\n###### .h文件 \n    /// 继承iOS自带的UIToolbar\n    @interface KeyboardToolBar : UIToolbar\n###### 宏 \n    /// KeyboardToolBar宽度 \n    #define KeyboardToolBarWidth [UIScreen mainScreen].bounds.size.width \n    /// KeyboardToolBar高度 \n    #define KeyboardToolBarHeight 44 \n    /// KeyboardToolBar上UIScrollView组件的宽度 \n    #define KeyboardScrollViewWidth (KeyboardToolBarWidth-80)\n###### 属性 \n    @property(nonatomic, strong)UIScrollView *scrollView;\n    @property(nonatomic, strong)UITextField *toolBarTextField; \n    /// 字典用于存放注册使用KeyboardToolBar的所有UITextField\n    @property(nonatomic, retain)NSMutableDictionary *allRegisterTextFields;\n###### KeyboardToolBar构造单例方法\n```\n/// KTBstatic KeyboardToolBar *keyboardToolBar = nil;\n+ (instancetype)shareKeyboardToolBar {\n    if (keyboardToolBar == nil) { \n        /// KTB是否初始化，如果没有，则进行初始化 \n        /// KeyboardToolBar上需要有一个UIScrollView组件，UIScrollView内部有一个UITextField，如果UITextField内的内容过多，UIScrollView就派上用场了。\n        /// KeyboardToolBar的右侧还需要有一个'完成'按钮，点击该按钮后关闭键盘\n        keyboardToolBar = [[KeyboardToolBar alloc]initWithFrame:CGRectMake(0, 0, KeyboardToolBarWidth, KeyboardToolBarHeight)];\n        [keyboardToolBar setBarStyle:UIBarStyleDefault];\n        keyboardToolBar.scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];\n        keyboardToolBar.scrollView.backgroundColor = [UIColor clearColor]; \n        keyboardToolBar.scrollView.contentSize = CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight); \n        keyboardToolBar.scrollView.bounces = NO;\n        keyboardToolBar.toolBarTextField = [[UITextField alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];\n        keyboardToolBar.toolBarTextField.textAlignment = NSTextAlignmentLeft;\n        keyboardToolBar.toolBarTextField.userInteractionEnabled = NO；\n        [keyboardToolBar.scrollView addSubview:keyboardToolBar.toolBarTextField];\n        UIBarButtonItem *textFieldItem = [[UIBarButtonItem alloc] initWithCustomView:keyboardToolBar.scrollView];\n        UIBarButtonItem *finishBtnItem = [[UIBarButtonItem alloc]initWithTitle:@\"完成\" style:UIBarButtonItemStyleDone target:keyboardToolBar action:@selector(resignKeyboard)];\n        NSArray * buttonsArray = [NSArray arrayWithObjects:textFieldItem,finishBtnItem,nil]; [keyboardToolBar setItems:buttonsArray];\n    } \n    return keyboardToolBar;\n}\n/// 关闭键盘\n- (void)resignKeyboard {\n    keyboardToolBar.toolBarTextField.text = @\"\";\n    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];\n}\n```\n###### KeyboardToolBar注册方法\n```\n+ (void)registerKeyboardToolBar:(UITextField *)textField {\n    if([KeyboardToolBar shareKeyboardToolBar].allRegisterTextFields == nil) {\n        keyboardToolBar.allRegisterTextFields = [NSMutableDictionary dictionaryWithCapacity:10];\n    }\n    /// 将KTB赋予传入的textField\n    [textField setInputAccessoryView:keyboardToolBar];\n    /// 为传入的textField对象addTarget\n    [textField addTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];\n    [textField addTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];\n    /// 将传入的textField保存于KTB\n    [keyboardToolBar.allRegisterTextFields setValue:textField forKey:[NSString stringWithFormat:@\"%p\",textField]];\n}\n- (void)textFieldDidBegin:(UITextField *)textField {\n    [self reSetTextField:textField];\n}\n- (void)textFieldDidChange:(UITextField *)textField {\n    [self reSetTextField:textField];\n}\n/// 将textField的placeholder以及textField上的文字及时显示在KTB内部的UITextField上\n- (void)reSetTextField:(UITextField *)textField {\n    UITextField *tempTextField = [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@\"%p\",textField]];\n    CGFloat textWidth = [KeyboardToolBar widthForString:tempTextField.text withFont:keyboardToolBar.toolBarTextField.font];\n    if(textWidth > KeyboardScrollViewWidth) {\n        keyboardToolBar.toolBarTextField.frame = CGRectMake(0,0,textWidth,KeyboardToolBarHeight);\n        keyboardToolBar.scrollView.contentSize = CGSizeMake(textWidth, KeyboardToolBarHeight);\n        [self.scrollView scrollRectToVisible:CGRectMake(textWidth-KeyboardScrollViewWidth,0,KeyboardScrollViewWidth,KeyboardToolBarHeight) animated:YES];\n    } else {\n        keyboardToolBar.toolBarTextField.frame = CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight);\n        keyboardToolBar.scrollView.contentSize = CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight);\n    }\n    keyboardToolBar.toolBarTextField.text = tempTextField.text;\n    keyboardToolBar.toolBarTextField.textColor = tempTextField.textColor;\n    if(tempTextField.placeholder != nil) {\n        NSAttributedString *attribute = textField.attributedPlaceholder;\n        NSDictionary *dictionary = [attribute attributesAtIndex:0 effectiveRange:nil];\n        keyboardToolBar.toolBarTextField.attributedPlaceholder = [[NSAttributedString alloc] initWithString:tempTextField.placeholder attributes:@{NSForegroundColorAttributeName: [dictionary valueForKey:NSForegroundColorAttributeName]}];\n    }\n}\n/// 根据文本内容和字体计算NSString长度用于设置KTB内部的UIScrollView以及UITextField的宽度\n+ (CGFloat)widthForString:(NSString *)str withFont:(UIFont *)font {\n    NSDictionary *attribute = @{NSFontAttributeName: font};\n    CGSize size = [str boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX) options: NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;\n    return size.width;\n}\n```\n###### KeyboardToolBar反注册(移除)方法\n```\n/// 直接将KTB中所有已注册的UITextField移除\n+ (void)unregisterKeyboardToolBar:(UITextField *)textField {\n    if(keyboardToolBar == nil || keyboardToolBar.allRegisterTextFields.count == 0) {\n        return;\n    }\n    UITextField *tempTextField = [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@\"%p\",textField]];\n    [tempTextField setInputAccessoryView:nil];\n    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];\n    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];\n    [keyboardToolBar.allRegisterTextFields removeObjectForKey:[NSString stringWithFormat:@\"%p\",textField]];\n    if(keyboardToolBar.allRegisterTextFields.count == 0) {\n        keyboardToolBar.allRegisterTextFields = nil;\n        keyboardToolBar = nil;\n    }\n}\n/// 根据传入的UITextField兑现。从KTB内移除\n+ (void)unregisterAllKeyboardToolBar {\n    if(keyboardToolBar == nil || keyboardToolBar.allRegisterTextFields.count == 0) {\n        return;\n    }\n    NSEnumerator *enumeratorValue = [keyboardToolBar.allRegisterTextFields objectEnumerator];\n    for(UITextField *tempTextField in enumeratorValue) {\n        [tempTextField setInputAccessoryView:nil];\n        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];\n        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];\n    } \n    [keyboardToolBar.allRegisterTextFields removeAllObjects];\n    keyboardToolBar.allRegisterTextFields = nil;\n    keyboardToolBar = nil;\n}\n```\n好了，以上就是我的介绍，欢迎大家来我的[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)主页进行Star、Issues或Pull requests，我是Jiar，我热爱交朋友~\n\n\n### 微信订阅号\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/从此不再担心键盘遮住输入框OC1.md","raw":"---\ntitle: 从此不再担心键盘遮住输入框OC1\ndate: 2015-11-15 16:33:00\ncategories: iOS\ntags:\n- iOS\n- 键盘\n- 输入框\n- 遮盖\n---\n\n文章可能有更新，如需了解，请查看原文：[从此不再担心键盘遮住输入框OC(一)](http://www.jianshu.com/p/48993ff982c1)\n\n### 新版本在这里：[从此不再担心键盘遮住输入框OC(二)](http://blog.jiar.me/2015/12/07/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC2/)\n\n想必大家在iOS开发中都有遇到过这种问题。点击输入框后，弹出的键盘遮挡了输入框，然后你就无法看见你输入了什么。为了解决这个问题，我也在 [Github](https://github.com/)、[CocoaChina](http://www.cocoachina.com/)以及[Code4App](http://code4app.com/)上花了不少时间去找相关的代码以及实现。\n\n##### 找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有[IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)，优点是小巧易使用，支持[CocoaPods](https://cocoapods.org/)，侵入性小，作者爱交友~  \n\n先来一张效果图\n![KeyboardToolBar1 show](https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar1.gif) \n\n<!--more-->\n\n### 如何使用、源码分析\n\n下面我通过`如何使用`和`源码分析`两个方面来介绍[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)。\n\n#### 如何使用\n\n------\n\n##### 就是不想用[CocoaPods](https://cocoapods.org/)\n- 去[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)下载zip。将`Classes`文件夹下的代码复制到你的项目中去。\n\n##### 如果你也用[CocoaPods](https://cocoapods.org/)\n\n###### Podfile \n    platform :ios, '7.0'\n    pod 'KeyboardToolBar', '~> 1.0.0'\n###### import \n    /// 不要忘了先导入.h \n    #import \"KeyboardToolBar.h\"\n###### 注册使用KeyboardToolBar \n    /// 使用该方法给UITextField注册使用KeyboardToolBar \n    /// @param textField 需要注册的UITextField \n    [KeyboardToolBar registerKeyboardToolBar:self.textField];\n###### 反注册(移除)eyboardToolBar \n    /// 不想让UITextField使用KeyboardToolBar的时候 \n    /// 强烈建议使用该方法给UITextField移除KeyboardToolBar \n    /// @param textField 需要移除的UITextField\n    [KeyboardToolBar unregisterKeyboardToolBar:self.textField];\n###### unregisterAllKeyboardToolBar \n    /// 如果嫌一个一个给UITextField移除KeyboardToolBar麻烦 \n    /// 使用这个方法一次性将所有的UITextField移除KeyboardToolBar\n    [KeyboardToolBar unregisterAllKeyboardToolBar];\n\n#### 源码分析\n\n------\n\n##### 实现思路\n\n我的设想是在键盘上方的工具栏处做文章，哪怕是键盘挡住了输入框，但是如果将输入框上的`placeholder`以及输入的内容时刻在工具栏上显示，那么哪怕键盘挡住了输入框，依旧可以清楚知道我现在要输入哪方面的内容以及我现在输入的内容是什么。\n\n##### 源码分析\n\n为了看起来清楚些，以下代码中我使用`KTB`代表`KeyboardToolBar单例对象`。\n\n###### .h文件 \n    /// 继承iOS自带的UIToolbar\n    @interface KeyboardToolBar : UIToolbar\n###### 宏 \n    /// KeyboardToolBar宽度 \n    #define KeyboardToolBarWidth [UIScreen mainScreen].bounds.size.width \n    /// KeyboardToolBar高度 \n    #define KeyboardToolBarHeight 44 \n    /// KeyboardToolBar上UIScrollView组件的宽度 \n    #define KeyboardScrollViewWidth (KeyboardToolBarWidth-80)\n###### 属性 \n    @property(nonatomic, strong)UIScrollView *scrollView;\n    @property(nonatomic, strong)UITextField *toolBarTextField; \n    /// 字典用于存放注册使用KeyboardToolBar的所有UITextField\n    @property(nonatomic, retain)NSMutableDictionary *allRegisterTextFields;\n###### KeyboardToolBar构造单例方法\n```\n/// KTBstatic KeyboardToolBar *keyboardToolBar = nil;\n+ (instancetype)shareKeyboardToolBar {\n    if (keyboardToolBar == nil) { \n        /// KTB是否初始化，如果没有，则进行初始化 \n        /// KeyboardToolBar上需要有一个UIScrollView组件，UIScrollView内部有一个UITextField，如果UITextField内的内容过多，UIScrollView就派上用场了。\n        /// KeyboardToolBar的右侧还需要有一个'完成'按钮，点击该按钮后关闭键盘\n        keyboardToolBar = [[KeyboardToolBar alloc]initWithFrame:CGRectMake(0, 0, KeyboardToolBarWidth, KeyboardToolBarHeight)];\n        [keyboardToolBar setBarStyle:UIBarStyleDefault];\n        keyboardToolBar.scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];\n        keyboardToolBar.scrollView.backgroundColor = [UIColor clearColor]; \n        keyboardToolBar.scrollView.contentSize = CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight); \n        keyboardToolBar.scrollView.bounces = NO;\n        keyboardToolBar.toolBarTextField = [[UITextField alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];\n        keyboardToolBar.toolBarTextField.textAlignment = NSTextAlignmentLeft;\n        keyboardToolBar.toolBarTextField.userInteractionEnabled = NO；\n        [keyboardToolBar.scrollView addSubview:keyboardToolBar.toolBarTextField];\n        UIBarButtonItem *textFieldItem = [[UIBarButtonItem alloc] initWithCustomView:keyboardToolBar.scrollView];\n        UIBarButtonItem *finishBtnItem = [[UIBarButtonItem alloc]initWithTitle:@\"完成\" style:UIBarButtonItemStyleDone target:keyboardToolBar action:@selector(resignKeyboard)];\n        NSArray * buttonsArray = [NSArray arrayWithObjects:textFieldItem,finishBtnItem,nil]; [keyboardToolBar setItems:buttonsArray];\n    } \n    return keyboardToolBar;\n}\n/// 关闭键盘\n- (void)resignKeyboard {\n    keyboardToolBar.toolBarTextField.text = @\"\";\n    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];\n}\n```\n###### KeyboardToolBar注册方法\n```\n+ (void)registerKeyboardToolBar:(UITextField *)textField {\n    if([KeyboardToolBar shareKeyboardToolBar].allRegisterTextFields == nil) {\n        keyboardToolBar.allRegisterTextFields = [NSMutableDictionary dictionaryWithCapacity:10];\n    }\n    /// 将KTB赋予传入的textField\n    [textField setInputAccessoryView:keyboardToolBar];\n    /// 为传入的textField对象addTarget\n    [textField addTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];\n    [textField addTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];\n    /// 将传入的textField保存于KTB\n    [keyboardToolBar.allRegisterTextFields setValue:textField forKey:[NSString stringWithFormat:@\"%p\",textField]];\n}\n- (void)textFieldDidBegin:(UITextField *)textField {\n    [self reSetTextField:textField];\n}\n- (void)textFieldDidChange:(UITextField *)textField {\n    [self reSetTextField:textField];\n}\n/// 将textField的placeholder以及textField上的文字及时显示在KTB内部的UITextField上\n- (void)reSetTextField:(UITextField *)textField {\n    UITextField *tempTextField = [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@\"%p\",textField]];\n    CGFloat textWidth = [KeyboardToolBar widthForString:tempTextField.text withFont:keyboardToolBar.toolBarTextField.font];\n    if(textWidth > KeyboardScrollViewWidth) {\n        keyboardToolBar.toolBarTextField.frame = CGRectMake(0,0,textWidth,KeyboardToolBarHeight);\n        keyboardToolBar.scrollView.contentSize = CGSizeMake(textWidth, KeyboardToolBarHeight);\n        [self.scrollView scrollRectToVisible:CGRectMake(textWidth-KeyboardScrollViewWidth,0,KeyboardScrollViewWidth,KeyboardToolBarHeight) animated:YES];\n    } else {\n        keyboardToolBar.toolBarTextField.frame = CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight);\n        keyboardToolBar.scrollView.contentSize = CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight);\n    }\n    keyboardToolBar.toolBarTextField.text = tempTextField.text;\n    keyboardToolBar.toolBarTextField.textColor = tempTextField.textColor;\n    if(tempTextField.placeholder != nil) {\n        NSAttributedString *attribute = textField.attributedPlaceholder;\n        NSDictionary *dictionary = [attribute attributesAtIndex:0 effectiveRange:nil];\n        keyboardToolBar.toolBarTextField.attributedPlaceholder = [[NSAttributedString alloc] initWithString:tempTextField.placeholder attributes:@{NSForegroundColorAttributeName: [dictionary valueForKey:NSForegroundColorAttributeName]}];\n    }\n}\n/// 根据文本内容和字体计算NSString长度用于设置KTB内部的UIScrollView以及UITextField的宽度\n+ (CGFloat)widthForString:(NSString *)str withFont:(UIFont *)font {\n    NSDictionary *attribute = @{NSFontAttributeName: font};\n    CGSize size = [str boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX) options: NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;\n    return size.width;\n}\n```\n###### KeyboardToolBar反注册(移除)方法\n```\n/// 直接将KTB中所有已注册的UITextField移除\n+ (void)unregisterKeyboardToolBar:(UITextField *)textField {\n    if(keyboardToolBar == nil || keyboardToolBar.allRegisterTextFields.count == 0) {\n        return;\n    }\n    UITextField *tempTextField = [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@\"%p\",textField]];\n    [tempTextField setInputAccessoryView:nil];\n    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];\n    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];\n    [keyboardToolBar.allRegisterTextFields removeObjectForKey:[NSString stringWithFormat:@\"%p\",textField]];\n    if(keyboardToolBar.allRegisterTextFields.count == 0) {\n        keyboardToolBar.allRegisterTextFields = nil;\n        keyboardToolBar = nil;\n    }\n}\n/// 根据传入的UITextField兑现。从KTB内移除\n+ (void)unregisterAllKeyboardToolBar {\n    if(keyboardToolBar == nil || keyboardToolBar.allRegisterTextFields.count == 0) {\n        return;\n    }\n    NSEnumerator *enumeratorValue = [keyboardToolBar.allRegisterTextFields objectEnumerator];\n    for(UITextField *tempTextField in enumeratorValue) {\n        [tempTextField setInputAccessoryView:nil];\n        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];\n        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];\n    } \n    [keyboardToolBar.allRegisterTextFields removeAllObjects];\n    keyboardToolBar.allRegisterTextFields = nil;\n    keyboardToolBar = nil;\n}\n```\n好了，以上就是我的介绍，欢迎大家来我的[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)主页进行Star、Issues或Pull requests，我是Jiar，我热爱交朋友~\n\n\n### 微信订阅号\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"从此不再担心键盘遮住输入框OC1","published":1,"updated":"2022-02-14T09:21:31.710Z","_id":"ckhcv3f6q000hrlf6h5we3a03","comments":1,"layout":"post","photos":[],"link":"","content":"<p>文章可能有更新，如需了解，请查看原文：<a href=\"http://www.jianshu.com/p/48993ff982c1\">从此不再担心键盘遮住输入框OC(一)</a></p>\n<h3 id=\"新版本在这里：从此不再担心键盘遮住输入框OC-二\"><a href=\"#新版本在这里：从此不再担心键盘遮住输入框OC-二\" class=\"headerlink\" title=\"新版本在这里：从此不再担心键盘遮住输入框OC(二)\"></a>新版本在这里：<a href=\"http://blog.jiar.me/2015/12/07/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC2/\">从此不再担心键盘遮住输入框OC(二)</a></h3><p>想必大家在iOS开发中都有遇到过这种问题。点击输入框后，弹出的键盘遮挡了输入框，然后你就无法看见你输入了什么。为了解决这个问题，我也在 <a href=\"https://github.com/\">Github</a>、<a href=\"http://www.cocoachina.com/\">CocoaChina</a>以及<a href=\"http://code4app.com/\">Code4App</a>上花了不少时间去找相关的代码以及实现。</p>\n<h5 id=\"找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有IQKeyboardManager，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件KeyboardToolBar，优点是小巧易使用，支持CocoaPods，侵入性小，作者爱交友\"><a href=\"#找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有IQKeyboardManager，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件KeyboardToolBar，优点是小巧易使用，支持CocoaPods，侵入性小，作者爱交友\" class=\"headerlink\" title=\"找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有IQKeyboardManager，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件KeyboardToolBar，优点是小巧易使用，支持CocoaPods，侵入性小，作者爱交友~\"></a>找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有<a href=\"https://github.com/hackiftekhar/IQKeyboardManager\">IQKeyboardManager</a>，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>，优点是小巧易使用，支持<a href=\"https://cocoapods.org/\">CocoaPods</a>，侵入性小，作者爱交友~</h5><p>先来一张效果图<br><img src=\"https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar1.gif\" alt=\"KeyboardToolBar1 show\"> </p>\n<a id=\"more\"></a>\n\n<h3 id=\"如何使用、源码分析\"><a href=\"#如何使用、源码分析\" class=\"headerlink\" title=\"如何使用、源码分析\"></a>如何使用、源码分析</h3><p>下面我通过<code>如何使用</code>和<code>源码分析</code>两个方面来介绍<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>。</p>\n<h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><hr>\n<h5 id=\"就是不想用CocoaPods\"><a href=\"#就是不想用CocoaPods\" class=\"headerlink\" title=\"就是不想用CocoaPods\"></a>就是不想用<a href=\"https://cocoapods.org/\">CocoaPods</a></h5><ul>\n<li>去<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>下载zip。将<code>Classes</code>文件夹下的代码复制到你的项目中去。</li>\n</ul>\n<h5 id=\"如果你也用CocoaPods\"><a href=\"#如果你也用CocoaPods\" class=\"headerlink\" title=\"如果你也用CocoaPods\"></a>如果你也用<a href=\"https://cocoapods.org/\">CocoaPods</a></h5><h6 id=\"Podfile\"><a href=\"#Podfile\" class=\"headerlink\" title=\"Podfile\"></a>Podfile</h6><pre><code>platform :ios, &#39;7.0&#39;\npod &#39;KeyboardToolBar&#39;, &#39;~&gt; 1.0.0&#39;</code></pre>\n<h6 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h6><pre><code>/// 不要忘了先导入.h \n#import &quot;KeyboardToolBar.h&quot;</code></pre>\n<h6 id=\"注册使用KeyboardToolBar\"><a href=\"#注册使用KeyboardToolBar\" class=\"headerlink\" title=\"注册使用KeyboardToolBar\"></a>注册使用KeyboardToolBar</h6><pre><code>/// 使用该方法给UITextField注册使用KeyboardToolBar \n/// @param textField 需要注册的UITextField \n[KeyboardToolBar registerKeyboardToolBar:self.textField];</code></pre>\n<h6 id=\"反注册-移除-eyboardToolBar\"><a href=\"#反注册-移除-eyboardToolBar\" class=\"headerlink\" title=\"反注册(移除)eyboardToolBar\"></a>反注册(移除)eyboardToolBar</h6><pre><code>/// 不想让UITextField使用KeyboardToolBar的时候 \n/// 强烈建议使用该方法给UITextField移除KeyboardToolBar \n/// @param textField 需要移除的UITextField\n[KeyboardToolBar unregisterKeyboardToolBar:self.textField];</code></pre>\n<h6 id=\"unregisterAllKeyboardToolBar\"><a href=\"#unregisterAllKeyboardToolBar\" class=\"headerlink\" title=\"unregisterAllKeyboardToolBar\"></a>unregisterAllKeyboardToolBar</h6><pre><code>/// 如果嫌一个一个给UITextField移除KeyboardToolBar麻烦 \n/// 使用这个方法一次性将所有的UITextField移除KeyboardToolBar\n[KeyboardToolBar unregisterAllKeyboardToolBar];</code></pre>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><hr>\n<h5 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h5><p>我的设想是在键盘上方的工具栏处做文章，哪怕是键盘挡住了输入框，但是如果将输入框上的<code>placeholder</code>以及输入的内容时刻在工具栏上显示，那么哪怕键盘挡住了输入框，依旧可以清楚知道我现在要输入哪方面的内容以及我现在输入的内容是什么。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>为了看起来清楚些，以下代码中我使用<code>KTB</code>代表<code>KeyboardToolBar单例对象</code>。</p>\n<h6 id=\"h文件\"><a href=\"#h文件\" class=\"headerlink\" title=\".h文件\"></a>.h文件</h6><pre><code>/// 继承iOS自带的UIToolbar\n@interface KeyboardToolBar : UIToolbar</code></pre>\n<h6 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h6><pre><code>/// KeyboardToolBar宽度 \n#define KeyboardToolBarWidth [UIScreen mainScreen].bounds.size.width \n/// KeyboardToolBar高度 \n#define KeyboardToolBarHeight 44 \n/// KeyboardToolBar上UIScrollView组件的宽度 \n#define KeyboardScrollViewWidth (KeyboardToolBarWidth-80)</code></pre>\n<h6 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h6><pre><code>@property(nonatomic, strong)UIScrollView *scrollView;\n@property(nonatomic, strong)UITextField *toolBarTextField; \n/// 字典用于存放注册使用KeyboardToolBar的所有UITextField\n@property(nonatomic, retain)NSMutableDictionary *allRegisterTextFields;</code></pre>\n<h6 id=\"KeyboardToolBar构造单例方法\"><a href=\"#KeyboardToolBar构造单例方法\" class=\"headerlink\" title=\"KeyboardToolBar构造单例方法\"></a>KeyboardToolBar构造单例方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F; KTBstatic KeyboardToolBar *keyboardToolBar &#x3D; nil;</span><br><span class=\"line\">+ (instancetype)shareKeyboardToolBar &#123;</span><br><span class=\"line\">    if (keyboardToolBar &#x3D;&#x3D; nil) &#123; </span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F; KTB是否初始化，如果没有，则进行初始化 </span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F; KeyboardToolBar上需要有一个UIScrollView组件，UIScrollView内部有一个UITextField，如果UITextField内的内容过多，UIScrollView就派上用场了。</span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F; KeyboardToolBar的右侧还需要有一个&#39;完成&#39;按钮，点击该按钮后关闭键盘</span><br><span class=\"line\">        keyboardToolBar &#x3D; [[KeyboardToolBar alloc]initWithFrame:CGRectMake(0, 0, KeyboardToolBarWidth, KeyboardToolBarHeight)];</span><br><span class=\"line\">        [keyboardToolBar setBarStyle:UIBarStyleDefault];</span><br><span class=\"line\">        keyboardToolBar.scrollView &#x3D; [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];</span><br><span class=\"line\">        keyboardToolBar.scrollView.backgroundColor &#x3D; [UIColor clearColor]; </span><br><span class=\"line\">        keyboardToolBar.scrollView.contentSize &#x3D; CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight); </span><br><span class=\"line\">        keyboardToolBar.scrollView.bounces &#x3D; NO;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField &#x3D; [[UITextField alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.textAlignment &#x3D; NSTextAlignmentLeft;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.userInteractionEnabled &#x3D; NO；</span><br><span class=\"line\">        [keyboardToolBar.scrollView addSubview:keyboardToolBar.toolBarTextField];</span><br><span class=\"line\">        UIBarButtonItem *textFieldItem &#x3D; [[UIBarButtonItem alloc] initWithCustomView:keyboardToolBar.scrollView];</span><br><span class=\"line\">        UIBarButtonItem *finishBtnItem &#x3D; [[UIBarButtonItem alloc]initWithTitle:@&quot;完成&quot; style:UIBarButtonItemStyleDone target:keyboardToolBar action:@selector(resignKeyboard)];</span><br><span class=\"line\">        NSArray * buttonsArray &#x3D; [NSArray arrayWithObjects:textFieldItem,finishBtnItem,nil]; [keyboardToolBar setItems:buttonsArray];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    return keyboardToolBar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 关闭键盘</span><br><span class=\"line\">- (void)resignKeyboard &#123;</span><br><span class=\"line\">    keyboardToolBar.toolBarTextField.text &#x3D; @&quot;&quot;;</span><br><span class=\"line\">    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"KeyboardToolBar注册方法\"><a href=\"#KeyboardToolBar注册方法\" class=\"headerlink\" title=\"KeyboardToolBar注册方法\"></a>KeyboardToolBar注册方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)registerKeyboardToolBar:(UITextField *)textField &#123;</span><br><span class=\"line\">    if([KeyboardToolBar shareKeyboardToolBar].allRegisterTextFields &#x3D;&#x3D; nil) &#123;</span><br><span class=\"line\">        keyboardToolBar.allRegisterTextFields &#x3D; [NSMutableDictionary dictionaryWithCapacity:10];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 将KTB赋予传入的textField</span><br><span class=\"line\">    [textField setInputAccessoryView:keyboardToolBar];</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 为传入的textField对象addTarget</span><br><span class=\"line\">    [textField addTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];</span><br><span class=\"line\">    [textField addTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 将传入的textField保存于KTB</span><br><span class=\"line\">    [keyboardToolBar.allRegisterTextFields setValue:textField forKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)textFieldDidBegin:(UITextField *)textField &#123;</span><br><span class=\"line\">    [self reSetTextField:textField];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)textFieldDidChange:(UITextField *)textField &#123;</span><br><span class=\"line\">    [self reSetTextField:textField];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 将textField的placeholder以及textField上的文字及时显示在KTB内部的UITextField上</span><br><span class=\"line\">- (void)reSetTextField:(UITextField *)textField &#123;</span><br><span class=\"line\">    UITextField *tempTextField &#x3D; [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">    CGFloat textWidth &#x3D; [KeyboardToolBar widthForString:tempTextField.text withFont:keyboardToolBar.toolBarTextField.font];</span><br><span class=\"line\">    if(textWidth &gt; KeyboardScrollViewWidth) &#123;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.frame &#x3D; CGRectMake(0,0,textWidth,KeyboardToolBarHeight);</span><br><span class=\"line\">        keyboardToolBar.scrollView.contentSize &#x3D; CGSizeMake(textWidth, KeyboardToolBarHeight);</span><br><span class=\"line\">        [self.scrollView scrollRectToVisible:CGRectMake(textWidth-KeyboardScrollViewWidth,0,KeyboardScrollViewWidth,KeyboardToolBarHeight) animated:YES];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.frame &#x3D; CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight);</span><br><span class=\"line\">        keyboardToolBar.scrollView.contentSize &#x3D; CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keyboardToolBar.toolBarTextField.text &#x3D; tempTextField.text;</span><br><span class=\"line\">    keyboardToolBar.toolBarTextField.textColor &#x3D; tempTextField.textColor;</span><br><span class=\"line\">    if(tempTextField.placeholder !&#x3D; nil) &#123;</span><br><span class=\"line\">        NSAttributedString *attribute &#x3D; textField.attributedPlaceholder;</span><br><span class=\"line\">        NSDictionary *dictionary &#x3D; [attribute attributesAtIndex:0 effectiveRange:nil];</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.attributedPlaceholder &#x3D; [[NSAttributedString alloc] initWithString:tempTextField.placeholder attributes:@&#123;NSForegroundColorAttributeName: [dictionary valueForKey:NSForegroundColorAttributeName]&#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 根据文本内容和字体计算NSString长度用于设置KTB内部的UIScrollView以及UITextField的宽度</span><br><span class=\"line\">+ (CGFloat)widthForString:(NSString *)str withFont:(UIFont *)font &#123;</span><br><span class=\"line\">    NSDictionary *attribute &#x3D; @&#123;NSFontAttributeName: font&#125;;</span><br><span class=\"line\">    CGSize size &#x3D; [str boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX) options: NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;</span><br><span class=\"line\">    return size.width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"KeyboardToolBar反注册-移除-方法\"><a href=\"#KeyboardToolBar反注册-移除-方法\" class=\"headerlink\" title=\"KeyboardToolBar反注册(移除)方法\"></a>KeyboardToolBar反注册(移除)方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F; 直接将KTB中所有已注册的UITextField移除</span><br><span class=\"line\">+ (void)unregisterKeyboardToolBar:(UITextField *)textField &#123;</span><br><span class=\"line\">    if(keyboardToolBar &#x3D;&#x3D; nil || keyboardToolBar.allRegisterTextFields.count &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    UITextField *tempTextField &#x3D; [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">    [tempTextField setInputAccessoryView:nil];</span><br><span class=\"line\">    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];</span><br><span class=\"line\">    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];</span><br><span class=\"line\">    [keyboardToolBar.allRegisterTextFields removeObjectForKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">    if(keyboardToolBar.allRegisterTextFields.count &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        keyboardToolBar.allRegisterTextFields &#x3D; nil;</span><br><span class=\"line\">        keyboardToolBar &#x3D; nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 根据传入的UITextField兑现。从KTB内移除</span><br><span class=\"line\">+ (void)unregisterAllKeyboardToolBar &#123;</span><br><span class=\"line\">    if(keyboardToolBar &#x3D;&#x3D; nil || keyboardToolBar.allRegisterTextFields.count &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NSEnumerator *enumeratorValue &#x3D; [keyboardToolBar.allRegisterTextFields objectEnumerator];</span><br><span class=\"line\">    for(UITextField *tempTextField in enumeratorValue) &#123;</span><br><span class=\"line\">        [tempTextField setInputAccessoryView:nil];</span><br><span class=\"line\">        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];</span><br><span class=\"line\">        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    [keyboardToolBar.allRegisterTextFields removeAllObjects];</span><br><span class=\"line\">    keyboardToolBar.allRegisterTextFields &#x3D; nil;</span><br><span class=\"line\">    keyboardToolBar &#x3D; nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，以上就是我的介绍，欢迎大家来我的<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>主页进行Star、Issues或Pull requests，我是Jiar，我热爱交朋友~</p>\n<h3 id=\"微信订阅号\"><a href=\"#微信订阅号\" class=\"headerlink\" title=\"微信订阅号\"></a>微信订阅号</h3><p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p>文章可能有更新，如需了解，请查看原文：<a href=\"http://www.jianshu.com/p/48993ff982c1\">从此不再担心键盘遮住输入框OC(一)</a></p>\n<h3 id=\"新版本在这里：从此不再担心键盘遮住输入框OC-二\"><a href=\"#新版本在这里：从此不再担心键盘遮住输入框OC-二\" class=\"headerlink\" title=\"新版本在这里：从此不再担心键盘遮住输入框OC(二)\"></a>新版本在这里：<a href=\"http://blog.jiar.me/2015/12/07/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC2/\">从此不再担心键盘遮住输入框OC(二)</a></h3><p>想必大家在iOS开发中都有遇到过这种问题。点击输入框后，弹出的键盘遮挡了输入框，然后你就无法看见你输入了什么。为了解决这个问题，我也在 <a href=\"https://github.com/\">Github</a>、<a href=\"http://www.cocoachina.com/\">CocoaChina</a>以及<a href=\"http://code4app.com/\">Code4App</a>上花了不少时间去找相关的代码以及实现。</p>\n<h5 id=\"找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有IQKeyboardManager，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件KeyboardToolBar，优点是小巧易使用，支持CocoaPods，侵入性小，作者爱交友\"><a href=\"#找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有IQKeyboardManager，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件KeyboardToolBar，优点是小巧易使用，支持CocoaPods，侵入性小，作者爱交友\" class=\"headerlink\" title=\"找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有IQKeyboardManager，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件KeyboardToolBar，优点是小巧易使用，支持CocoaPods，侵入性小，作者爱交友~\"></a>找到的相关内容很多，但是都有一个共同点，是通过将底部的View上滑至键盘之上，从而可以看见输入框内的内容。在这方面做得好的有<a href=\"https://github.com/hackiftekhar/IQKeyboardManager\">IQKeyboardManager</a>，喜欢的可以去看看，但是我不是就直接采用了IQKeyboardManager，而是自己写了一个键盘组件<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>，优点是小巧易使用，支持<a href=\"https://cocoapods.org/\">CocoaPods</a>，侵入性小，作者爱交友~</h5><p>先来一张效果图<br><img src=\"https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar1.gif\" alt=\"KeyboardToolBar1 show\"> </p>","more":"<h3 id=\"如何使用、源码分析\"><a href=\"#如何使用、源码分析\" class=\"headerlink\" title=\"如何使用、源码分析\"></a>如何使用、源码分析</h3><p>下面我通过<code>如何使用</code>和<code>源码分析</code>两个方面来介绍<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>。</p>\n<h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><hr>\n<h5 id=\"就是不想用CocoaPods\"><a href=\"#就是不想用CocoaPods\" class=\"headerlink\" title=\"就是不想用CocoaPods\"></a>就是不想用<a href=\"https://cocoapods.org/\">CocoaPods</a></h5><ul>\n<li>去<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>下载zip。将<code>Classes</code>文件夹下的代码复制到你的项目中去。</li>\n</ul>\n<h5 id=\"如果你也用CocoaPods\"><a href=\"#如果你也用CocoaPods\" class=\"headerlink\" title=\"如果你也用CocoaPods\"></a>如果你也用<a href=\"https://cocoapods.org/\">CocoaPods</a></h5><h6 id=\"Podfile\"><a href=\"#Podfile\" class=\"headerlink\" title=\"Podfile\"></a>Podfile</h6><pre><code>platform :ios, &#39;7.0&#39;\npod &#39;KeyboardToolBar&#39;, &#39;~&gt; 1.0.0&#39;</code></pre>\n<h6 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h6><pre><code>/// 不要忘了先导入.h \n#import &quot;KeyboardToolBar.h&quot;</code></pre>\n<h6 id=\"注册使用KeyboardToolBar\"><a href=\"#注册使用KeyboardToolBar\" class=\"headerlink\" title=\"注册使用KeyboardToolBar\"></a>注册使用KeyboardToolBar</h6><pre><code>/// 使用该方法给UITextField注册使用KeyboardToolBar \n/// @param textField 需要注册的UITextField \n[KeyboardToolBar registerKeyboardToolBar:self.textField];</code></pre>\n<h6 id=\"反注册-移除-eyboardToolBar\"><a href=\"#反注册-移除-eyboardToolBar\" class=\"headerlink\" title=\"反注册(移除)eyboardToolBar\"></a>反注册(移除)eyboardToolBar</h6><pre><code>/// 不想让UITextField使用KeyboardToolBar的时候 \n/// 强烈建议使用该方法给UITextField移除KeyboardToolBar \n/// @param textField 需要移除的UITextField\n[KeyboardToolBar unregisterKeyboardToolBar:self.textField];</code></pre>\n<h6 id=\"unregisterAllKeyboardToolBar\"><a href=\"#unregisterAllKeyboardToolBar\" class=\"headerlink\" title=\"unregisterAllKeyboardToolBar\"></a>unregisterAllKeyboardToolBar</h6><pre><code>/// 如果嫌一个一个给UITextField移除KeyboardToolBar麻烦 \n/// 使用这个方法一次性将所有的UITextField移除KeyboardToolBar\n[KeyboardToolBar unregisterAllKeyboardToolBar];</code></pre>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><hr>\n<h5 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h5><p>我的设想是在键盘上方的工具栏处做文章，哪怕是键盘挡住了输入框，但是如果将输入框上的<code>placeholder</code>以及输入的内容时刻在工具栏上显示，那么哪怕键盘挡住了输入框，依旧可以清楚知道我现在要输入哪方面的内容以及我现在输入的内容是什么。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>为了看起来清楚些，以下代码中我使用<code>KTB</code>代表<code>KeyboardToolBar单例对象</code>。</p>\n<h6 id=\"h文件\"><a href=\"#h文件\" class=\"headerlink\" title=\".h文件\"></a>.h文件</h6><pre><code>/// 继承iOS自带的UIToolbar\n@interface KeyboardToolBar : UIToolbar</code></pre>\n<h6 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h6><pre><code>/// KeyboardToolBar宽度 \n#define KeyboardToolBarWidth [UIScreen mainScreen].bounds.size.width \n/// KeyboardToolBar高度 \n#define KeyboardToolBarHeight 44 \n/// KeyboardToolBar上UIScrollView组件的宽度 \n#define KeyboardScrollViewWidth (KeyboardToolBarWidth-80)</code></pre>\n<h6 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h6><pre><code>@property(nonatomic, strong)UIScrollView *scrollView;\n@property(nonatomic, strong)UITextField *toolBarTextField; \n/// 字典用于存放注册使用KeyboardToolBar的所有UITextField\n@property(nonatomic, retain)NSMutableDictionary *allRegisterTextFields;</code></pre>\n<h6 id=\"KeyboardToolBar构造单例方法\"><a href=\"#KeyboardToolBar构造单例方法\" class=\"headerlink\" title=\"KeyboardToolBar构造单例方法\"></a>KeyboardToolBar构造单例方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F; KTBstatic KeyboardToolBar *keyboardToolBar &#x3D; nil;</span><br><span class=\"line\">+ (instancetype)shareKeyboardToolBar &#123;</span><br><span class=\"line\">    if (keyboardToolBar &#x3D;&#x3D; nil) &#123; </span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F; KTB是否初始化，如果没有，则进行初始化 </span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F; KeyboardToolBar上需要有一个UIScrollView组件，UIScrollView内部有一个UITextField，如果UITextField内的内容过多，UIScrollView就派上用场了。</span><br><span class=\"line\">        &#x2F;&#x2F;&#x2F; KeyboardToolBar的右侧还需要有一个&#39;完成&#39;按钮，点击该按钮后关闭键盘</span><br><span class=\"line\">        keyboardToolBar &#x3D; [[KeyboardToolBar alloc]initWithFrame:CGRectMake(0, 0, KeyboardToolBarWidth, KeyboardToolBarHeight)];</span><br><span class=\"line\">        [keyboardToolBar setBarStyle:UIBarStyleDefault];</span><br><span class=\"line\">        keyboardToolBar.scrollView &#x3D; [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];</span><br><span class=\"line\">        keyboardToolBar.scrollView.backgroundColor &#x3D; [UIColor clearColor]; </span><br><span class=\"line\">        keyboardToolBar.scrollView.contentSize &#x3D; CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight); </span><br><span class=\"line\">        keyboardToolBar.scrollView.bounces &#x3D; NO;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField &#x3D; [[UITextField alloc] initWithFrame:CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight)];</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.textAlignment &#x3D; NSTextAlignmentLeft;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.userInteractionEnabled &#x3D; NO；</span><br><span class=\"line\">        [keyboardToolBar.scrollView addSubview:keyboardToolBar.toolBarTextField];</span><br><span class=\"line\">        UIBarButtonItem *textFieldItem &#x3D; [[UIBarButtonItem alloc] initWithCustomView:keyboardToolBar.scrollView];</span><br><span class=\"line\">        UIBarButtonItem *finishBtnItem &#x3D; [[UIBarButtonItem alloc]initWithTitle:@&quot;完成&quot; style:UIBarButtonItemStyleDone target:keyboardToolBar action:@selector(resignKeyboard)];</span><br><span class=\"line\">        NSArray * buttonsArray &#x3D; [NSArray arrayWithObjects:textFieldItem,finishBtnItem,nil]; [keyboardToolBar setItems:buttonsArray];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    return keyboardToolBar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 关闭键盘</span><br><span class=\"line\">- (void)resignKeyboard &#123;</span><br><span class=\"line\">    keyboardToolBar.toolBarTextField.text &#x3D; @&quot;&quot;;</span><br><span class=\"line\">    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"KeyboardToolBar注册方法\"><a href=\"#KeyboardToolBar注册方法\" class=\"headerlink\" title=\"KeyboardToolBar注册方法\"></a>KeyboardToolBar注册方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)registerKeyboardToolBar:(UITextField *)textField &#123;</span><br><span class=\"line\">    if([KeyboardToolBar shareKeyboardToolBar].allRegisterTextFields &#x3D;&#x3D; nil) &#123;</span><br><span class=\"line\">        keyboardToolBar.allRegisterTextFields &#x3D; [NSMutableDictionary dictionaryWithCapacity:10];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 将KTB赋予传入的textField</span><br><span class=\"line\">    [textField setInputAccessoryView:keyboardToolBar];</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 为传入的textField对象addTarget</span><br><span class=\"line\">    [textField addTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];</span><br><span class=\"line\">    [textField addTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 将传入的textField保存于KTB</span><br><span class=\"line\">    [keyboardToolBar.allRegisterTextFields setValue:textField forKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)textFieldDidBegin:(UITextField *)textField &#123;</span><br><span class=\"line\">    [self reSetTextField:textField];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)textFieldDidChange:(UITextField *)textField &#123;</span><br><span class=\"line\">    [self reSetTextField:textField];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 将textField的placeholder以及textField上的文字及时显示在KTB内部的UITextField上</span><br><span class=\"line\">- (void)reSetTextField:(UITextField *)textField &#123;</span><br><span class=\"line\">    UITextField *tempTextField &#x3D; [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">    CGFloat textWidth &#x3D; [KeyboardToolBar widthForString:tempTextField.text withFont:keyboardToolBar.toolBarTextField.font];</span><br><span class=\"line\">    if(textWidth &gt; KeyboardScrollViewWidth) &#123;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.frame &#x3D; CGRectMake(0,0,textWidth,KeyboardToolBarHeight);</span><br><span class=\"line\">        keyboardToolBar.scrollView.contentSize &#x3D; CGSizeMake(textWidth, KeyboardToolBarHeight);</span><br><span class=\"line\">        [self.scrollView scrollRectToVisible:CGRectMake(textWidth-KeyboardScrollViewWidth,0,KeyboardScrollViewWidth,KeyboardToolBarHeight) animated:YES];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.frame &#x3D; CGRectMake(0, 0, KeyboardScrollViewWidth, KeyboardToolBarHeight);</span><br><span class=\"line\">        keyboardToolBar.scrollView.contentSize &#x3D; CGSizeMake(KeyboardScrollViewWidth, KeyboardToolBarHeight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keyboardToolBar.toolBarTextField.text &#x3D; tempTextField.text;</span><br><span class=\"line\">    keyboardToolBar.toolBarTextField.textColor &#x3D; tempTextField.textColor;</span><br><span class=\"line\">    if(tempTextField.placeholder !&#x3D; nil) &#123;</span><br><span class=\"line\">        NSAttributedString *attribute &#x3D; textField.attributedPlaceholder;</span><br><span class=\"line\">        NSDictionary *dictionary &#x3D; [attribute attributesAtIndex:0 effectiveRange:nil];</span><br><span class=\"line\">        keyboardToolBar.toolBarTextField.attributedPlaceholder &#x3D; [[NSAttributedString alloc] initWithString:tempTextField.placeholder attributes:@&#123;NSForegroundColorAttributeName: [dictionary valueForKey:NSForegroundColorAttributeName]&#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 根据文本内容和字体计算NSString长度用于设置KTB内部的UIScrollView以及UITextField的宽度</span><br><span class=\"line\">+ (CGFloat)widthForString:(NSString *)str withFont:(UIFont *)font &#123;</span><br><span class=\"line\">    NSDictionary *attribute &#x3D; @&#123;NSFontAttributeName: font&#125;;</span><br><span class=\"line\">    CGSize size &#x3D; [str boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX) options: NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;</span><br><span class=\"line\">    return size.width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"KeyboardToolBar反注册-移除-方法\"><a href=\"#KeyboardToolBar反注册-移除-方法\" class=\"headerlink\" title=\"KeyboardToolBar反注册(移除)方法\"></a>KeyboardToolBar反注册(移除)方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F; 直接将KTB中所有已注册的UITextField移除</span><br><span class=\"line\">+ (void)unregisterKeyboardToolBar:(UITextField *)textField &#123;</span><br><span class=\"line\">    if(keyboardToolBar &#x3D;&#x3D; nil || keyboardToolBar.allRegisterTextFields.count &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    UITextField *tempTextField &#x3D; [keyboardToolBar.allRegisterTextFields objectForKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">    [tempTextField setInputAccessoryView:nil];</span><br><span class=\"line\">    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];</span><br><span class=\"line\">    [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];</span><br><span class=\"line\">    [keyboardToolBar.allRegisterTextFields removeObjectForKey:[NSString stringWithFormat:@&quot;%p&quot;,textField]];</span><br><span class=\"line\">    if(keyboardToolBar.allRegisterTextFields.count &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        keyboardToolBar.allRegisterTextFields &#x3D; nil;</span><br><span class=\"line\">        keyboardToolBar &#x3D; nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; 根据传入的UITextField兑现。从KTB内移除</span><br><span class=\"line\">+ (void)unregisterAllKeyboardToolBar &#123;</span><br><span class=\"line\">    if(keyboardToolBar &#x3D;&#x3D; nil || keyboardToolBar.allRegisterTextFields.count &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NSEnumerator *enumeratorValue &#x3D; [keyboardToolBar.allRegisterTextFields objectEnumerator];</span><br><span class=\"line\">    for(UITextField *tempTextField in enumeratorValue) &#123;</span><br><span class=\"line\">        [tempTextField setInputAccessoryView:nil];</span><br><span class=\"line\">        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidBegin:) forControlEvents:UIControlEventEditingDidBegin];</span><br><span class=\"line\">        [tempTextField removeTarget:keyboardToolBar action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    [keyboardToolBar.allRegisterTextFields removeAllObjects];</span><br><span class=\"line\">    keyboardToolBar.allRegisterTextFields &#x3D; nil;</span><br><span class=\"line\">    keyboardToolBar &#x3D; nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，以上就是我的介绍，欢迎大家来我的<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>主页进行Star、Issues或Pull requests，我是Jiar，我热爱交朋友~</p>\n<h3 id=\"微信订阅号\"><a href=\"#微信订阅号\" class=\"headerlink\" title=\"微信订阅号\"></a>微信订阅号</h3><p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"从此不再担心键盘遮住输入框OC2","date":"2015-12-06T16:13:00.000Z","_content":"\n文章可能有更新，如需了解，请查看原文：[从此不再担心键盘遮住输入框OC(二)](http://www.jianshu.com/p/f33fd3f927f6)\n\n在我发布这篇文章没多久之前，我发布了一篇叫 [从此不再担心键盘遮住输入框OC(一)](http://blog.jiar.me/2015/11/15/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC1/)的文章。我在那篇文章中介绍了我的键盘组件[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)。\n\n新版效果图\n![KeyboardToolBar2 show](https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar2.gif) \n\n<!--more-->\n\n> 当时的[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)还只是支持`UITextField`。后来也有收到别人的建议，希望增加支持`UITextField`之类的。其实本人也早就想着再完善一下。正好这个周末不忙，我就稍微优化了下。发布了V2版本。\n\n> 现在的[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)支持`UITextField`、`UITextView`和`UISearchBar`。并且支持运行时(`runtime`)，你只要在项目中导入`\"KeyboardToolBar.h\"`即可开始使用，无需额外代码。\n\n### KeyboardToolBar 是什么\n\nKeyboardToolBar的主旨：从此不再担心键盘遮住输入框。目前是V2版本，如果想了解V1版本，请移步[V1版本](http://www.jianshu.com/p/48993ff982c1)。\n\n### 如何开始使用\n- **下载[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)并尝试在你的iPhone上运行DEMO。**\n\n### 使用CocoaPods安装\n\n#### Podfile \n\n      platform :ios, '7.0' \n      pod \"KeyboardToolBar\"\n\n### Usage\n\n现在，[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)支持`UITextField`、`UITextView`和`UISearchBar`。并且支持运行时(`runtime`)，你只要在项目中导入`\"KeyboardToolBar.h\"`即\b默认为所有的`UITextField`、`UITextView`和`UISearchBar`自动注册使用了`KeyboardToolBar`，你无需使用额外的代码来开启。如果你不想用`KeyboardToolBar`，你可以使用相应的`unregisterKeyboardToolBar`方法来反注册即可移除`KeyboardToolBar`。如果你已经为某个控件移除了`KeyboardToolBar`，又想要继续使用，你可以使用相应的`registerKeyboardToolBar`方法为控件重新注册使用`KeyboardToolBar`。\n\n#### import \n      /// 导入就是使用 \n      /// 导入后，将自动为UITextField、UITextView和UISearchBar注册使用KeyboardToolBar \n      #import \"KeyboardToolBar.h\"\n\n#### 注册使用KeyboardToolBar \n      /// 以下均为可选方法，你可以不使用。 \n      /// 为UITextField注册使用KeyboardToolBar. \n      [KeyboardToolBar registerKeyboardToolBarWithTextField:self.textField]; \n      /// 为UITextView注册使用KeyboardToolBar. \n      [KeyboardToolBar registerKeyboardToolBarWithTextView:self.textView]; \n      /// 为UISearchBar注册使用KeyboardToolBar.\n      [KeyboardToolBar registerKeyboardToolBarWithSearchBar:self.searchBar];\n#### 反注册取消KeyboardToolBar \n      /// 以下均为可选方法，你可以不使用。 \n      /// 你可以为目标UITextField反注册取消使用KeyboardToolBar.\n      [KeyboardToolBar unregisterKeyboardToolBarWithTextField:self.textField]; \n      /// 你可以为目标UITextView反注册取消使用KeyboardToolBar \n      [KeyboardToolBar unregisterKeyboardToolBarWithTextView:self.textView]; \n      /// 你可以为目标UISearchBar反注册取消使用KeyboardToolBar.\n      [KeyboardToolBar unregisterKeyboardToolBarWithSearchBar:self.searchBar]; \n\n### License\nKeyboardToolBar is released under the MIT license.\n\n\n### 微信订阅号\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/从此不再担心键盘遮住输入框OC2.md","raw":"---\ntitle: 从此不再担心键盘遮住输入框OC2\ndate: 2015-12-07 00:13:00\ncategories: iOS\ntags:\n- iOS\n- 键盘\n- 输入框\n- 遮盖\n---\n\n文章可能有更新，如需了解，请查看原文：[从此不再担心键盘遮住输入框OC(二)](http://www.jianshu.com/p/f33fd3f927f6)\n\n在我发布这篇文章没多久之前，我发布了一篇叫 [从此不再担心键盘遮住输入框OC(一)](http://blog.jiar.me/2015/11/15/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC1/)的文章。我在那篇文章中介绍了我的键盘组件[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)。\n\n新版效果图\n![KeyboardToolBar2 show](https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar2.gif) \n\n<!--more-->\n\n> 当时的[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)还只是支持`UITextField`。后来也有收到别人的建议，希望增加支持`UITextField`之类的。其实本人也早就想着再完善一下。正好这个周末不忙，我就稍微优化了下。发布了V2版本。\n\n> 现在的[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)支持`UITextField`、`UITextView`和`UISearchBar`。并且支持运行时(`runtime`)，你只要在项目中导入`\"KeyboardToolBar.h\"`即可开始使用，无需额外代码。\n\n### KeyboardToolBar 是什么\n\nKeyboardToolBar的主旨：从此不再担心键盘遮住输入框。目前是V2版本，如果想了解V1版本，请移步[V1版本](http://www.jianshu.com/p/48993ff982c1)。\n\n### 如何开始使用\n- **下载[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)并尝试在你的iPhone上运行DEMO。**\n\n### 使用CocoaPods安装\n\n#### Podfile \n\n      platform :ios, '7.0' \n      pod \"KeyboardToolBar\"\n\n### Usage\n\n现在，[KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/)支持`UITextField`、`UITextView`和`UISearchBar`。并且支持运行时(`runtime`)，你只要在项目中导入`\"KeyboardToolBar.h\"`即\b默认为所有的`UITextField`、`UITextView`和`UISearchBar`自动注册使用了`KeyboardToolBar`，你无需使用额外的代码来开启。如果你不想用`KeyboardToolBar`，你可以使用相应的`unregisterKeyboardToolBar`方法来反注册即可移除`KeyboardToolBar`。如果你已经为某个控件移除了`KeyboardToolBar`，又想要继续使用，你可以使用相应的`registerKeyboardToolBar`方法为控件重新注册使用`KeyboardToolBar`。\n\n#### import \n      /// 导入就是使用 \n      /// 导入后，将自动为UITextField、UITextView和UISearchBar注册使用KeyboardToolBar \n      #import \"KeyboardToolBar.h\"\n\n#### 注册使用KeyboardToolBar \n      /// 以下均为可选方法，你可以不使用。 \n      /// 为UITextField注册使用KeyboardToolBar. \n      [KeyboardToolBar registerKeyboardToolBarWithTextField:self.textField]; \n      /// 为UITextView注册使用KeyboardToolBar. \n      [KeyboardToolBar registerKeyboardToolBarWithTextView:self.textView]; \n      /// 为UISearchBar注册使用KeyboardToolBar.\n      [KeyboardToolBar registerKeyboardToolBarWithSearchBar:self.searchBar];\n#### 反注册取消KeyboardToolBar \n      /// 以下均为可选方法，你可以不使用。 \n      /// 你可以为目标UITextField反注册取消使用KeyboardToolBar.\n      [KeyboardToolBar unregisterKeyboardToolBarWithTextField:self.textField]; \n      /// 你可以为目标UITextView反注册取消使用KeyboardToolBar \n      [KeyboardToolBar unregisterKeyboardToolBarWithTextView:self.textView]; \n      /// 你可以为目标UISearchBar反注册取消使用KeyboardToolBar.\n      [KeyboardToolBar unregisterKeyboardToolBarWithSearchBar:self.searchBar]; \n\n### License\nKeyboardToolBar is released under the MIT license.\n\n\n### 微信订阅号\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"从此不再担心键盘遮住输入框OC2","published":1,"updated":"2022-02-14T09:21:16.934Z","_id":"ckhcv3f6r000irlf6b5bm43bj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>文章可能有更新，如需了解，请查看原文：<a href=\"http://www.jianshu.com/p/f33fd3f927f6\">从此不再担心键盘遮住输入框OC(二)</a></p>\n<p>在我发布这篇文章没多久之前，我发布了一篇叫 <a href=\"http://blog.jiar.me/2015/11/15/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC1/\">从此不再担心键盘遮住输入框OC(一)</a>的文章。我在那篇文章中介绍了我的键盘组件<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>。</p>\n<p>新版效果图<br><img src=\"https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar2.gif\" alt=\"KeyboardToolBar2 show\"> </p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>当时的<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>还只是支持<code>UITextField</code>。后来也有收到别人的建议，希望增加支持<code>UITextField</code>之类的。其实本人也早就想着再完善一下。正好这个周末不忙，我就稍微优化了下。发布了V2版本。</p>\n</blockquote>\n<blockquote>\n<p>现在的<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>支持<code>UITextField</code>、<code>UITextView</code>和<code>UISearchBar</code>。并且支持运行时(<code>runtime</code>)，你只要在项目中导入<code>&quot;KeyboardToolBar.h&quot;</code>即可开始使用，无需额外代码。</p>\n</blockquote>\n<h3 id=\"KeyboardToolBar-是什么\"><a href=\"#KeyboardToolBar-是什么\" class=\"headerlink\" title=\"KeyboardToolBar 是什么\"></a>KeyboardToolBar 是什么</h3><p>KeyboardToolBar的主旨：从此不再担心键盘遮住输入框。目前是V2版本，如果想了解V1版本，请移步<a href=\"http://www.jianshu.com/p/48993ff982c1\">V1版本</a>。</p>\n<h3 id=\"如何开始使用\"><a href=\"#如何开始使用\" class=\"headerlink\" title=\"如何开始使用\"></a>如何开始使用</h3><ul>\n<li><strong>下载<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>并尝试在你的iPhone上运行DEMO。</strong></li>\n</ul>\n<h3 id=\"使用CocoaPods安装\"><a href=\"#使用CocoaPods安装\" class=\"headerlink\" title=\"使用CocoaPods安装\"></a>使用CocoaPods安装</h3><h4 id=\"Podfile\"><a href=\"#Podfile\" class=\"headerlink\" title=\"Podfile\"></a>Podfile</h4><pre><code>  platform :ios, &#39;7.0&#39; \n  pod &quot;KeyboardToolBar&quot;</code></pre>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p>现在，<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>支持<code>UITextField</code>、<code>UITextView</code>和<code>UISearchBar</code>。并且支持运行时(<code>runtime</code>)，你只要在项目中导入<code>&quot;KeyboardToolBar.h&quot;</code>即\b默认为所有的<code>UITextField</code>、<code>UITextView</code>和<code>UISearchBar</code>自动注册使用了<code>KeyboardToolBar</code>，你无需使用额外的代码来开启。如果你不想用<code>KeyboardToolBar</code>，你可以使用相应的<code>unregisterKeyboardToolBar</code>方法来反注册即可移除<code>KeyboardToolBar</code>。如果你已经为某个控件移除了<code>KeyboardToolBar</code>，又想要继续使用，你可以使用相应的<code>registerKeyboardToolBar</code>方法为控件重新注册使用<code>KeyboardToolBar</code>。</p>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h4><pre><code>  /// 导入就是使用 \n  /// 导入后，将自动为UITextField、UITextView和UISearchBar注册使用KeyboardToolBar \n  #import &quot;KeyboardToolBar.h&quot;</code></pre>\n<h4 id=\"注册使用KeyboardToolBar\"><a href=\"#注册使用KeyboardToolBar\" class=\"headerlink\" title=\"注册使用KeyboardToolBar\"></a>注册使用KeyboardToolBar</h4><pre><code>  /// 以下均为可选方法，你可以不使用。 \n  /// 为UITextField注册使用KeyboardToolBar. \n  [KeyboardToolBar registerKeyboardToolBarWithTextField:self.textField]; \n  /// 为UITextView注册使用KeyboardToolBar. \n  [KeyboardToolBar registerKeyboardToolBarWithTextView:self.textView]; \n  /// 为UISearchBar注册使用KeyboardToolBar.\n  [KeyboardToolBar registerKeyboardToolBarWithSearchBar:self.searchBar];</code></pre>\n<h4 id=\"反注册取消KeyboardToolBar\"><a href=\"#反注册取消KeyboardToolBar\" class=\"headerlink\" title=\"反注册取消KeyboardToolBar\"></a>反注册取消KeyboardToolBar</h4><pre><code>  /// 以下均为可选方法，你可以不使用。 \n  /// 你可以为目标UITextField反注册取消使用KeyboardToolBar.\n  [KeyboardToolBar unregisterKeyboardToolBarWithTextField:self.textField]; \n  /// 你可以为目标UITextView反注册取消使用KeyboardToolBar \n  [KeyboardToolBar unregisterKeyboardToolBarWithTextView:self.textView]; \n  /// 你可以为目标UISearchBar反注册取消使用KeyboardToolBar.\n  [KeyboardToolBar unregisterKeyboardToolBarWithSearchBar:self.searchBar]; </code></pre>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3><p>KeyboardToolBar is released under the MIT license.</p>\n<h3 id=\"微信订阅号\"><a href=\"#微信订阅号\" class=\"headerlink\" title=\"微信订阅号\"></a>微信订阅号</h3><p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p>文章可能有更新，如需了解，请查看原文：<a href=\"http://www.jianshu.com/p/f33fd3f927f6\">从此不再担心键盘遮住输入框OC(二)</a></p>\n<p>在我发布这篇文章没多久之前，我发布了一篇叫 <a href=\"http://blog.jiar.me/2015/11/15/%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E6%8B%85%E5%BF%83%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86OC1/\">从此不再担心键盘遮住输入框OC(一)</a>的文章。我在那篇文章中介绍了我的键盘组件<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>。</p>\n<p>新版效果图<br><img src=\"https://github.com/Jiar/KeyboardToolBar/raw/master/images/KeyboardToolBar2.gif\" alt=\"KeyboardToolBar2 show\"> </p>","more":"<blockquote>\n<p>当时的<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>还只是支持<code>UITextField</code>。后来也有收到别人的建议，希望增加支持<code>UITextField</code>之类的。其实本人也早就想着再完善一下。正好这个周末不忙，我就稍微优化了下。发布了V2版本。</p>\n</blockquote>\n<blockquote>\n<p>现在的<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>支持<code>UITextField</code>、<code>UITextView</code>和<code>UISearchBar</code>。并且支持运行时(<code>runtime</code>)，你只要在项目中导入<code>&quot;KeyboardToolBar.h&quot;</code>即可开始使用，无需额外代码。</p>\n</blockquote>\n<h3 id=\"KeyboardToolBar-是什么\"><a href=\"#KeyboardToolBar-是什么\" class=\"headerlink\" title=\"KeyboardToolBar 是什么\"></a>KeyboardToolBar 是什么</h3><p>KeyboardToolBar的主旨：从此不再担心键盘遮住输入框。目前是V2版本，如果想了解V1版本，请移步<a href=\"http://www.jianshu.com/p/48993ff982c1\">V1版本</a>。</p>\n<h3 id=\"如何开始使用\"><a href=\"#如何开始使用\" class=\"headerlink\" title=\"如何开始使用\"></a>如何开始使用</h3><ul>\n<li><strong>下载<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>并尝试在你的iPhone上运行DEMO。</strong></li>\n</ul>\n<h3 id=\"使用CocoaPods安装\"><a href=\"#使用CocoaPods安装\" class=\"headerlink\" title=\"使用CocoaPods安装\"></a>使用CocoaPods安装</h3><h4 id=\"Podfile\"><a href=\"#Podfile\" class=\"headerlink\" title=\"Podfile\"></a>Podfile</h4><pre><code>  platform :ios, &#39;7.0&#39; \n  pod &quot;KeyboardToolBar&quot;</code></pre>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p>现在，<a href=\"https://github.com/Jiar/KeyboardToolBar/\">KeyboardToolBar</a>支持<code>UITextField</code>、<code>UITextView</code>和<code>UISearchBar</code>。并且支持运行时(<code>runtime</code>)，你只要在项目中导入<code>&quot;KeyboardToolBar.h&quot;</code>即\b默认为所有的<code>UITextField</code>、<code>UITextView</code>和<code>UISearchBar</code>自动注册使用了<code>KeyboardToolBar</code>，你无需使用额外的代码来开启。如果你不想用<code>KeyboardToolBar</code>，你可以使用相应的<code>unregisterKeyboardToolBar</code>方法来反注册即可移除<code>KeyboardToolBar</code>。如果你已经为某个控件移除了<code>KeyboardToolBar</code>，又想要继续使用，你可以使用相应的<code>registerKeyboardToolBar</code>方法为控件重新注册使用<code>KeyboardToolBar</code>。</p>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h4><pre><code>  /// 导入就是使用 \n  /// 导入后，将自动为UITextField、UITextView和UISearchBar注册使用KeyboardToolBar \n  #import &quot;KeyboardToolBar.h&quot;</code></pre>\n<h4 id=\"注册使用KeyboardToolBar\"><a href=\"#注册使用KeyboardToolBar\" class=\"headerlink\" title=\"注册使用KeyboardToolBar\"></a>注册使用KeyboardToolBar</h4><pre><code>  /// 以下均为可选方法，你可以不使用。 \n  /// 为UITextField注册使用KeyboardToolBar. \n  [KeyboardToolBar registerKeyboardToolBarWithTextField:self.textField]; \n  /// 为UITextView注册使用KeyboardToolBar. \n  [KeyboardToolBar registerKeyboardToolBarWithTextView:self.textView]; \n  /// 为UISearchBar注册使用KeyboardToolBar.\n  [KeyboardToolBar registerKeyboardToolBarWithSearchBar:self.searchBar];</code></pre>\n<h4 id=\"反注册取消KeyboardToolBar\"><a href=\"#反注册取消KeyboardToolBar\" class=\"headerlink\" title=\"反注册取消KeyboardToolBar\"></a>反注册取消KeyboardToolBar</h4><pre><code>  /// 以下均为可选方法，你可以不使用。 \n  /// 你可以为目标UITextField反注册取消使用KeyboardToolBar.\n  [KeyboardToolBar unregisterKeyboardToolBarWithTextField:self.textField]; \n  /// 你可以为目标UITextView反注册取消使用KeyboardToolBar \n  [KeyboardToolBar unregisterKeyboardToolBarWithTextView:self.textView]; \n  /// 你可以为目标UISearchBar反注册取消使用KeyboardToolBar.\n  [KeyboardToolBar unregisterKeyboardToolBarWithSearchBar:self.searchBar]; </code></pre>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3><p>KeyboardToolBar is released under the MIT license.</p>\n<h3 id=\"微信订阅号\"><a href=\"#微信订阅号\" class=\"headerlink\" title=\"微信订阅号\"></a>微信订阅号</h3><p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"适配Xcode9.0-beta与Swift4.0","date":"2017-06-09T07:12:09.000Z","_content":"\n[简书阅读地址在这里](http://www.jianshu.com/p/1f702d59e54b)\n\n这几天苹果在开`WWDC2017`大会，期间放出了`Xcode9.0-beta`以及`Swift4`。为了响应苹果爸爸的号召，我果断下载了`Xcode9.0-beta`，并在项目中拉出了新的分支，准备搞事。\n\n![Xcode9.0-beta](Xcode9.0-beta-icon.png)\n\n<!--more-->\n\n## 如何适配\n\n`Xcode9.0-beta`内置的`Swift`版本不止一个，它同时支持`Swift4.0`和`Swift3.2`。而我们正在用的`Xcode8`，最高只支持`Swift3.1`。基于这个事实，我先拉一个`Xcode9.0-beta-Swift3.2`的分支，待适配好`Swift3.2`后，再起分支`Xcode9.0-beta-Swift4.0`去支持`Swift4.0`。\n\n### 适配`Swift3.2`\n\n首先，对于`Swift3.2`，我的理解是：既然版本命名为`3.2`，那么应该只是基于`3.1`版本上的微调（我去查`Swift`，查到更多的是关于`Swift4.0`方面的信息）。适配`Swift3.2`的过程中，我的项目代码不需要任何改动，唯一出问题的是一个第三方库：[Eureka](https://github.com/xmartlabs/Eureka)，报错的原因是`Collection`协议的`subscript`返回值从`Array`变成了`ArraySlice`，关于这个问题，已有人在[Eureka](https://github.com/xmartlabs/Eureka)的issues中提出([#1082](https://github.com/xmartlabs/Eureka/issues/1082))。随后有人[commit](https://github.com/xmartlabs/Eureka/commit/89b0326fe79aeec1f9fef90a4f57c95bd1931089)修复了这个问题，并开出新分支来适配`Swift3.2`。\n\n![Eureka-commit](Eureka-commit.jpeg)\n\n最后，我在`Podfile`中修改`pod 'Eureka'`为`pod 'Eureka', :git => 'https://github.com/xmartlabs/Eureka.git', :branch => 'swift3.2'`，完成了适配`Swift3.2`。\n\n由此可见，适配`Swift3.2`几乎是没有什么压力的，我也就看到`Collection`协议的`subscript`返回值变动这个情况。\n\n### 适配`Swift4.0`\n\n并不是所有库都能做到及时支持`Swift4.0`，更何况是在现在连`Xcode9`也还是`beta`的状态，所以我们仅能做到将自己的业务代码（主工程代码）部分升级到`Swift4.0`，然后同时保留各种`pod`库在`Swift3.2`版本。没办法，谁叫`Swift4.0`也还无法做到`ABI`兼容呢（但愿能在`Swift5`之前实现吧）。至于我说的同时使用两个版本的`Swift`，这是没问题的，`Xcode9`支持在项目中同时使用`Swift3.2`和`Swift4.0`。\n\n#### 具体要怎么做呢？(修改`Swift`版本)\n\n第一步，如下图指定主工程的`Swift`版本为`4.0`\n![Project-Build-Settings-Swift-Language-Version](Project-Build-Settings-Swift-Language-Version.png)\n第二步，如下所示，在`Podfile`文件的最下方加入如下代码，指定`pod`库的`Swift`版本为`3.2`(这样会使得所有的第三方`pod`库的`Swift`版本都为`3.2`)\n```\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['SWIFT_VERSION'] = '3.2'\n    end \n  end\nend\n```\n#### 做完以上处理，剩下的就是主工程中的代码修改了。\n\n从`Swift3.2`到`Swift4.0`的过程，比从`Swift3.1`到`Swift3.2`的过程要麻烦一点，但是比当年从`Swift2.3`到`Swift3`的过程要好太多了。\n\n下面我列举一下`Swift3.2`到`Swift4.0`的改变(只是我项目中遇到的)：\n\n- `Swift4.0`中对于扩展的属性(包括实例属性、`static`属性、`class`属性)，都只能使用`get`方法，不可使用`set`方法\n- `Swift4.0`中不再允许复写扩展中的方法(包括实例方法、`static`方法、`class`方法)\n- `swift3`使用`#selector`指定的方法，只有当方法权限为`private`时需要加`@objc`修饰符，现在全都要加`@objc`修饰符\n- 字体方面的一些重命名(`NSFontAttributeName`重命名为`NSAttributedStringKey.font`、`NSForegroundColorAttributeName`重命名为`NSAttributedStringKey.foregroundColor`、`NSStrikethroughStyleAttributeName`重命名为`NSAttributedStringKey.strikethroughStyle`、`size(withAttributes:)`方法重命名为`size(withAttributes:)`)\n- ...\n\n#### `OC`与`Swift4.0`混编才是坑\n\n由于历史原因，我负责的项目，还有好大一部分`OC`的代码，新写的`Swift`需要被`OC`调用。所以，问题来了...\n\n#####  `OC`调用`Swift4.0`问题一：编译不通过\n\n我在`Swift4`的代码中写了不少`class`和`extension`，有些也给`OC`调用。在`OC`的代码中，我们通过`#import \"ModuleName-Swift.h\"`导入了`Swift`文件，以给`OC`调用。如果是`Swift3.2`，一切都能正常工作，但是在`Swift4.0`上，编译通不过了。\n\n一：在`OC`中调用一个`Swift4.0`类的方法（包括实例方法、`static`方法、`class`方法），你需要：\n\n- 在该`Swift4.0`类前加上修饰符`@objc`\n- 该`Swift4.0`类必须继承`NSObject`(否则，无法在前面加上修饰符`@objc`。当然，这里指的是普通类，`@objc`也是可以修饰`UI`开头的一系列`UIKit`框架下的`UI`类，只是修饰了这些类，不会产生什么影响)\n- 在需要调用的方法前加上修饰符`@objc`\n  示例如下：\n\n```\n@objc class SampleObject: NSObject {\n\n    @objc func sampleFunc  {\n        print(\"sampleFunc\")\n    }\n    \n    @objc static func sampleStaticFunc  {\n        print(\"sampleStaticFunc\")\n    }\n    \n    @objc class func sampleClassFunc  {\n        print(\"sampleClassFunc\")\n    }\n    \n```\n\n如此一来，便可在`OC`文件中调用，示例如下：\n\n```\n#import \"OCSample.h\"\n#import \"ModuleName-Swift.h\"\n\n@implementation OCSample\n\n- (void)callSwiftFunc {\n    // 调用实例方法\n    SampleObject *object = [[SampleObject alloc] init];\n    [object sampleFunc];\n    // 调用static方法\n    [SampleObject sampleStaticFunc];\n    // 调用class方法\n    [SampleObject sampleClassFunc];\n}\n\n@end\n```\n\n二：在`OC`中调用一个`Swift4.0`扩展的属性（包括实例属性、`static`属性、`class`属性）、方法（包括实例方法、`static`方法、`class`法），你有如下两种选择方式：\n\n- 在该`Swift4.0`扩展前加上修饰符`@objc`(这样的话，该扩展下的所有的属性、方法，都可被`OC`调用)。\n\n示例如下：\n\n```\n@objc extension UIViewController {\n\n    var name: String {\n        reutrn \"name\"\n    }\n    \n    static var staticName: String {\n        reutrn \"staticName\"\n    }\n    \n    class var className: String {\n        reutrn \"className\"\n    }\n    \n    func nameFunc() {\n        print(\"nameFunc\")\n    }\n    \n    static func staticNameFunc() {\n        print(\"staticNameFunc\")\n    }\n    \n    class func classNameFunc() {\n        print(\"classNameFunc\")\n    }\n    \n}\n```\n\n- 在需要的属性、方法前直接加上`@objc`修饰，也可达到目的。\n\n示例如下：\n\n```\nextension UIViewController {\n\n    @objc var name: String {\n        reutrn \"name\"\n    }\n    \n    @objc static var staticName: String {\n        reutrn \"staticName\"\n    }\n    \n    @objc class var className: String {\n        reutrn \"className\"\n    }\n    \n    @objc func nameFunc() {\n        print(\"nameFunc\")\n    }\n    \n    @objc static func staticNameFunc() {\n        print(\"staticNameFunc\")\n    }\n    \n    @objc class func classNameFunc() {\n        print(\"classNameFunc\")\n    }\n    \n}\n```\n\n#####  `OC`调用`Swift4.0`问题二：运行时找不到属性\n\n这个问题藏得比较深，恰巧项目中有着相关的实现，让我看出发现这个潜在因素。\n项目中有这么一种实现：有一个`Swift4.0`的类，是继承`UIViewController`的。然后我在`OC`里面对这个继承而来的`UIViewController`进行操作，我用了`[viewController valueForKey:@\"iconURL\"]`这一`KVC`方法去获取这个自定义`UIViewController`中的`iconURL`这一属性的属性值。这种方式，编译时是无法检查出问题的。但是在运行时，问题就来了，找不到这个属性。因为这个属性没有暴露给`OC`来进行调用。\n\n解决方式：仅需要在自定义的`UIViewController`类中给需要暴露给`OC`调用的属性前加上`@objc`修饰符便可。如此一来，在`OC`代码中就能访问到这个属性。(注意：这里可不像上面提到的`extension`一样，在这个已定义的`UIViewController`类前面加上`@objc`修饰符没有任何意义)。\n\n示例如下：\n```\nclass SampleViewController: UIViewController {\n    @objc var iconURL: String?\n}\n```\n\n除了在`OC`里通过`valueForKey:`方法调用到一些未经过`@objc`修饰的`Swift4.0`的`UI`类的属性会导致`crash`。其他比如你在`Swift4.0`代码中，通过`setValuesForKeys`这种通过`KVC`来操作未经过`@objc`修饰的属性，也会导致`crash`。\n\n##### 关于混编方面的更多信息\n\n更多关于混编方面的内容，可以访问查看Apple官方提供的这篇文章：[Using Swift with Cocoa and Objective-C (Swift 4)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0)，篇幅不少，不单单介绍了`Swift4.0`与`OC`的混用，也介绍了与`C`的`api`的交互、还有更多关于`@objc`修饰符的用法。\n\n## 关于`Xcode9-beta`的更多\n\n### `Xcode9-beta`局域网调试\n\n#### 要求\n\n- 必须是`Xcode9-beta`\n- `iPhone`系统需`iOS11`以上\n\n#### 操作\n\n1. 在`Xcode9-beta`菜单的`Window`选项中选择`Devices and Simulators`\n2. 通过连接线让你的`Mac`识别到你的`iPhone`\n3. 在`Devices and Simulators`面板的左侧`Connected`菜单中选择连接的设备，然后在顶部的`Devices`和`Simulators`选项中选择`Devices`(这里其实默认就是选择了`Devices`)，最后勾选`Connect via network`选项。\n\n来自[`stackoverflow`回答](https://stackoverflow.com/questions/44382841/how-to-do-wireless-debug-on-xcode-9-and-ios-11?answertab=votes#tab-top)\n\n## 结束语\n\n### 关于本文\n\n- 本文为作者这几天在`Xcode9-beta`以及`Swift4.0`方面的学习记录与分享，作者会视情况对内容进行补充。\n- 如果您在阅读本文中发现内容存在错误，希望您积极指出。如果您有其他建议，也欢迎在评论去区留言。\n- 作者接受指正，但是希望彼此之间保留敬意。\n- 欢迎转载，但请保留博文的原地址或者博文在简书上的地址。\n\n### 关于本人\n\n比起 [微博@Jiar](https://weibo.com/u/2268197591/) ，更喜欢 [推特@JiarYoo](https://twitter.com/JiarYoo/) ，求一波关注。😝\n\n### 微信订阅号\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/适配Xcode9-0-beta与Swift4.0.md","raw":"---\ntitle: 适配Xcode9.0-beta与Swift4.0\ndate: 2017-06-09 15:12:09\ncategories: iOS\ntags:\n- iOS\n- Swift4\n- Xcode9.0-beta\n- OC(Objective-C)与Swift4混编\n- OC(Objective-C)调用Swift4\n---\n\n[简书阅读地址在这里](http://www.jianshu.com/p/1f702d59e54b)\n\n这几天苹果在开`WWDC2017`大会，期间放出了`Xcode9.0-beta`以及`Swift4`。为了响应苹果爸爸的号召，我果断下载了`Xcode9.0-beta`，并在项目中拉出了新的分支，准备搞事。\n\n![Xcode9.0-beta](Xcode9.0-beta-icon.png)\n\n<!--more-->\n\n## 如何适配\n\n`Xcode9.0-beta`内置的`Swift`版本不止一个，它同时支持`Swift4.0`和`Swift3.2`。而我们正在用的`Xcode8`，最高只支持`Swift3.1`。基于这个事实，我先拉一个`Xcode9.0-beta-Swift3.2`的分支，待适配好`Swift3.2`后，再起分支`Xcode9.0-beta-Swift4.0`去支持`Swift4.0`。\n\n### 适配`Swift3.2`\n\n首先，对于`Swift3.2`，我的理解是：既然版本命名为`3.2`，那么应该只是基于`3.1`版本上的微调（我去查`Swift`，查到更多的是关于`Swift4.0`方面的信息）。适配`Swift3.2`的过程中，我的项目代码不需要任何改动，唯一出问题的是一个第三方库：[Eureka](https://github.com/xmartlabs/Eureka)，报错的原因是`Collection`协议的`subscript`返回值从`Array`变成了`ArraySlice`，关于这个问题，已有人在[Eureka](https://github.com/xmartlabs/Eureka)的issues中提出([#1082](https://github.com/xmartlabs/Eureka/issues/1082))。随后有人[commit](https://github.com/xmartlabs/Eureka/commit/89b0326fe79aeec1f9fef90a4f57c95bd1931089)修复了这个问题，并开出新分支来适配`Swift3.2`。\n\n![Eureka-commit](Eureka-commit.jpeg)\n\n最后，我在`Podfile`中修改`pod 'Eureka'`为`pod 'Eureka', :git => 'https://github.com/xmartlabs/Eureka.git', :branch => 'swift3.2'`，完成了适配`Swift3.2`。\n\n由此可见，适配`Swift3.2`几乎是没有什么压力的，我也就看到`Collection`协议的`subscript`返回值变动这个情况。\n\n### 适配`Swift4.0`\n\n并不是所有库都能做到及时支持`Swift4.0`，更何况是在现在连`Xcode9`也还是`beta`的状态，所以我们仅能做到将自己的业务代码（主工程代码）部分升级到`Swift4.0`，然后同时保留各种`pod`库在`Swift3.2`版本。没办法，谁叫`Swift4.0`也还无法做到`ABI`兼容呢（但愿能在`Swift5`之前实现吧）。至于我说的同时使用两个版本的`Swift`，这是没问题的，`Xcode9`支持在项目中同时使用`Swift3.2`和`Swift4.0`。\n\n#### 具体要怎么做呢？(修改`Swift`版本)\n\n第一步，如下图指定主工程的`Swift`版本为`4.0`\n![Project-Build-Settings-Swift-Language-Version](Project-Build-Settings-Swift-Language-Version.png)\n第二步，如下所示，在`Podfile`文件的最下方加入如下代码，指定`pod`库的`Swift`版本为`3.2`(这样会使得所有的第三方`pod`库的`Swift`版本都为`3.2`)\n```\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['SWIFT_VERSION'] = '3.2'\n    end \n  end\nend\n```\n#### 做完以上处理，剩下的就是主工程中的代码修改了。\n\n从`Swift3.2`到`Swift4.0`的过程，比从`Swift3.1`到`Swift3.2`的过程要麻烦一点，但是比当年从`Swift2.3`到`Swift3`的过程要好太多了。\n\n下面我列举一下`Swift3.2`到`Swift4.0`的改变(只是我项目中遇到的)：\n\n- `Swift4.0`中对于扩展的属性(包括实例属性、`static`属性、`class`属性)，都只能使用`get`方法，不可使用`set`方法\n- `Swift4.0`中不再允许复写扩展中的方法(包括实例方法、`static`方法、`class`方法)\n- `swift3`使用`#selector`指定的方法，只有当方法权限为`private`时需要加`@objc`修饰符，现在全都要加`@objc`修饰符\n- 字体方面的一些重命名(`NSFontAttributeName`重命名为`NSAttributedStringKey.font`、`NSForegroundColorAttributeName`重命名为`NSAttributedStringKey.foregroundColor`、`NSStrikethroughStyleAttributeName`重命名为`NSAttributedStringKey.strikethroughStyle`、`size(withAttributes:)`方法重命名为`size(withAttributes:)`)\n- ...\n\n#### `OC`与`Swift4.0`混编才是坑\n\n由于历史原因，我负责的项目，还有好大一部分`OC`的代码，新写的`Swift`需要被`OC`调用。所以，问题来了...\n\n#####  `OC`调用`Swift4.0`问题一：编译不通过\n\n我在`Swift4`的代码中写了不少`class`和`extension`，有些也给`OC`调用。在`OC`的代码中，我们通过`#import \"ModuleName-Swift.h\"`导入了`Swift`文件，以给`OC`调用。如果是`Swift3.2`，一切都能正常工作，但是在`Swift4.0`上，编译通不过了。\n\n一：在`OC`中调用一个`Swift4.0`类的方法（包括实例方法、`static`方法、`class`方法），你需要：\n\n- 在该`Swift4.0`类前加上修饰符`@objc`\n- 该`Swift4.0`类必须继承`NSObject`(否则，无法在前面加上修饰符`@objc`。当然，这里指的是普通类，`@objc`也是可以修饰`UI`开头的一系列`UIKit`框架下的`UI`类，只是修饰了这些类，不会产生什么影响)\n- 在需要调用的方法前加上修饰符`@objc`\n  示例如下：\n\n```\n@objc class SampleObject: NSObject {\n\n    @objc func sampleFunc  {\n        print(\"sampleFunc\")\n    }\n    \n    @objc static func sampleStaticFunc  {\n        print(\"sampleStaticFunc\")\n    }\n    \n    @objc class func sampleClassFunc  {\n        print(\"sampleClassFunc\")\n    }\n    \n```\n\n如此一来，便可在`OC`文件中调用，示例如下：\n\n```\n#import \"OCSample.h\"\n#import \"ModuleName-Swift.h\"\n\n@implementation OCSample\n\n- (void)callSwiftFunc {\n    // 调用实例方法\n    SampleObject *object = [[SampleObject alloc] init];\n    [object sampleFunc];\n    // 调用static方法\n    [SampleObject sampleStaticFunc];\n    // 调用class方法\n    [SampleObject sampleClassFunc];\n}\n\n@end\n```\n\n二：在`OC`中调用一个`Swift4.0`扩展的属性（包括实例属性、`static`属性、`class`属性）、方法（包括实例方法、`static`方法、`class`法），你有如下两种选择方式：\n\n- 在该`Swift4.0`扩展前加上修饰符`@objc`(这样的话，该扩展下的所有的属性、方法，都可被`OC`调用)。\n\n示例如下：\n\n```\n@objc extension UIViewController {\n\n    var name: String {\n        reutrn \"name\"\n    }\n    \n    static var staticName: String {\n        reutrn \"staticName\"\n    }\n    \n    class var className: String {\n        reutrn \"className\"\n    }\n    \n    func nameFunc() {\n        print(\"nameFunc\")\n    }\n    \n    static func staticNameFunc() {\n        print(\"staticNameFunc\")\n    }\n    \n    class func classNameFunc() {\n        print(\"classNameFunc\")\n    }\n    \n}\n```\n\n- 在需要的属性、方法前直接加上`@objc`修饰，也可达到目的。\n\n示例如下：\n\n```\nextension UIViewController {\n\n    @objc var name: String {\n        reutrn \"name\"\n    }\n    \n    @objc static var staticName: String {\n        reutrn \"staticName\"\n    }\n    \n    @objc class var className: String {\n        reutrn \"className\"\n    }\n    \n    @objc func nameFunc() {\n        print(\"nameFunc\")\n    }\n    \n    @objc static func staticNameFunc() {\n        print(\"staticNameFunc\")\n    }\n    \n    @objc class func classNameFunc() {\n        print(\"classNameFunc\")\n    }\n    \n}\n```\n\n#####  `OC`调用`Swift4.0`问题二：运行时找不到属性\n\n这个问题藏得比较深，恰巧项目中有着相关的实现，让我看出发现这个潜在因素。\n项目中有这么一种实现：有一个`Swift4.0`的类，是继承`UIViewController`的。然后我在`OC`里面对这个继承而来的`UIViewController`进行操作，我用了`[viewController valueForKey:@\"iconURL\"]`这一`KVC`方法去获取这个自定义`UIViewController`中的`iconURL`这一属性的属性值。这种方式，编译时是无法检查出问题的。但是在运行时，问题就来了，找不到这个属性。因为这个属性没有暴露给`OC`来进行调用。\n\n解决方式：仅需要在自定义的`UIViewController`类中给需要暴露给`OC`调用的属性前加上`@objc`修饰符便可。如此一来，在`OC`代码中就能访问到这个属性。(注意：这里可不像上面提到的`extension`一样，在这个已定义的`UIViewController`类前面加上`@objc`修饰符没有任何意义)。\n\n示例如下：\n```\nclass SampleViewController: UIViewController {\n    @objc var iconURL: String?\n}\n```\n\n除了在`OC`里通过`valueForKey:`方法调用到一些未经过`@objc`修饰的`Swift4.0`的`UI`类的属性会导致`crash`。其他比如你在`Swift4.0`代码中，通过`setValuesForKeys`这种通过`KVC`来操作未经过`@objc`修饰的属性，也会导致`crash`。\n\n##### 关于混编方面的更多信息\n\n更多关于混编方面的内容，可以访问查看Apple官方提供的这篇文章：[Using Swift with Cocoa and Objective-C (Swift 4)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0)，篇幅不少，不单单介绍了`Swift4.0`与`OC`的混用，也介绍了与`C`的`api`的交互、还有更多关于`@objc`修饰符的用法。\n\n## 关于`Xcode9-beta`的更多\n\n### `Xcode9-beta`局域网调试\n\n#### 要求\n\n- 必须是`Xcode9-beta`\n- `iPhone`系统需`iOS11`以上\n\n#### 操作\n\n1. 在`Xcode9-beta`菜单的`Window`选项中选择`Devices and Simulators`\n2. 通过连接线让你的`Mac`识别到你的`iPhone`\n3. 在`Devices and Simulators`面板的左侧`Connected`菜单中选择连接的设备，然后在顶部的`Devices`和`Simulators`选项中选择`Devices`(这里其实默认就是选择了`Devices`)，最后勾选`Connect via network`选项。\n\n来自[`stackoverflow`回答](https://stackoverflow.com/questions/44382841/how-to-do-wireless-debug-on-xcode-9-and-ios-11?answertab=votes#tab-top)\n\n## 结束语\n\n### 关于本文\n\n- 本文为作者这几天在`Xcode9-beta`以及`Swift4.0`方面的学习记录与分享，作者会视情况对内容进行补充。\n- 如果您在阅读本文中发现内容存在错误，希望您积极指出。如果您有其他建议，也欢迎在评论去区留言。\n- 作者接受指正，但是希望彼此之间保留敬意。\n- 欢迎转载，但请保留博文的原地址或者博文在简书上的地址。\n\n### 关于本人\n\n比起 [微博@Jiar](https://weibo.com/u/2268197591/) ，更喜欢 [推特@JiarYoo](https://twitter.com/JiarYoo/) ，求一波关注。😝\n\n### 微信订阅号\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"适配Xcode9-0-beta与Swift4.0","published":1,"updated":"2022-02-14T09:18:46.963Z","_id":"ckhcv3f6s000mrlf65a6k2hj2","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.jianshu.com/p/1f702d59e54b\">简书阅读地址在这里</a></p>\n<p>这几天苹果在开<code>WWDC2017</code>大会，期间放出了<code>Xcode9.0-beta</code>以及<code>Swift4</code>。为了响应苹果爸爸的号召，我果断下载了<code>Xcode9.0-beta</code>，并在项目中拉出了新的分支，准备搞事。</p>\n<p><img src=\"/2017/06/09/%E9%80%82%E9%85%8DXcode9-0-beta%E4%B8%8ESwift4.0/Xcode9.0-beta-icon.png\" alt=\"Xcode9.0-beta\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"如何适配\"><a href=\"#如何适配\" class=\"headerlink\" title=\"如何适配\"></a>如何适配</h2><p><code>Xcode9.0-beta</code>内置的<code>Swift</code>版本不止一个，它同时支持<code>Swift4.0</code>和<code>Swift3.2</code>。而我们正在用的<code>Xcode8</code>，最高只支持<code>Swift3.1</code>。基于这个事实，我先拉一个<code>Xcode9.0-beta-Swift3.2</code>的分支，待适配好<code>Swift3.2</code>后，再起分支<code>Xcode9.0-beta-Swift4.0</code>去支持<code>Swift4.0</code>。</p>\n<h3 id=\"适配Swift3-2\"><a href=\"#适配Swift3-2\" class=\"headerlink\" title=\"适配Swift3.2\"></a>适配<code>Swift3.2</code></h3><p>首先，对于<code>Swift3.2</code>，我的理解是：既然版本命名为<code>3.2</code>，那么应该只是基于<code>3.1</code>版本上的微调（我去查<code>Swift</code>，查到更多的是关于<code>Swift4.0</code>方面的信息）。适配<code>Swift3.2</code>的过程中，我的项目代码不需要任何改动，唯一出问题的是一个第三方库：<a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a>，报错的原因是<code>Collection</code>协议的<code>subscript</code>返回值从<code>Array</code>变成了<code>ArraySlice</code>，关于这个问题，已有人在<a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a>的issues中提出(<a href=\"https://github.com/xmartlabs/Eureka/issues/1082\">#1082</a>)。随后有人<a href=\"https://github.com/xmartlabs/Eureka/commit/89b0326fe79aeec1f9fef90a4f57c95bd1931089\">commit</a>修复了这个问题，并开出新分支来适配<code>Swift3.2</code>。</p>\n<p><img src=\"/2017/06/09/%E9%80%82%E9%85%8DXcode9-0-beta%E4%B8%8ESwift4.0/Eureka-commit.jpeg\" alt=\"Eureka-commit\"></p>\n<p>最后，我在<code>Podfile</code>中修改<code>pod &#39;Eureka&#39;</code>为<code>pod &#39;Eureka&#39;, :git =&gt; &#39;https://github.com/xmartlabs/Eureka.git&#39;, :branch =&gt; &#39;swift3.2&#39;</code>，完成了适配<code>Swift3.2</code>。</p>\n<p>由此可见，适配<code>Swift3.2</code>几乎是没有什么压力的，我也就看到<code>Collection</code>协议的<code>subscript</code>返回值变动这个情况。</p>\n<h3 id=\"适配Swift4-0\"><a href=\"#适配Swift4-0\" class=\"headerlink\" title=\"适配Swift4.0\"></a>适配<code>Swift4.0</code></h3><p>并不是所有库都能做到及时支持<code>Swift4.0</code>，更何况是在现在连<code>Xcode9</code>也还是<code>beta</code>的状态，所以我们仅能做到将自己的业务代码（主工程代码）部分升级到<code>Swift4.0</code>，然后同时保留各种<code>pod</code>库在<code>Swift3.2</code>版本。没办法，谁叫<code>Swift4.0</code>也还无法做到<code>ABI</code>兼容呢（但愿能在<code>Swift5</code>之前实现吧）。至于我说的同时使用两个版本的<code>Swift</code>，这是没问题的，<code>Xcode9</code>支持在项目中同时使用<code>Swift3.2</code>和<code>Swift4.0</code>。</p>\n<h4 id=\"具体要怎么做呢？-修改Swift版本\"><a href=\"#具体要怎么做呢？-修改Swift版本\" class=\"headerlink\" title=\"具体要怎么做呢？(修改Swift版本)\"></a>具体要怎么做呢？(修改<code>Swift</code>版本)</h4><p>第一步，如下图指定主工程的<code>Swift</code>版本为<code>4.0</code><br><img src=\"/2017/06/09/%E9%80%82%E9%85%8DXcode9-0-beta%E4%B8%8ESwift4.0/Project-Build-Settings-Swift-Language-Version.png\" alt=\"Project-Build-Settings-Swift-Language-Version\"><br>第二步，如下所示，在<code>Podfile</code>文件的最下方加入如下代码，指定<code>pod</code>库的<code>Swift</code>版本为<code>3.2</code>(这样会使得所有的第三方<code>pod</code>库的<code>Swift</code>版本都为<code>3.2</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer|</span><br><span class=\"line\">  installer.pods_project.targets.each do |target|</span><br><span class=\"line\">    target.build_configurations.each do |config|</span><br><span class=\"line\">      config.build_settings[&#39;SWIFT_VERSION&#39;] &#x3D; &#39;3.2&#39;</span><br><span class=\"line\">    end </span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h4 id=\"做完以上处理，剩下的就是主工程中的代码修改了。\"><a href=\"#做完以上处理，剩下的就是主工程中的代码修改了。\" class=\"headerlink\" title=\"做完以上处理，剩下的就是主工程中的代码修改了。\"></a>做完以上处理，剩下的就是主工程中的代码修改了。</h4><p>从<code>Swift3.2</code>到<code>Swift4.0</code>的过程，比从<code>Swift3.1</code>到<code>Swift3.2</code>的过程要麻烦一点，但是比当年从<code>Swift2.3</code>到<code>Swift3</code>的过程要好太多了。</p>\n<p>下面我列举一下<code>Swift3.2</code>到<code>Swift4.0</code>的改变(只是我项目中遇到的)：</p>\n<ul>\n<li><code>Swift4.0</code>中对于扩展的属性(包括实例属性、<code>static</code>属性、<code>class</code>属性)，都只能使用<code>get</code>方法，不可使用<code>set</code>方法</li>\n<li><code>Swift4.0</code>中不再允许复写扩展中的方法(包括实例方法、<code>static</code>方法、<code>class</code>方法)</li>\n<li><code>swift3</code>使用<code>#selector</code>指定的方法，只有当方法权限为<code>private</code>时需要加<code>@objc</code>修饰符，现在全都要加<code>@objc</code>修饰符</li>\n<li>字体方面的一些重命名(<code>NSFontAttributeName</code>重命名为<code>NSAttributedStringKey.font</code>、<code>NSForegroundColorAttributeName</code>重命名为<code>NSAttributedStringKey.foregroundColor</code>、<code>NSStrikethroughStyleAttributeName</code>重命名为<code>NSAttributedStringKey.strikethroughStyle</code>、<code>size(withAttributes:)</code>方法重命名为<code>size(withAttributes:)</code>)</li>\n<li>…</li>\n</ul>\n<h4 id=\"OC与Swift4-0混编才是坑\"><a href=\"#OC与Swift4-0混编才是坑\" class=\"headerlink\" title=\"OC与Swift4.0混编才是坑\"></a><code>OC</code>与<code>Swift4.0</code>混编才是坑</h4><p>由于历史原因，我负责的项目，还有好大一部分<code>OC</code>的代码，新写的<code>Swift</code>需要被<code>OC</code>调用。所以，问题来了…</p>\n<h5 id=\"OC调用Swift4-0问题一：编译不通过\"><a href=\"#OC调用Swift4-0问题一：编译不通过\" class=\"headerlink\" title=\"OC调用Swift4.0问题一：编译不通过\"></a><code>OC</code>调用<code>Swift4.0</code>问题一：编译不通过</h5><p>我在<code>Swift4</code>的代码中写了不少<code>class</code>和<code>extension</code>，有些也给<code>OC</code>调用。在<code>OC</code>的代码中，我们通过<code>#import &quot;ModuleName-Swift.h&quot;</code>导入了<code>Swift</code>文件，以给<code>OC</code>调用。如果是<code>Swift3.2</code>，一切都能正常工作，但是在<code>Swift4.0</code>上，编译通不过了。</p>\n<p>一：在<code>OC</code>中调用一个<code>Swift4.0</code>类的方法（包括实例方法、<code>static</code>方法、<code>class</code>方法），你需要：</p>\n<ul>\n<li>在该<code>Swift4.0</code>类前加上修饰符<code>@objc</code></li>\n<li>该<code>Swift4.0</code>类必须继承<code>NSObject</code>(否则，无法在前面加上修饰符<code>@objc</code>。当然，这里指的是普通类，<code>@objc</code>也是可以修饰<code>UI</code>开头的一系列<code>UIKit</code>框架下的<code>UI</code>类，只是修饰了这些类，不会产生什么影响)</li>\n<li>在需要调用的方法前加上修饰符<code>@objc</code><br>示例如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@objc class SampleObject: NSObject &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @objc func sampleFunc  &#123;</span><br><span class=\"line\">        print(&quot;sampleFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc static func sampleStaticFunc  &#123;</span><br><span class=\"line\">        print(&quot;sampleStaticFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc class func sampleClassFunc  &#123;</span><br><span class=\"line\">        print(&quot;sampleClassFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>如此一来，便可在<code>OC</code>文件中调用，示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;OCSample.h&quot;</span><br><span class=\"line\">#import &quot;ModuleName-Swift.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation OCSample</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)callSwiftFunc &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 调用实例方法</span><br><span class=\"line\">    SampleObject *object &#x3D; [[SampleObject alloc] init];</span><br><span class=\"line\">    [object sampleFunc];</span><br><span class=\"line\">    &#x2F;&#x2F; 调用static方法</span><br><span class=\"line\">    [SampleObject sampleStaticFunc];</span><br><span class=\"line\">    &#x2F;&#x2F; 调用class方法</span><br><span class=\"line\">    [SampleObject sampleClassFunc];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>二：在<code>OC</code>中调用一个<code>Swift4.0</code>扩展的属性（包括实例属性、<code>static</code>属性、<code>class</code>属性）、方法（包括实例方法、<code>static</code>方法、<code>class</code>法），你有如下两种选择方式：</p>\n<ul>\n<li>在该<code>Swift4.0</code>扩展前加上修饰符<code>@objc</code>(这样的话，该扩展下的所有的属性、方法，都可被<code>OC</code>调用)。</li>\n</ul>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@objc extension UIViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var name: String &#123;</span><br><span class=\"line\">        reutrn &quot;name&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static var staticName: String &#123;</span><br><span class=\"line\">        reutrn &quot;staticName&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    class var className: String &#123;</span><br><span class=\"line\">        reutrn &quot;className&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func nameFunc() &#123;</span><br><span class=\"line\">        print(&quot;nameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static func staticNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;staticNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    class func classNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;classNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在需要的属性、方法前直接加上<code>@objc</code>修饰，也可达到目的。</li>\n</ul>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension UIViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @objc var name: String &#123;</span><br><span class=\"line\">        reutrn &quot;name&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc static var staticName: String &#123;</span><br><span class=\"line\">        reutrn &quot;staticName&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc class var className: String &#123;</span><br><span class=\"line\">        reutrn &quot;className&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc func nameFunc() &#123;</span><br><span class=\"line\">        print(&quot;nameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc static func staticNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;staticNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc class func classNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;classNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"OC调用Swift4-0问题二：运行时找不到属性\"><a href=\"#OC调用Swift4-0问题二：运行时找不到属性\" class=\"headerlink\" title=\"OC调用Swift4.0问题二：运行时找不到属性\"></a><code>OC</code>调用<code>Swift4.0</code>问题二：运行时找不到属性</h5><p>这个问题藏得比较深，恰巧项目中有着相关的实现，让我看出发现这个潜在因素。<br>项目中有这么一种实现：有一个<code>Swift4.0</code>的类，是继承<code>UIViewController</code>的。然后我在<code>OC</code>里面对这个继承而来的<code>UIViewController</code>进行操作，我用了<code>[viewController valueForKey:@&quot;iconURL&quot;]</code>这一<code>KVC</code>方法去获取这个自定义<code>UIViewController</code>中的<code>iconURL</code>这一属性的属性值。这种方式，编译时是无法检查出问题的。但是在运行时，问题就来了，找不到这个属性。因为这个属性没有暴露给<code>OC</code>来进行调用。</p>\n<p>解决方式：仅需要在自定义的<code>UIViewController</code>类中给需要暴露给<code>OC</code>调用的属性前加上<code>@objc</code>修饰符便可。如此一来，在<code>OC</code>代码中就能访问到这个属性。(注意：这里可不像上面提到的<code>extension</code>一样，在这个已定义的<code>UIViewController</code>类前面加上<code>@objc</code>修饰符没有任何意义)。</p>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SampleViewController: UIViewController &#123;</span><br><span class=\"line\">    @objc var iconURL: String?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了在<code>OC</code>里通过<code>valueForKey:</code>方法调用到一些未经过<code>@objc</code>修饰的<code>Swift4.0</code>的<code>UI</code>类的属性会导致<code>crash</code>。其他比如你在<code>Swift4.0</code>代码中，通过<code>setValuesForKeys</code>这种通过<code>KVC</code>来操作未经过<code>@objc</code>修饰的属性，也会导致<code>crash</code>。</p>\n<h5 id=\"关于混编方面的更多信息\"><a href=\"#关于混编方面的更多信息\" class=\"headerlink\" title=\"关于混编方面的更多信息\"></a>关于混编方面的更多信息</h5><p>更多关于混编方面的内容，可以访问查看Apple官方提供的这篇文章：<a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0\">Using Swift with Cocoa and Objective-C (Swift 4)</a>，篇幅不少，不单单介绍了<code>Swift4.0</code>与<code>OC</code>的混用，也介绍了与<code>C</code>的<code>api</code>的交互、还有更多关于<code>@objc</code>修饰符的用法。</p>\n<h2 id=\"关于Xcode9-beta的更多\"><a href=\"#关于Xcode9-beta的更多\" class=\"headerlink\" title=\"关于Xcode9-beta的更多\"></a>关于<code>Xcode9-beta</code>的更多</h2><h3 id=\"Xcode9-beta局域网调试\"><a href=\"#Xcode9-beta局域网调试\" class=\"headerlink\" title=\"Xcode9-beta局域网调试\"></a><code>Xcode9-beta</code>局域网调试</h3><h4 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h4><ul>\n<li>必须是<code>Xcode9-beta</code></li>\n<li><code>iPhone</code>系统需<code>iOS11</code>以上</li>\n</ul>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ol>\n<li>在<code>Xcode9-beta</code>菜单的<code>Window</code>选项中选择<code>Devices and Simulators</code></li>\n<li>通过连接线让你的<code>Mac</code>识别到你的<code>iPhone</code></li>\n<li>在<code>Devices and Simulators</code>面板的左侧<code>Connected</code>菜单中选择连接的设备，然后在顶部的<code>Devices</code>和<code>Simulators</code>选项中选择<code>Devices</code>(这里其实默认就是选择了<code>Devices</code>)，最后勾选<code>Connect via network</code>选项。</li>\n</ol>\n<p>来自<a href=\"https://stackoverflow.com/questions/44382841/how-to-do-wireless-debug-on-xcode-9-and-ios-11?answertab=votes#tab-top\"><code>stackoverflow</code>回答</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><h3 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h3><ul>\n<li>本文为作者这几天在<code>Xcode9-beta</code>以及<code>Swift4.0</code>方面的学习记录与分享，作者会视情况对内容进行补充。</li>\n<li>如果您在阅读本文中发现内容存在错误，希望您积极指出。如果您有其他建议，也欢迎在评论去区留言。</li>\n<li>作者接受指正，但是希望彼此之间保留敬意。</li>\n<li>欢迎转载，但请保留博文的原地址或者博文在简书上的地址。</li>\n</ul>\n<h3 id=\"关于本人\"><a href=\"#关于本人\" class=\"headerlink\" title=\"关于本人\"></a>关于本人</h3><p>比起 <a href=\"https://weibo.com/u/2268197591/\">微博@Jiar</a> ，更喜欢 <a href=\"https://twitter.com/JiarYoo/\">推特@JiarYoo</a> ，求一波关注。😝</p>\n<h3 id=\"微信订阅号\"><a href=\"#微信订阅号\" class=\"headerlink\" title=\"微信订阅号\"></a>微信订阅号</h3><p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.jianshu.com/p/1f702d59e54b\">简书阅读地址在这里</a></p>\n<p>这几天苹果在开<code>WWDC2017</code>大会，期间放出了<code>Xcode9.0-beta</code>以及<code>Swift4</code>。为了响应苹果爸爸的号召，我果断下载了<code>Xcode9.0-beta</code>，并在项目中拉出了新的分支，准备搞事。</p>\n<p><img src=\"/2017/06/09/%E9%80%82%E9%85%8DXcode9-0-beta%E4%B8%8ESwift4.0/Xcode9.0-beta-icon.png\" alt=\"Xcode9.0-beta\"></p>","more":"<h2 id=\"如何适配\"><a href=\"#如何适配\" class=\"headerlink\" title=\"如何适配\"></a>如何适配</h2><p><code>Xcode9.0-beta</code>内置的<code>Swift</code>版本不止一个，它同时支持<code>Swift4.0</code>和<code>Swift3.2</code>。而我们正在用的<code>Xcode8</code>，最高只支持<code>Swift3.1</code>。基于这个事实，我先拉一个<code>Xcode9.0-beta-Swift3.2</code>的分支，待适配好<code>Swift3.2</code>后，再起分支<code>Xcode9.0-beta-Swift4.0</code>去支持<code>Swift4.0</code>。</p>\n<h3 id=\"适配Swift3-2\"><a href=\"#适配Swift3-2\" class=\"headerlink\" title=\"适配Swift3.2\"></a>适配<code>Swift3.2</code></h3><p>首先，对于<code>Swift3.2</code>，我的理解是：既然版本命名为<code>3.2</code>，那么应该只是基于<code>3.1</code>版本上的微调（我去查<code>Swift</code>，查到更多的是关于<code>Swift4.0</code>方面的信息）。适配<code>Swift3.2</code>的过程中，我的项目代码不需要任何改动，唯一出问题的是一个第三方库：<a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a>，报错的原因是<code>Collection</code>协议的<code>subscript</code>返回值从<code>Array</code>变成了<code>ArraySlice</code>，关于这个问题，已有人在<a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a>的issues中提出(<a href=\"https://github.com/xmartlabs/Eureka/issues/1082\">#1082</a>)。随后有人<a href=\"https://github.com/xmartlabs/Eureka/commit/89b0326fe79aeec1f9fef90a4f57c95bd1931089\">commit</a>修复了这个问题，并开出新分支来适配<code>Swift3.2</code>。</p>\n<p><img src=\"/2017/06/09/%E9%80%82%E9%85%8DXcode9-0-beta%E4%B8%8ESwift4.0/Eureka-commit.jpeg\" alt=\"Eureka-commit\"></p>\n<p>最后，我在<code>Podfile</code>中修改<code>pod &#39;Eureka&#39;</code>为<code>pod &#39;Eureka&#39;, :git =&gt; &#39;https://github.com/xmartlabs/Eureka.git&#39;, :branch =&gt; &#39;swift3.2&#39;</code>，完成了适配<code>Swift3.2</code>。</p>\n<p>由此可见，适配<code>Swift3.2</code>几乎是没有什么压力的，我也就看到<code>Collection</code>协议的<code>subscript</code>返回值变动这个情况。</p>\n<h3 id=\"适配Swift4-0\"><a href=\"#适配Swift4-0\" class=\"headerlink\" title=\"适配Swift4.0\"></a>适配<code>Swift4.0</code></h3><p>并不是所有库都能做到及时支持<code>Swift4.0</code>，更何况是在现在连<code>Xcode9</code>也还是<code>beta</code>的状态，所以我们仅能做到将自己的业务代码（主工程代码）部分升级到<code>Swift4.0</code>，然后同时保留各种<code>pod</code>库在<code>Swift3.2</code>版本。没办法，谁叫<code>Swift4.0</code>也还无法做到<code>ABI</code>兼容呢（但愿能在<code>Swift5</code>之前实现吧）。至于我说的同时使用两个版本的<code>Swift</code>，这是没问题的，<code>Xcode9</code>支持在项目中同时使用<code>Swift3.2</code>和<code>Swift4.0</code>。</p>\n<h4 id=\"具体要怎么做呢？-修改Swift版本\"><a href=\"#具体要怎么做呢？-修改Swift版本\" class=\"headerlink\" title=\"具体要怎么做呢？(修改Swift版本)\"></a>具体要怎么做呢？(修改<code>Swift</code>版本)</h4><p>第一步，如下图指定主工程的<code>Swift</code>版本为<code>4.0</code><br><img src=\"/2017/06/09/%E9%80%82%E9%85%8DXcode9-0-beta%E4%B8%8ESwift4.0/Project-Build-Settings-Swift-Language-Version.png\" alt=\"Project-Build-Settings-Swift-Language-Version\"><br>第二步，如下所示，在<code>Podfile</code>文件的最下方加入如下代码，指定<code>pod</code>库的<code>Swift</code>版本为<code>3.2</code>(这样会使得所有的第三方<code>pod</code>库的<code>Swift</code>版本都为<code>3.2</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer|</span><br><span class=\"line\">  installer.pods_project.targets.each do |target|</span><br><span class=\"line\">    target.build_configurations.each do |config|</span><br><span class=\"line\">      config.build_settings[&#39;SWIFT_VERSION&#39;] &#x3D; &#39;3.2&#39;</span><br><span class=\"line\">    end </span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h4 id=\"做完以上处理，剩下的就是主工程中的代码修改了。\"><a href=\"#做完以上处理，剩下的就是主工程中的代码修改了。\" class=\"headerlink\" title=\"做完以上处理，剩下的就是主工程中的代码修改了。\"></a>做完以上处理，剩下的就是主工程中的代码修改了。</h4><p>从<code>Swift3.2</code>到<code>Swift4.0</code>的过程，比从<code>Swift3.1</code>到<code>Swift3.2</code>的过程要麻烦一点，但是比当年从<code>Swift2.3</code>到<code>Swift3</code>的过程要好太多了。</p>\n<p>下面我列举一下<code>Swift3.2</code>到<code>Swift4.0</code>的改变(只是我项目中遇到的)：</p>\n<ul>\n<li><code>Swift4.0</code>中对于扩展的属性(包括实例属性、<code>static</code>属性、<code>class</code>属性)，都只能使用<code>get</code>方法，不可使用<code>set</code>方法</li>\n<li><code>Swift4.0</code>中不再允许复写扩展中的方法(包括实例方法、<code>static</code>方法、<code>class</code>方法)</li>\n<li><code>swift3</code>使用<code>#selector</code>指定的方法，只有当方法权限为<code>private</code>时需要加<code>@objc</code>修饰符，现在全都要加<code>@objc</code>修饰符</li>\n<li>字体方面的一些重命名(<code>NSFontAttributeName</code>重命名为<code>NSAttributedStringKey.font</code>、<code>NSForegroundColorAttributeName</code>重命名为<code>NSAttributedStringKey.foregroundColor</code>、<code>NSStrikethroughStyleAttributeName</code>重命名为<code>NSAttributedStringKey.strikethroughStyle</code>、<code>size(withAttributes:)</code>方法重命名为<code>size(withAttributes:)</code>)</li>\n<li>…</li>\n</ul>\n<h4 id=\"OC与Swift4-0混编才是坑\"><a href=\"#OC与Swift4-0混编才是坑\" class=\"headerlink\" title=\"OC与Swift4.0混编才是坑\"></a><code>OC</code>与<code>Swift4.0</code>混编才是坑</h4><p>由于历史原因，我负责的项目，还有好大一部分<code>OC</code>的代码，新写的<code>Swift</code>需要被<code>OC</code>调用。所以，问题来了…</p>\n<h5 id=\"OC调用Swift4-0问题一：编译不通过\"><a href=\"#OC调用Swift4-0问题一：编译不通过\" class=\"headerlink\" title=\"OC调用Swift4.0问题一：编译不通过\"></a><code>OC</code>调用<code>Swift4.0</code>问题一：编译不通过</h5><p>我在<code>Swift4</code>的代码中写了不少<code>class</code>和<code>extension</code>，有些也给<code>OC</code>调用。在<code>OC</code>的代码中，我们通过<code>#import &quot;ModuleName-Swift.h&quot;</code>导入了<code>Swift</code>文件，以给<code>OC</code>调用。如果是<code>Swift3.2</code>，一切都能正常工作，但是在<code>Swift4.0</code>上，编译通不过了。</p>\n<p>一：在<code>OC</code>中调用一个<code>Swift4.0</code>类的方法（包括实例方法、<code>static</code>方法、<code>class</code>方法），你需要：</p>\n<ul>\n<li>在该<code>Swift4.0</code>类前加上修饰符<code>@objc</code></li>\n<li>该<code>Swift4.0</code>类必须继承<code>NSObject</code>(否则，无法在前面加上修饰符<code>@objc</code>。当然，这里指的是普通类，<code>@objc</code>也是可以修饰<code>UI</code>开头的一系列<code>UIKit</code>框架下的<code>UI</code>类，只是修饰了这些类，不会产生什么影响)</li>\n<li>在需要调用的方法前加上修饰符<code>@objc</code><br>示例如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@objc class SampleObject: NSObject &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @objc func sampleFunc  &#123;</span><br><span class=\"line\">        print(&quot;sampleFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc static func sampleStaticFunc  &#123;</span><br><span class=\"line\">        print(&quot;sampleStaticFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc class func sampleClassFunc  &#123;</span><br><span class=\"line\">        print(&quot;sampleClassFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>如此一来，便可在<code>OC</code>文件中调用，示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;OCSample.h&quot;</span><br><span class=\"line\">#import &quot;ModuleName-Swift.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation OCSample</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)callSwiftFunc &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 调用实例方法</span><br><span class=\"line\">    SampleObject *object &#x3D; [[SampleObject alloc] init];</span><br><span class=\"line\">    [object sampleFunc];</span><br><span class=\"line\">    &#x2F;&#x2F; 调用static方法</span><br><span class=\"line\">    [SampleObject sampleStaticFunc];</span><br><span class=\"line\">    &#x2F;&#x2F; 调用class方法</span><br><span class=\"line\">    [SampleObject sampleClassFunc];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>二：在<code>OC</code>中调用一个<code>Swift4.0</code>扩展的属性（包括实例属性、<code>static</code>属性、<code>class</code>属性）、方法（包括实例方法、<code>static</code>方法、<code>class</code>法），你有如下两种选择方式：</p>\n<ul>\n<li>在该<code>Swift4.0</code>扩展前加上修饰符<code>@objc</code>(这样的话，该扩展下的所有的属性、方法，都可被<code>OC</code>调用)。</li>\n</ul>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@objc extension UIViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var name: String &#123;</span><br><span class=\"line\">        reutrn &quot;name&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static var staticName: String &#123;</span><br><span class=\"line\">        reutrn &quot;staticName&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    class var className: String &#123;</span><br><span class=\"line\">        reutrn &quot;className&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func nameFunc() &#123;</span><br><span class=\"line\">        print(&quot;nameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static func staticNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;staticNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    class func classNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;classNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在需要的属性、方法前直接加上<code>@objc</code>修饰，也可达到目的。</li>\n</ul>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension UIViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @objc var name: String &#123;</span><br><span class=\"line\">        reutrn &quot;name&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc static var staticName: String &#123;</span><br><span class=\"line\">        reutrn &quot;staticName&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc class var className: String &#123;</span><br><span class=\"line\">        reutrn &quot;className&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc func nameFunc() &#123;</span><br><span class=\"line\">        print(&quot;nameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc static func staticNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;staticNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @objc class func classNameFunc() &#123;</span><br><span class=\"line\">        print(&quot;classNameFunc&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"OC调用Swift4-0问题二：运行时找不到属性\"><a href=\"#OC调用Swift4-0问题二：运行时找不到属性\" class=\"headerlink\" title=\"OC调用Swift4.0问题二：运行时找不到属性\"></a><code>OC</code>调用<code>Swift4.0</code>问题二：运行时找不到属性</h5><p>这个问题藏得比较深，恰巧项目中有着相关的实现，让我看出发现这个潜在因素。<br>项目中有这么一种实现：有一个<code>Swift4.0</code>的类，是继承<code>UIViewController</code>的。然后我在<code>OC</code>里面对这个继承而来的<code>UIViewController</code>进行操作，我用了<code>[viewController valueForKey:@&quot;iconURL&quot;]</code>这一<code>KVC</code>方法去获取这个自定义<code>UIViewController</code>中的<code>iconURL</code>这一属性的属性值。这种方式，编译时是无法检查出问题的。但是在运行时，问题就来了，找不到这个属性。因为这个属性没有暴露给<code>OC</code>来进行调用。</p>\n<p>解决方式：仅需要在自定义的<code>UIViewController</code>类中给需要暴露给<code>OC</code>调用的属性前加上<code>@objc</code>修饰符便可。如此一来，在<code>OC</code>代码中就能访问到这个属性。(注意：这里可不像上面提到的<code>extension</code>一样，在这个已定义的<code>UIViewController</code>类前面加上<code>@objc</code>修饰符没有任何意义)。</p>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SampleViewController: UIViewController &#123;</span><br><span class=\"line\">    @objc var iconURL: String?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了在<code>OC</code>里通过<code>valueForKey:</code>方法调用到一些未经过<code>@objc</code>修饰的<code>Swift4.0</code>的<code>UI</code>类的属性会导致<code>crash</code>。其他比如你在<code>Swift4.0</code>代码中，通过<code>setValuesForKeys</code>这种通过<code>KVC</code>来操作未经过<code>@objc</code>修饰的属性，也会导致<code>crash</code>。</p>\n<h5 id=\"关于混编方面的更多信息\"><a href=\"#关于混编方面的更多信息\" class=\"headerlink\" title=\"关于混编方面的更多信息\"></a>关于混编方面的更多信息</h5><p>更多关于混编方面的内容，可以访问查看Apple官方提供的这篇文章：<a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216-CH2-ID0\">Using Swift with Cocoa and Objective-C (Swift 4)</a>，篇幅不少，不单单介绍了<code>Swift4.0</code>与<code>OC</code>的混用，也介绍了与<code>C</code>的<code>api</code>的交互、还有更多关于<code>@objc</code>修饰符的用法。</p>\n<h2 id=\"关于Xcode9-beta的更多\"><a href=\"#关于Xcode9-beta的更多\" class=\"headerlink\" title=\"关于Xcode9-beta的更多\"></a>关于<code>Xcode9-beta</code>的更多</h2><h3 id=\"Xcode9-beta局域网调试\"><a href=\"#Xcode9-beta局域网调试\" class=\"headerlink\" title=\"Xcode9-beta局域网调试\"></a><code>Xcode9-beta</code>局域网调试</h3><h4 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h4><ul>\n<li>必须是<code>Xcode9-beta</code></li>\n<li><code>iPhone</code>系统需<code>iOS11</code>以上</li>\n</ul>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ol>\n<li>在<code>Xcode9-beta</code>菜单的<code>Window</code>选项中选择<code>Devices and Simulators</code></li>\n<li>通过连接线让你的<code>Mac</code>识别到你的<code>iPhone</code></li>\n<li>在<code>Devices and Simulators</code>面板的左侧<code>Connected</code>菜单中选择连接的设备，然后在顶部的<code>Devices</code>和<code>Simulators</code>选项中选择<code>Devices</code>(这里其实默认就是选择了<code>Devices</code>)，最后勾选<code>Connect via network</code>选项。</li>\n</ol>\n<p>来自<a href=\"https://stackoverflow.com/questions/44382841/how-to-do-wireless-debug-on-xcode-9-and-ios-11?answertab=votes#tab-top\"><code>stackoverflow</code>回答</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><h3 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h3><ul>\n<li>本文为作者这几天在<code>Xcode9-beta</code>以及<code>Swift4.0</code>方面的学习记录与分享，作者会视情况对内容进行补充。</li>\n<li>如果您在阅读本文中发现内容存在错误，希望您积极指出。如果您有其他建议，也欢迎在评论去区留言。</li>\n<li>作者接受指正，但是希望彼此之间保留敬意。</li>\n<li>欢迎转载，但请保留博文的原地址或者博文在简书上的地址。</li>\n</ul>\n<h3 id=\"关于本人\"><a href=\"#关于本人\" class=\"headerlink\" title=\"关于本人\"></a>关于本人</h3><p>比起 <a href=\"https://weibo.com/u/2268197591/\">微博@Jiar</a> ，更喜欢 <a href=\"https://twitter.com/JiarYoo/\">推特@JiarYoo</a> ，求一波关注。😝</p>\n<h3 id=\"微信订阅号\"><a href=\"#微信订阅号\" class=\"headerlink\" title=\"微信订阅号\"></a>微信订阅号</h3><p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"JRAlertController","date":"2016-11-11T03:11:11.000Z","_content":"\n[JRAlertController](https://github.com/Jiar/JRAlertController/)：基于apple的UIAlertController控件api，用swift重新打造的UI控件，更符合主流app的风格。\n\n### JRAlertController总体效果图\n\n![UIAlertController_Main](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_Main.gif)\n\n<!--more-->\n\n### UIAlertController 历史\n\n在日常iOS开发中，我们经常能遇到这种情况（我们需要在某个地方让用户做一个选择），比如说：一个博客，点击右上角的按钮后，你可以执行“修改博客”、“删除博客”两个操作。既然是这么常用的操作，Apple当然给我们提供了常用的控件，那就是UIAlertController。\n\n`UIAlertController`自iOS8出现，在那之前，我们用的是`UIAlertView`和`UIActionSheet`。iOS8之后，`UIAlertView`与`UIActionSheet`合并为`UIAlertController`，并以一个`style`属性来区分原来的`UIAlertView`和`UIActionSheet`的作用，还有就是用闭包回调的方式代替了之前的代理（我觉得闭包回调的方式写起来方便多了）。\n\n### UIAlertController 不足\n\n那么既然`UIAlertController`已经是在iOS8优化后的控件（至少api上优化了），那么为何还来个`JRAlertController`呢？\n\n---\n\n在开发中我们会发现，`UIAlertController`有以下几个不足之处：\n\n1.无论是`alert`还是`sheet`下的界面，边角过于圆滑，尤其当`style`是`sheet`的时候，从底部弹出来那么一个过于圆滑的界面，反正我不觉得好看，不信你看微博、微信这些主流app是怎么做的\n微博的效果：\n![weibo](weibo.jpeg)\n\n2.点击背景部分，无法`dismiss UIAlertController`\n\n3.`alert`样式下，添加过多的`UITextField`和`Action`后，界面显示丑陋。（虽然不会有这种需求，也不该在`UIAlertController`过量添加，毕竟`UIAlertController`适用于\"短暂\"操作，但是过多添加后，界面确实不好看，后面会有效果图）\n\n基于以上几点不足，我认为足以自定义一个控件来代替`UIAlertController`，所以`JRAlertController`诞生了。\n\n### JRAlertController 与 UIAlertController 的不同\n\n我在开头提到过`UIAlertController`的`api`,它的`api`还是不错的，所以我在写`JRAlertController`的时候，几乎完全采用了`UIAlertController`的`api`，一方面`api`不错，另一方面方便大家从`UIAlertController`迁移到`JRAlertController`，基本上你只需要把原来`UIAlertController`部分的`UI`开头的改成`JR`就可以了，我提供的Demo中，大家便能很清晰的看到这一点。\n\n---\n\n##### 还有的几处不同点：\n\n1.\n```\n\t// UIAlertController 的初始化方法\n\tpublic convenience init(title: String?, message: String?, preferredStyle: UIAlertControllerStyle)\n\n\t// JRAlertController 的初始化方法\n\tpublic convenience init(title: String? = nil, message: String? = nil, preferredStyle: JRAlertControllerStyle = .actionSheet)\n```\n你会发现，`JRAlertController`提供了`title`参数和`message`参数的默认值，恩......如果你不需要`title`或`message`中的某一个（或都不需要），这样可以帮你少写一点点代码。\n\n2.\n```\n\t// UIAlertController进入方法\n\t// 这里的alertController为UIAlertController的实例，self为当前UIViewController\n\tself.present(alertController, animated: true, completion: nil)\n\n\t// JRAlertController进入方法\n\t// 这里的alertController为JRAlertController的实例，self为当前UIViewController\n\talertController.jr_show(onRootView: self)\n```\n至于这里为什么要做，这里涉及到`JRAlertController`从底部上移的动画效果。（目前我能想到的方法是在`JRAlertController`的`viewWillAppear`中执行一个上移动画，如果调用系统的`present`进入的话，如果又给animated参数设置true，那么`JRAlertController`的进入效果会比较丑陋。可能有朋友会问，为什么不使用iOS的转场动画，我有尝试去用过，但是也需要第一个执行`present`的`UIViewController`做很多其他的动作，写更多的代码。如果有朋友看了我的代码后，有更好的方式来处理进入效果，欢迎到[本项目的Github地址](https://github.com/Jiar/JRAlertController/)来`Pull requests`）\n\n3.\n`UIAlertController`里面有一个属性`preferredAction`，要求系统版本至少为iOS9。而在`JRAlertController`中，你只需要在iOS8下就可以使用了（如果不是`UIViewController`的`modalPresentationStyle`属性的`.overCurrentContext`值要求iOS8，我们就可以兼容到iOS7了）\n\n\n### JRAlertController 与 UIAlertController 相同点以及说明\n\n因为`JRAlertController`是采用几乎和`UIAlertController`一样的`api`来实现的，所以`JRAlertController`的大体功能效果会和`UIAlertController`一样。同时也是为了方便打算使用`JRAlertController`的朋友们能够在迁移到`JRAlertController`的时候没有后顾之忧。\n\n---\n\n##### 他们的相同点说明：\n\n1.只有`alert`样式下，才可以添加`UITextField`。\n\n2.`action`也有样式，但是`cancel`样式的`action`只能添加一个，添加多了`assert`。\n\n3.`preferredAction`属性也只能在`alert`样式下才能使用。\n\n以上三点别问我为什么这么规定，Apple的`UIAlertController`就是这么定的。\n\n---\n\n##### 其他说明：\n\n1.`JRAlertController`的`preferredAction`属性补充说明：除了只能在`alert`样式下才能使用外，如果存在`UITextField`，那么在`UITextField`列表的最后一个`UITextField`的键盘中点击`return`按钮，将触发`preferredAction`回调，并且`dismiss`当前`JRAlertController`。\n\n2.`JRAlertController`里面会有一个属性是这样的：`open var textFields: [UITextField]?`。所有你添加的`UITextField`都会在这里。注意的是，`JRAlertController`已经对所以添加的`UITextField`进行了代理操作。如果你覆盖了代理，影响也不是很大，但是至少会影响你以下两点：\n\n①.在`UITextField`中点击键盘上`return`按钮时无法从当前`UITextField`进入到下一个`UITextField`。\n②.如果当前`UITextField`已经是最后一个`UITextField`，同时你又设置了`preferredAction`，则无法触发`preferredAction`的回调，以及无法`dismiss`当前`JRAlertController`。\n\n3.如果需要在`JRAlertController`里，主动`dismiss`，建议调用`jr_dismiss()`。\n\n### JRAlertController 与 UIAlertController Gif图效果对比\n\n说了那么多，来几张效果图对比下`JRAlertController`与`UIAlertController`的区别\n\n\n#### JRAlertController 实现效果图\n\n##### JRAlertController在alert样式下简单显示\n![JRAlertController_alert_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_simple.gif)\n\n##### JRAlertController在alert样式下复杂显示\n![JRAlertController_alert_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_multiple.gif)\n\n##### JRAlertController在sheet样式下简单显示\n![JRAlertController_sheet_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_simple.gif)\n\n##### JRAlertController在sheet样式下复杂显示\n![JRAlertController_sheet_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_multiple.gif)\n\n#### UIAlertController 实现效果图\n\n##### UIAlertController在alert样式下简单显示\n![UIAlertController_alert_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_simple.gif)\n\n##### UIAlertController在alert样式下复杂显示\n![UIAlertController_alert_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_multiple.gif)\n\n##### UIAlertController在sheet样式下简单显示\n![UIAlertController_sheet_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_simple.gif)\n\n##### UIAlertController在sheet样式下复杂显示\n![UIAlertController_sheet_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_multiple.gif)\n\n以上就是对`JRAlertController`的一些说明，下面放是官方性信息：\n\n---\n\n\n### Requirements\n\n- iOS 8.0+\n- Xcode 8.0+\n- Swift 3.0+\n\n### Installation\n\n#### CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:\n\n```bash\n$ gem install cocoapods\n```\n\n> CocoaPods 1.1.0+ is required to build JRAlertController 1.0.0\n\nTo integrate JRAlertController into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\n\ntarget '<Your Target Name>' do\n    pod 'JRAlertController', '~> 1.0。0'\nend\n```\n\nThen, run the following command:\n\n```bash\n$ pod install\n```\n\n#### Manually\n\nIf you prefer not to use either of the aforementioned dependency managers, you can integrate JRAlertController into your project manually.\n\n##### Embedded Framework\n\n- Open up Terminal, `cd` into your top-level project directory, and run the following command \"if\" your project is not initialized as a git repository:\n\n  ```bash\n$ git init\n```\n\n- Add JRAlertController as a git [submodule](http://git-scm.com/docs/git-submodule) by running the following command:\n\n  ```bash\n$ git submodule add https://github.com/Jiar/JRAlertController.git\n```\n\n- Open the new `JRAlertController` folder, and drag the `JRAlertController.xcodeproj` into the Project Navigator of your application's Xcode project.\n\n    > It should appear nested underneath your application's blue project icon. Whether it is above or below all the other Xcode groups does not matter.\n\n- Select the `JRAlertController.xcodeproj` in the Project Navigator and verify the deployment target matches that of your application target.\n- Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the \"Targets\" heading in the sidebar.\n- In the tab bar at the top of that window, open the \"General\" panel.\n- Click on the `+` button under the \"Embedded Binaries\" section.\n- You will see two different `JRAlertController.xcodeproj` folders each with two different versions of the `JRAlertController.framework` nested inside a `Products` folder.\n\n    > It does not matter which `Products` folder you choose from, but it does matter whether you choose the top or bottom `JRAlertController.framework`.\n\n- Select the top `JRAlertController.framework` for iOS.\n- And that's it!\n\n  > The `JRAlertController.framework` is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.\n\n---\n\n### Usage\n\n#### JRAlertController_alert_simple\n```swift\n        let alertController = JRAlertController(title: \"login tip\", message: \"please input account and password\", preferredStyle: .alert)\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler:  {\n            (action: JRAlertAction!) -> Void in\n            print(\"cancel\")\n        })\n        let loginAction = JRAlertAction(title: \"login\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"login\")\n        })\n        alertController.addAction(cancelAction)\n        alertController.addAction(loginAction)\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.keyboardType = .default\n            textField.placeholder = \"please input account\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.keyboardType = .default\n            textField.isSecureTextEntry = true\n            textField.placeholder = \"please input password\"\n        })\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n#### JRAlertController_alert_multiple\n```swift\n        let alertController = JRAlertController(title: \"I am title,I am title,I am title,I am title,I am title\", message: \"I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message\", preferredStyle: .alert)\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler:  {\n            (action: JRAlertAction!) -> Void in\n            print(\"cancel\")\n        })\n        let deleteAction = JRAlertAction(title: \"delete\", style: .destructive, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"delete\")\n        })\n        let archiveAction = JRAlertAction(title: \"archive\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive\")\n        })\n        let archiveAction1 = JRAlertAction(title: \"archive1\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive1\")\n        })\n        let archiveAction2 = JRAlertAction(title: \"archive2\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive2\")\n        })\n        let archiveAction3 = JRAlertAction(title: \"archive3\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive3\")\n        })\n        let archiveAction4 = JRAlertAction(title: \"archive4\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive4\")\n        })\n        let archiveAction5 = JRAlertAction(title: \"archive5\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive5\")\n        })\n        let archiveAction6 = JRAlertAction(title: \"archive6\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive6\")\n        })\n        alertController.addAction(cancelAction)\n        alertController.addAction(deleteAction)\n        alertController.addAction(archiveAction)\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .black\n            textField.text = \"black\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .darkGray\n            textField.text = \"darkGray\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .lightGray\n            textField.text = \"lightGray\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.backgroundColor = .black\n            textField.textColor = .white\n            textField.text = \"white\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .gray\n            textField.text = \"gray\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .red\n            textField.text = \"red\"\n        })\n        alertController.addAction(archiveAction1)\n        alertController.addAction(archiveAction2)\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .green\n            textField.text = \"green\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .blue\n            textField.text = \"blue\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .cyan\n            textField.text = \"cyan\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .yellow\n            textField.text = \"yellow\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .magenta\n            textField.text = \"magenta\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .orange\n            textField.text = \"orange\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .purple\n            textField.text = \"purple\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .brown\n            textField.text = \"brown\"\n        })\n        alertController.addAction(archiveAction3)\n        alertController.addAction(archiveAction4)\n        alertController.addAction(archiveAction5)\n        alertController.addAction(archiveAction6)\n        alertController.preferredAction  = archiveAction6\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n#### JRAlertController_sheet_simple\n```swift\n        let alertController = JRAlertController(title: \"blog tip\", message: \"Please select the option to use the corresponding option to operate your blog\", preferredStyle: .actionSheet)\n\t\t// let alertController = JRAlertController(title: \"blog tip\")\n\t\t// let alertController = JRAlertController(message: \"Please select the option to use the corresponding option to operate your blog\")\n\t\t// let alertController = JRAlertController()\n        let addAction = JRAlertAction(title: \"add\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"add blog\")\n        })\n        let modifyAction = JRAlertAction(title: \"modify\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"modify blog\")\n        })\n        let deleteAction = JRAlertAction(title: \"delete\", style: .destructive, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"delete blog\")\n        })\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler:  {\n            (action: JRAlertAction!) -> Void in\n            print(\"cancel\")\n        })\n        alertController.addAction(addAction)\n        alertController.addAction(modifyAction)\n        alertController.addAction(deleteAction)\n        alertController.addAction(cancelAction)\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n#### JRAlertController_sheet_multiple\n```swift\n        let alertController = JRAlertController(title: \"I am title,I am title,I am title,I am title,I am title\", message: \"I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message\", preferredStyle: .actionSheet)\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler: nil)\n        let deleteAction = JRAlertAction(title: \"delete\", style: .destructive, handler: nil)\n        let archiveAction = JRAlertAction(title: \"archive\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive\")\n        })\n        let archiveAction1 = JRAlertAction(title: \"archive1\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive1\")\n        })\n        let archiveAction2 = JRAlertAction(title: \"archive2\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive2\")\n        })\n        let archiveAction3 = JRAlertAction(title: \"archive3\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive3\")\n        })\n        let archiveAction4 = JRAlertAction(title: \"archive4\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive4\")\n        })\n        let archiveAction5 = JRAlertAction(title: \"archive5\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive5\")\n        })\n        let archiveAction6 = JRAlertAction(title: \"archive6\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive6\")\n        })\n        alertController.addAction(cancelAction)\n        alertController.addAction(deleteAction)\n        alertController.addAction(archiveAction)\n        alertController.addAction(archiveAction1)\n        alertController.addAction(archiveAction2)\n        alertController.addAction(archiveAction3)\n        alertController.addAction(archiveAction4)\n        alertController.addAction(archiveAction5)\n        alertController.addAction(archiveAction6)\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n\n### License\n\nJRAlertController is released under the Apache-2.0 license. See [LICENSE](https://raw.githubusercontent.com/Jiar/JRAlertController/master/LICENSE) for details.\n\n\n\n### 结束语\n\n本文完，大家如何喜欢`JRAlertController`，欢迎来[JRAlertController](https://github.com/Jiar/JRAlertController/)对本项目Star。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中指出。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/JRAlertController.md","raw":"---\ntitle: JRAlertController\ndate: 2016-11-11 11:11:11\ncategories: iOS\ntags:\n- iOS\n- Swift\n- JRAlertController\n- UIAlertController\n- alert\n- sheet\n---\n\n[JRAlertController](https://github.com/Jiar/JRAlertController/)：基于apple的UIAlertController控件api，用swift重新打造的UI控件，更符合主流app的风格。\n\n### JRAlertController总体效果图\n\n![UIAlertController_Main](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_Main.gif)\n\n<!--more-->\n\n### UIAlertController 历史\n\n在日常iOS开发中，我们经常能遇到这种情况（我们需要在某个地方让用户做一个选择），比如说：一个博客，点击右上角的按钮后，你可以执行“修改博客”、“删除博客”两个操作。既然是这么常用的操作，Apple当然给我们提供了常用的控件，那就是UIAlertController。\n\n`UIAlertController`自iOS8出现，在那之前，我们用的是`UIAlertView`和`UIActionSheet`。iOS8之后，`UIAlertView`与`UIActionSheet`合并为`UIAlertController`，并以一个`style`属性来区分原来的`UIAlertView`和`UIActionSheet`的作用，还有就是用闭包回调的方式代替了之前的代理（我觉得闭包回调的方式写起来方便多了）。\n\n### UIAlertController 不足\n\n那么既然`UIAlertController`已经是在iOS8优化后的控件（至少api上优化了），那么为何还来个`JRAlertController`呢？\n\n---\n\n在开发中我们会发现，`UIAlertController`有以下几个不足之处：\n\n1.无论是`alert`还是`sheet`下的界面，边角过于圆滑，尤其当`style`是`sheet`的时候，从底部弹出来那么一个过于圆滑的界面，反正我不觉得好看，不信你看微博、微信这些主流app是怎么做的\n微博的效果：\n![weibo](weibo.jpeg)\n\n2.点击背景部分，无法`dismiss UIAlertController`\n\n3.`alert`样式下，添加过多的`UITextField`和`Action`后，界面显示丑陋。（虽然不会有这种需求，也不该在`UIAlertController`过量添加，毕竟`UIAlertController`适用于\"短暂\"操作，但是过多添加后，界面确实不好看，后面会有效果图）\n\n基于以上几点不足，我认为足以自定义一个控件来代替`UIAlertController`，所以`JRAlertController`诞生了。\n\n### JRAlertController 与 UIAlertController 的不同\n\n我在开头提到过`UIAlertController`的`api`,它的`api`还是不错的，所以我在写`JRAlertController`的时候，几乎完全采用了`UIAlertController`的`api`，一方面`api`不错，另一方面方便大家从`UIAlertController`迁移到`JRAlertController`，基本上你只需要把原来`UIAlertController`部分的`UI`开头的改成`JR`就可以了，我提供的Demo中，大家便能很清晰的看到这一点。\n\n---\n\n##### 还有的几处不同点：\n\n1.\n```\n\t// UIAlertController 的初始化方法\n\tpublic convenience init(title: String?, message: String?, preferredStyle: UIAlertControllerStyle)\n\n\t// JRAlertController 的初始化方法\n\tpublic convenience init(title: String? = nil, message: String? = nil, preferredStyle: JRAlertControllerStyle = .actionSheet)\n```\n你会发现，`JRAlertController`提供了`title`参数和`message`参数的默认值，恩......如果你不需要`title`或`message`中的某一个（或都不需要），这样可以帮你少写一点点代码。\n\n2.\n```\n\t// UIAlertController进入方法\n\t// 这里的alertController为UIAlertController的实例，self为当前UIViewController\n\tself.present(alertController, animated: true, completion: nil)\n\n\t// JRAlertController进入方法\n\t// 这里的alertController为JRAlertController的实例，self为当前UIViewController\n\talertController.jr_show(onRootView: self)\n```\n至于这里为什么要做，这里涉及到`JRAlertController`从底部上移的动画效果。（目前我能想到的方法是在`JRAlertController`的`viewWillAppear`中执行一个上移动画，如果调用系统的`present`进入的话，如果又给animated参数设置true，那么`JRAlertController`的进入效果会比较丑陋。可能有朋友会问，为什么不使用iOS的转场动画，我有尝试去用过，但是也需要第一个执行`present`的`UIViewController`做很多其他的动作，写更多的代码。如果有朋友看了我的代码后，有更好的方式来处理进入效果，欢迎到[本项目的Github地址](https://github.com/Jiar/JRAlertController/)来`Pull requests`）\n\n3.\n`UIAlertController`里面有一个属性`preferredAction`，要求系统版本至少为iOS9。而在`JRAlertController`中，你只需要在iOS8下就可以使用了（如果不是`UIViewController`的`modalPresentationStyle`属性的`.overCurrentContext`值要求iOS8，我们就可以兼容到iOS7了）\n\n\n### JRAlertController 与 UIAlertController 相同点以及说明\n\n因为`JRAlertController`是采用几乎和`UIAlertController`一样的`api`来实现的，所以`JRAlertController`的大体功能效果会和`UIAlertController`一样。同时也是为了方便打算使用`JRAlertController`的朋友们能够在迁移到`JRAlertController`的时候没有后顾之忧。\n\n---\n\n##### 他们的相同点说明：\n\n1.只有`alert`样式下，才可以添加`UITextField`。\n\n2.`action`也有样式，但是`cancel`样式的`action`只能添加一个，添加多了`assert`。\n\n3.`preferredAction`属性也只能在`alert`样式下才能使用。\n\n以上三点别问我为什么这么规定，Apple的`UIAlertController`就是这么定的。\n\n---\n\n##### 其他说明：\n\n1.`JRAlertController`的`preferredAction`属性补充说明：除了只能在`alert`样式下才能使用外，如果存在`UITextField`，那么在`UITextField`列表的最后一个`UITextField`的键盘中点击`return`按钮，将触发`preferredAction`回调，并且`dismiss`当前`JRAlertController`。\n\n2.`JRAlertController`里面会有一个属性是这样的：`open var textFields: [UITextField]?`。所有你添加的`UITextField`都会在这里。注意的是，`JRAlertController`已经对所以添加的`UITextField`进行了代理操作。如果你覆盖了代理，影响也不是很大，但是至少会影响你以下两点：\n\n①.在`UITextField`中点击键盘上`return`按钮时无法从当前`UITextField`进入到下一个`UITextField`。\n②.如果当前`UITextField`已经是最后一个`UITextField`，同时你又设置了`preferredAction`，则无法触发`preferredAction`的回调，以及无法`dismiss`当前`JRAlertController`。\n\n3.如果需要在`JRAlertController`里，主动`dismiss`，建议调用`jr_dismiss()`。\n\n### JRAlertController 与 UIAlertController Gif图效果对比\n\n说了那么多，来几张效果图对比下`JRAlertController`与`UIAlertController`的区别\n\n\n#### JRAlertController 实现效果图\n\n##### JRAlertController在alert样式下简单显示\n![JRAlertController_alert_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_simple.gif)\n\n##### JRAlertController在alert样式下复杂显示\n![JRAlertController_alert_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_multiple.gif)\n\n##### JRAlertController在sheet样式下简单显示\n![JRAlertController_sheet_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_simple.gif)\n\n##### JRAlertController在sheet样式下复杂显示\n![JRAlertController_sheet_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_multiple.gif)\n\n#### UIAlertController 实现效果图\n\n##### UIAlertController在alert样式下简单显示\n![UIAlertController_alert_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_simple.gif)\n\n##### UIAlertController在alert样式下复杂显示\n![UIAlertController_alert_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_multiple.gif)\n\n##### UIAlertController在sheet样式下简单显示\n![UIAlertController_sheet_simple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_simple.gif)\n\n##### UIAlertController在sheet样式下复杂显示\n![UIAlertController_sheet_multiple](https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_multiple.gif)\n\n以上就是对`JRAlertController`的一些说明，下面放是官方性信息：\n\n---\n\n\n### Requirements\n\n- iOS 8.0+\n- Xcode 8.0+\n- Swift 3.0+\n\n### Installation\n\n#### CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:\n\n```bash\n$ gem install cocoapods\n```\n\n> CocoaPods 1.1.0+ is required to build JRAlertController 1.0.0\n\nTo integrate JRAlertController into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\n\ntarget '<Your Target Name>' do\n    pod 'JRAlertController', '~> 1.0。0'\nend\n```\n\nThen, run the following command:\n\n```bash\n$ pod install\n```\n\n#### Manually\n\nIf you prefer not to use either of the aforementioned dependency managers, you can integrate JRAlertController into your project manually.\n\n##### Embedded Framework\n\n- Open up Terminal, `cd` into your top-level project directory, and run the following command \"if\" your project is not initialized as a git repository:\n\n  ```bash\n$ git init\n```\n\n- Add JRAlertController as a git [submodule](http://git-scm.com/docs/git-submodule) by running the following command:\n\n  ```bash\n$ git submodule add https://github.com/Jiar/JRAlertController.git\n```\n\n- Open the new `JRAlertController` folder, and drag the `JRAlertController.xcodeproj` into the Project Navigator of your application's Xcode project.\n\n    > It should appear nested underneath your application's blue project icon. Whether it is above or below all the other Xcode groups does not matter.\n\n- Select the `JRAlertController.xcodeproj` in the Project Navigator and verify the deployment target matches that of your application target.\n- Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the \"Targets\" heading in the sidebar.\n- In the tab bar at the top of that window, open the \"General\" panel.\n- Click on the `+` button under the \"Embedded Binaries\" section.\n- You will see two different `JRAlertController.xcodeproj` folders each with two different versions of the `JRAlertController.framework` nested inside a `Products` folder.\n\n    > It does not matter which `Products` folder you choose from, but it does matter whether you choose the top or bottom `JRAlertController.framework`.\n\n- Select the top `JRAlertController.framework` for iOS.\n- And that's it!\n\n  > The `JRAlertController.framework` is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.\n\n---\n\n### Usage\n\n#### JRAlertController_alert_simple\n```swift\n        let alertController = JRAlertController(title: \"login tip\", message: \"please input account and password\", preferredStyle: .alert)\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler:  {\n            (action: JRAlertAction!) -> Void in\n            print(\"cancel\")\n        })\n        let loginAction = JRAlertAction(title: \"login\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"login\")\n        })\n        alertController.addAction(cancelAction)\n        alertController.addAction(loginAction)\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.keyboardType = .default\n            textField.placeholder = \"please input account\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.keyboardType = .default\n            textField.isSecureTextEntry = true\n            textField.placeholder = \"please input password\"\n        })\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n#### JRAlertController_alert_multiple\n```swift\n        let alertController = JRAlertController(title: \"I am title,I am title,I am title,I am title,I am title\", message: \"I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message\", preferredStyle: .alert)\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler:  {\n            (action: JRAlertAction!) -> Void in\n            print(\"cancel\")\n        })\n        let deleteAction = JRAlertAction(title: \"delete\", style: .destructive, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"delete\")\n        })\n        let archiveAction = JRAlertAction(title: \"archive\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive\")\n        })\n        let archiveAction1 = JRAlertAction(title: \"archive1\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive1\")\n        })\n        let archiveAction2 = JRAlertAction(title: \"archive2\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive2\")\n        })\n        let archiveAction3 = JRAlertAction(title: \"archive3\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive3\")\n        })\n        let archiveAction4 = JRAlertAction(title: \"archive4\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive4\")\n        })\n        let archiveAction5 = JRAlertAction(title: \"archive5\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive5\")\n        })\n        let archiveAction6 = JRAlertAction(title: \"archive6\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive6\")\n        })\n        alertController.addAction(cancelAction)\n        alertController.addAction(deleteAction)\n        alertController.addAction(archiveAction)\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .black\n            textField.text = \"black\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .darkGray\n            textField.text = \"darkGray\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .lightGray\n            textField.text = \"lightGray\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.backgroundColor = .black\n            textField.textColor = .white\n            textField.text = \"white\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .gray\n            textField.text = \"gray\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .red\n            textField.text = \"red\"\n        })\n        alertController.addAction(archiveAction1)\n        alertController.addAction(archiveAction2)\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .green\n            textField.text = \"green\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .blue\n            textField.text = \"blue\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .cyan\n            textField.text = \"cyan\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .yellow\n            textField.text = \"yellow\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .magenta\n            textField.text = \"magenta\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .orange\n            textField.text = \"orange\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .purple\n            textField.text = \"purple\"\n        })\n        alertController.addTextField(configurationHandler: { (textField: UITextField) -> Void in\n            textField.textColor = .brown\n            textField.text = \"brown\"\n        })\n        alertController.addAction(archiveAction3)\n        alertController.addAction(archiveAction4)\n        alertController.addAction(archiveAction5)\n        alertController.addAction(archiveAction6)\n        alertController.preferredAction  = archiveAction6\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n#### JRAlertController_sheet_simple\n```swift\n        let alertController = JRAlertController(title: \"blog tip\", message: \"Please select the option to use the corresponding option to operate your blog\", preferredStyle: .actionSheet)\n\t\t// let alertController = JRAlertController(title: \"blog tip\")\n\t\t// let alertController = JRAlertController(message: \"Please select the option to use the corresponding option to operate your blog\")\n\t\t// let alertController = JRAlertController()\n        let addAction = JRAlertAction(title: \"add\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"add blog\")\n        })\n        let modifyAction = JRAlertAction(title: \"modify\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"modify blog\")\n        })\n        let deleteAction = JRAlertAction(title: \"delete\", style: .destructive, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"delete blog\")\n        })\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler:  {\n            (action: JRAlertAction!) -> Void in\n            print(\"cancel\")\n        })\n        alertController.addAction(addAction)\n        alertController.addAction(modifyAction)\n        alertController.addAction(deleteAction)\n        alertController.addAction(cancelAction)\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n#### JRAlertController_sheet_multiple\n```swift\n        let alertController = JRAlertController(title: \"I am title,I am title,I am title,I am title,I am title\", message: \"I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message\", preferredStyle: .actionSheet)\n        let cancelAction = JRAlertAction(title: \"cancel\", style: .cancel, handler: nil)\n        let deleteAction = JRAlertAction(title: \"delete\", style: .destructive, handler: nil)\n        let archiveAction = JRAlertAction(title: \"archive\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive\")\n        })\n        let archiveAction1 = JRAlertAction(title: \"archive1\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive1\")\n        })\n        let archiveAction2 = JRAlertAction(title: \"archive2\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive2\")\n        })\n        let archiveAction3 = JRAlertAction(title: \"archive3\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive3\")\n        })\n        let archiveAction4 = JRAlertAction(title: \"archive4\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive4\")\n        })\n        let archiveAction5 = JRAlertAction(title: \"archive5\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive5\")\n        })\n        let archiveAction6 = JRAlertAction(title: \"archive6\", style: .default, handler: {\n            (action: JRAlertAction!) -> Void in\n            print(\"archive6\")\n        })\n        alertController.addAction(cancelAction)\n        alertController.addAction(deleteAction)\n        alertController.addAction(archiveAction)\n        alertController.addAction(archiveAction1)\n        alertController.addAction(archiveAction2)\n        alertController.addAction(archiveAction3)\n        alertController.addAction(archiveAction4)\n        alertController.addAction(archiveAction5)\n        alertController.addAction(archiveAction6)\n        // must use this function to show JRAlertController\n        // self is a UIControllerView\n        alertController.jr_show(onRootView: self)\n```\n\n\n### License\n\nJRAlertController is released under the Apache-2.0 license. See [LICENSE](https://raw.githubusercontent.com/Jiar/JRAlertController/master/LICENSE) for details.\n\n\n\n### 结束语\n\n本文完，大家如何喜欢`JRAlertController`，欢迎来[JRAlertController](https://github.com/Jiar/JRAlertController/)对本项目Star。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中指出。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。\n\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"JRAlertController","published":1,"updated":"2022-02-14T08:56:36.920Z","_id":"ckhcv3f7a0036rlf6fo1nf738","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/Jiar/JRAlertController/\">JRAlertController</a>：基于apple的UIAlertController控件api，用swift重新打造的UI控件，更符合主流app的风格。</p>\n<h3 id=\"JRAlertController总体效果图\"><a href=\"#JRAlertController总体效果图\" class=\"headerlink\" title=\"JRAlertController总体效果图\"></a>JRAlertController总体效果图</h3><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_Main.gif\" alt=\"UIAlertController_Main\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"UIAlertController-历史\"><a href=\"#UIAlertController-历史\" class=\"headerlink\" title=\"UIAlertController 历史\"></a>UIAlertController 历史</h3><p>在日常iOS开发中，我们经常能遇到这种情况（我们需要在某个地方让用户做一个选择），比如说：一个博客，点击右上角的按钮后，你可以执行“修改博客”、“删除博客”两个操作。既然是这么常用的操作，Apple当然给我们提供了常用的控件，那就是UIAlertController。</p>\n<p><code>UIAlertController</code>自iOS8出现，在那之前，我们用的是<code>UIAlertView</code>和<code>UIActionSheet</code>。iOS8之后，<code>UIAlertView</code>与<code>UIActionSheet</code>合并为<code>UIAlertController</code>，并以一个<code>style</code>属性来区分原来的<code>UIAlertView</code>和<code>UIActionSheet</code>的作用，还有就是用闭包回调的方式代替了之前的代理（我觉得闭包回调的方式写起来方便多了）。</p>\n<h3 id=\"UIAlertController-不足\"><a href=\"#UIAlertController-不足\" class=\"headerlink\" title=\"UIAlertController 不足\"></a>UIAlertController 不足</h3><p>那么既然<code>UIAlertController</code>已经是在iOS8优化后的控件（至少api上优化了），那么为何还来个<code>JRAlertController</code>呢？</p>\n<hr>\n<p>在开发中我们会发现，<code>UIAlertController</code>有以下几个不足之处：</p>\n<p>1.无论是<code>alert</code>还是<code>sheet</code>下的界面，边角过于圆滑，尤其当<code>style</code>是<code>sheet</code>的时候，从底部弹出来那么一个过于圆滑的界面，反正我不觉得好看，不信你看微博、微信这些主流app是怎么做的<br>微博的效果：<br><img src=\"/2016/11/11/JRAlertController/weibo.jpeg\" alt=\"weibo\"></p>\n<p>2.点击背景部分，无法<code>dismiss UIAlertController</code></p>\n<p>3.<code>alert</code>样式下，添加过多的<code>UITextField</code>和<code>Action</code>后，界面显示丑陋。（虽然不会有这种需求，也不该在<code>UIAlertController</code>过量添加，毕竟<code>UIAlertController</code>适用于”短暂”操作，但是过多添加后，界面确实不好看，后面会有效果图）</p>\n<p>基于以上几点不足，我认为足以自定义一个控件来代替<code>UIAlertController</code>，所以<code>JRAlertController</code>诞生了。</p>\n<h3 id=\"JRAlertController-与-UIAlertController-的不同\"><a href=\"#JRAlertController-与-UIAlertController-的不同\" class=\"headerlink\" title=\"JRAlertController 与 UIAlertController 的不同\"></a>JRAlertController 与 UIAlertController 的不同</h3><p>我在开头提到过<code>UIAlertController</code>的<code>api</code>,它的<code>api</code>还是不错的，所以我在写<code>JRAlertController</code>的时候，几乎完全采用了<code>UIAlertController</code>的<code>api</code>，一方面<code>api</code>不错，另一方面方便大家从<code>UIAlertController</code>迁移到<code>JRAlertController</code>，基本上你只需要把原来<code>UIAlertController</code>部分的<code>UI</code>开头的改成<code>JR</code>就可以了，我提供的Demo中，大家便能很清晰的看到这一点。</p>\n<hr>\n<h5 id=\"还有的几处不同点：\"><a href=\"#还有的几处不同点：\" class=\"headerlink\" title=\"还有的几处不同点：\"></a>还有的几处不同点：</h5><p>1.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; UIAlertController 的初始化方法</span><br><span class=\"line\">public convenience init(title: String?, message: String?, preferredStyle: UIAlertControllerStyle)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JRAlertController 的初始化方法</span><br><span class=\"line\">public convenience init(title: String? &#x3D; nil, message: String? &#x3D; nil, preferredStyle: JRAlertControllerStyle &#x3D; .actionSheet)</span><br></pre></td></tr></table></figure>\n<p>你会发现，<code>JRAlertController</code>提供了<code>title</code>参数和<code>message</code>参数的默认值，恩……如果你不需要<code>title</code>或<code>message</code>中的某一个（或都不需要），这样可以帮你少写一点点代码。</p>\n<p>2.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; UIAlertController进入方法</span><br><span class=\"line\">&#x2F;&#x2F; 这里的alertController为UIAlertController的实例，self为当前UIViewController</span><br><span class=\"line\">self.present(alertController, animated: true, completion: nil)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JRAlertController进入方法</span><br><span class=\"line\">&#x2F;&#x2F; 这里的alertController为JRAlertController的实例，self为当前UIViewController</span><br><span class=\"line\">alertController.jr_show(onRootView: self)</span><br></pre></td></tr></table></figure>\n<p>至于这里为什么要做，这里涉及到<code>JRAlertController</code>从底部上移的动画效果。（目前我能想到的方法是在<code>JRAlertController</code>的<code>viewWillAppear</code>中执行一个上移动画，如果调用系统的<code>present</code>进入的话，如果又给animated参数设置true，那么<code>JRAlertController</code>的进入效果会比较丑陋。可能有朋友会问，为什么不使用iOS的转场动画，我有尝试去用过，但是也需要第一个执行<code>present</code>的<code>UIViewController</code>做很多其他的动作，写更多的代码。如果有朋友看了我的代码后，有更好的方式来处理进入效果，欢迎到<a href=\"https://github.com/Jiar/JRAlertController/\">本项目的Github地址</a>来<code>Pull requests</code>）</p>\n<p>3.<br><code>UIAlertController</code>里面有一个属性<code>preferredAction</code>，要求系统版本至少为iOS9。而在<code>JRAlertController</code>中，你只需要在iOS8下就可以使用了（如果不是<code>UIViewController</code>的<code>modalPresentationStyle</code>属性的<code>.overCurrentContext</code>值要求iOS8，我们就可以兼容到iOS7了）</p>\n<h3 id=\"JRAlertController-与-UIAlertController-相同点以及说明\"><a href=\"#JRAlertController-与-UIAlertController-相同点以及说明\" class=\"headerlink\" title=\"JRAlertController 与 UIAlertController 相同点以及说明\"></a>JRAlertController 与 UIAlertController 相同点以及说明</h3><p>因为<code>JRAlertController</code>是采用几乎和<code>UIAlertController</code>一样的<code>api</code>来实现的，所以<code>JRAlertController</code>的大体功能效果会和<code>UIAlertController</code>一样。同时也是为了方便打算使用<code>JRAlertController</code>的朋友们能够在迁移到<code>JRAlertController</code>的时候没有后顾之忧。</p>\n<hr>\n<h5 id=\"他们的相同点说明：\"><a href=\"#他们的相同点说明：\" class=\"headerlink\" title=\"他们的相同点说明：\"></a>他们的相同点说明：</h5><p>1.只有<code>alert</code>样式下，才可以添加<code>UITextField</code>。</p>\n<p>2.<code>action</code>也有样式，但是<code>cancel</code>样式的<code>action</code>只能添加一个，添加多了<code>assert</code>。</p>\n<p>3.<code>preferredAction</code>属性也只能在<code>alert</code>样式下才能使用。</p>\n<p>以上三点别问我为什么这么规定，Apple的<code>UIAlertController</code>就是这么定的。</p>\n<hr>\n<h5 id=\"其他说明：\"><a href=\"#其他说明：\" class=\"headerlink\" title=\"其他说明：\"></a>其他说明：</h5><p>1.<code>JRAlertController</code>的<code>preferredAction</code>属性补充说明：除了只能在<code>alert</code>样式下才能使用外，如果存在<code>UITextField</code>，那么在<code>UITextField</code>列表的最后一个<code>UITextField</code>的键盘中点击<code>return</code>按钮，将触发<code>preferredAction</code>回调，并且<code>dismiss</code>当前<code>JRAlertController</code>。</p>\n<p>2.<code>JRAlertController</code>里面会有一个属性是这样的：<code>open var textFields: [UITextField]?</code>。所有你添加的<code>UITextField</code>都会在这里。注意的是，<code>JRAlertController</code>已经对所以添加的<code>UITextField</code>进行了代理操作。如果你覆盖了代理，影响也不是很大，但是至少会影响你以下两点：</p>\n<p>①.在<code>UITextField</code>中点击键盘上<code>return</code>按钮时无法从当前<code>UITextField</code>进入到下一个<code>UITextField</code>。<br>②.如果当前<code>UITextField</code>已经是最后一个<code>UITextField</code>，同时你又设置了<code>preferredAction</code>，则无法触发<code>preferredAction</code>的回调，以及无法<code>dismiss</code>当前<code>JRAlertController</code>。</p>\n<p>3.如果需要在<code>JRAlertController</code>里，主动<code>dismiss</code>，建议调用<code>jr_dismiss()</code>。</p>\n<h3 id=\"JRAlertController-与-UIAlertController-Gif图效果对比\"><a href=\"#JRAlertController-与-UIAlertController-Gif图效果对比\" class=\"headerlink\" title=\"JRAlertController 与 UIAlertController Gif图效果对比\"></a>JRAlertController 与 UIAlertController Gif图效果对比</h3><p>说了那么多，来几张效果图对比下<code>JRAlertController</code>与<code>UIAlertController</code>的区别</p>\n<h4 id=\"JRAlertController-实现效果图\"><a href=\"#JRAlertController-实现效果图\" class=\"headerlink\" title=\"JRAlertController 实现效果图\"></a>JRAlertController 实现效果图</h4><h5 id=\"JRAlertController在alert样式下简单显示\"><a href=\"#JRAlertController在alert样式下简单显示\" class=\"headerlink\" title=\"JRAlertController在alert样式下简单显示\"></a>JRAlertController在alert样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_simple.gif\" alt=\"JRAlertController_alert_simple\"></p>\n<h5 id=\"JRAlertController在alert样式下复杂显示\"><a href=\"#JRAlertController在alert样式下复杂显示\" class=\"headerlink\" title=\"JRAlertController在alert样式下复杂显示\"></a>JRAlertController在alert样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_multiple.gif\" alt=\"JRAlertController_alert_multiple\"></p>\n<h5 id=\"JRAlertController在sheet样式下简单显示\"><a href=\"#JRAlertController在sheet样式下简单显示\" class=\"headerlink\" title=\"JRAlertController在sheet样式下简单显示\"></a>JRAlertController在sheet样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_simple.gif\" alt=\"JRAlertController_sheet_simple\"></p>\n<h5 id=\"JRAlertController在sheet样式下复杂显示\"><a href=\"#JRAlertController在sheet样式下复杂显示\" class=\"headerlink\" title=\"JRAlertController在sheet样式下复杂显示\"></a>JRAlertController在sheet样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_multiple.gif\" alt=\"JRAlertController_sheet_multiple\"></p>\n<h4 id=\"UIAlertController-实现效果图\"><a href=\"#UIAlertController-实现效果图\" class=\"headerlink\" title=\"UIAlertController 实现效果图\"></a>UIAlertController 实现效果图</h4><h5 id=\"UIAlertController在alert样式下简单显示\"><a href=\"#UIAlertController在alert样式下简单显示\" class=\"headerlink\" title=\"UIAlertController在alert样式下简单显示\"></a>UIAlertController在alert样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_simple.gif\" alt=\"UIAlertController_alert_simple\"></p>\n<h5 id=\"UIAlertController在alert样式下复杂显示\"><a href=\"#UIAlertController在alert样式下复杂显示\" class=\"headerlink\" title=\"UIAlertController在alert样式下复杂显示\"></a>UIAlertController在alert样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_multiple.gif\" alt=\"UIAlertController_alert_multiple\"></p>\n<h5 id=\"UIAlertController在sheet样式下简单显示\"><a href=\"#UIAlertController在sheet样式下简单显示\" class=\"headerlink\" title=\"UIAlertController在sheet样式下简单显示\"></a>UIAlertController在sheet样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_simple.gif\" alt=\"UIAlertController_sheet_simple\"></p>\n<h5 id=\"UIAlertController在sheet样式下复杂显示\"><a href=\"#UIAlertController在sheet样式下复杂显示\" class=\"headerlink\" title=\"UIAlertController在sheet样式下复杂显示\"></a>UIAlertController在sheet样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_multiple.gif\" alt=\"UIAlertController_sheet_multiple\"></p>\n<p>以上就是对<code>JRAlertController</code>的一些说明，下面放是官方性信息：</p>\n<hr>\n<h3 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h3><ul>\n<li>iOS 8.0+</li>\n<li>Xcode 8.0+</li>\n<li>Swift 3.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><h4 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h4><p><a href=\"http://cocoapods.org/\">CocoaPods</a> is a dependency manager for Cocoa projects. You can install it with the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install cocoapods</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>CocoaPods 1.1.0+ is required to build JRAlertController 1.0.0</p>\n</blockquote>\n<p>To integrate JRAlertController into your Xcode project using CocoaPods, specify it in your <code>Podfile</code>:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">&#x27;https://github.com/CocoaPods/Specs.git&#x27;</span></span><br><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">&#x27;8.0&#x27;</span></span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&#x27;&lt;Your Target Name&gt;&#x27;</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    pod <span class=\"string\">&#x27;JRAlertController&#x27;</span>, <span class=\"string\">&#x27;~&gt; 1.0。0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Then, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Manually\"><a href=\"#Manually\" class=\"headerlink\" title=\"Manually\"></a>Manually</h4><p>If you prefer not to use either of the aforementioned dependency managers, you can integrate JRAlertController into your project manually.</p>\n<h5 id=\"Embedded-Framework\"><a href=\"#Embedded-Framework\" class=\"headerlink\" title=\"Embedded Framework\"></a>Embedded Framework</h5><ul>\n<li><p>Open up Terminal, <code>cd</code> into your top-level project directory, and run the following command “if” your project is not initialized as a git repository:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add JRAlertController as a git <a href=\"http://git-scm.com/docs/git-submodule\">submodule</a> by running the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule add https://github.com/Jiar/JRAlertController.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Open the new <code>JRAlertController</code> folder, and drag the <code>JRAlertController.xcodeproj</code> into the Project Navigator of your application’s Xcode project.</p>\n<blockquote>\n<p>It should appear nested underneath your application’s blue project icon. Whether it is above or below all the other Xcode groups does not matter.</p>\n</blockquote>\n</li>\n<li><p>Select the <code>JRAlertController.xcodeproj</code> in the Project Navigator and verify the deployment target matches that of your application target.</p>\n</li>\n<li><p>Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the “Targets” heading in the sidebar.</p>\n</li>\n<li><p>In the tab bar at the top of that window, open the “General” panel.</p>\n</li>\n<li><p>Click on the <code>+</code> button under the “Embedded Binaries” section.</p>\n</li>\n<li><p>You will see two different <code>JRAlertController.xcodeproj</code> folders each with two different versions of the <code>JRAlertController.framework</code> nested inside a <code>Products</code> folder.</p>\n<blockquote>\n<p>It does not matter which <code>Products</code> folder you choose from, but it does matter whether you choose the top or bottom <code>JRAlertController.framework</code>.</p>\n</blockquote>\n</li>\n<li><p>Select the top <code>JRAlertController.framework</code> for iOS.</p>\n</li>\n<li><p>And that’s it!</p>\n<blockquote>\n<p>The <code>JRAlertController.framework</code> is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><h4 id=\"JRAlertController-alert-simple\"><a href=\"#JRAlertController-alert-simple\" class=\"headerlink\" title=\"JRAlertController_alert_simple\"></a>JRAlertController_alert_simple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;login tip&quot;</span>, message: <span class=\"string\">&quot;please input account and password&quot;</span>, preferredStyle: .alert)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler:  &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cancel&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> loginAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;login&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(cancelAction)</span><br><span class=\"line\">alertController.addAction(loginAction)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.keyboardType = .<span class=\"keyword\">default</span></span><br><span class=\"line\">    textField.placeholder = <span class=\"string\">&quot;please input account&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.keyboardType = .<span class=\"keyword\">default</span></span><br><span class=\"line\">    textField.isSecureTextEntry = <span class=\"literal\">true</span></span><br><span class=\"line\">    textField.placeholder = <span class=\"string\">&quot;please input password&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\"><span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JRAlertController-alert-multiple\"><a href=\"#JRAlertController-alert-multiple\" class=\"headerlink\" title=\"JRAlertController_alert_multiple\"></a>JRAlertController_alert_multiple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;I am title,I am title,I am title,I am title,I am title&quot;</span>, message: <span class=\"string\">&quot;I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message&quot;</span>, preferredStyle: .alert)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler:  &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cancel&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;delete&quot;</span>, style: .destructive, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;delete&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction1 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive1&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction2 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive2&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive2&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction3 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive3&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive3&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction4 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive4&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive4&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction5 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive5&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive5&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction6 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive6&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive6&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(cancelAction)</span><br><span class=\"line\">alertController.addAction(deleteAction)</span><br><span class=\"line\">alertController.addAction(archiveAction)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .black</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .darkGray</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;darkGray&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .lightGray</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;lightGray&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.backgroundColor = .black</span><br><span class=\"line\">    textField.textColor = .white</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;white&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .gray</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;gray&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .red</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(archiveAction1)</span><br><span class=\"line\">alertController.addAction(archiveAction2)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .green</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;green&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .blue</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .cyan</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;cyan&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .yellow</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;yellow&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .magenta</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;magenta&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .orange</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;orange&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .purple</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;purple&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .brown</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;brown&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(archiveAction3)</span><br><span class=\"line\">alertController.addAction(archiveAction4)</span><br><span class=\"line\">alertController.addAction(archiveAction5)</span><br><span class=\"line\">alertController.addAction(archiveAction6)</span><br><span class=\"line\">alertController.preferredAction  = archiveAction6</span><br><span class=\"line\"><span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\"><span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JRAlertController-sheet-simple\"><a href=\"#JRAlertController-sheet-simple\" class=\"headerlink\" title=\"JRAlertController_sheet_simple\"></a>JRAlertController_sheet_simple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;blog tip&quot;</span>, message: <span class=\"string\">&quot;Please select the option to use the corresponding option to operate your blog&quot;</span>, preferredStyle: .actionSheet)</span><br><span class=\"line\"><span class=\"comment\">// let alertController = JRAlertController(title: &quot;blog tip&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// let alertController = JRAlertController(message: &quot;Please select the option to use the corresponding option to operate your blog&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// let alertController = JRAlertController()</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> addAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;add&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add blog&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> modifyAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;modify&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;modify blog&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> deleteAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;delete&quot;</span>, style: .destructive, handler: &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;delete blog&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler:  &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cancel&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      alertController.addAction(addAction)</span><br><span class=\"line\">      alertController.addAction(modifyAction)</span><br><span class=\"line\">      alertController.addAction(deleteAction)</span><br><span class=\"line\">      alertController.addAction(cancelAction)</span><br><span class=\"line\">      <span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\">      <span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">      alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JRAlertController-sheet-multiple\"><a href=\"#JRAlertController-sheet-multiple\" class=\"headerlink\" title=\"JRAlertController_sheet_multiple\"></a>JRAlertController_sheet_multiple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;I am title,I am title,I am title,I am title,I am title&quot;</span>, message: <span class=\"string\">&quot;I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message&quot;</span>, preferredStyle: .actionSheet)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;delete&quot;</span>, style: .destructive, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction1 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive1&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction2 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive2&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive2&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction3 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive3&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive3&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction4 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive4&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive4&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction5 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive5&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive5&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction6 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive6&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive6&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(cancelAction)</span><br><span class=\"line\">alertController.addAction(deleteAction)</span><br><span class=\"line\">alertController.addAction(archiveAction)</span><br><span class=\"line\">alertController.addAction(archiveAction1)</span><br><span class=\"line\">alertController.addAction(archiveAction2)</span><br><span class=\"line\">alertController.addAction(archiveAction3)</span><br><span class=\"line\">alertController.addAction(archiveAction4)</span><br><span class=\"line\">alertController.addAction(archiveAction5)</span><br><span class=\"line\">alertController.addAction(archiveAction6)</span><br><span class=\"line\"><span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\"><span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3><p>JRAlertController is released under the Apache-2.0 license. See <a href=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/LICENSE\">LICENSE</a> for details.</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>本文完，大家如何喜欢<code>JRAlertController</code>，欢迎来<a href=\"https://github.com/Jiar/JRAlertController/\">JRAlertController</a>对本项目Star。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中指出。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/Jiar/JRAlertController/\">JRAlertController</a>：基于apple的UIAlertController控件api，用swift重新打造的UI控件，更符合主流app的风格。</p>\n<h3 id=\"JRAlertController总体效果图\"><a href=\"#JRAlertController总体效果图\" class=\"headerlink\" title=\"JRAlertController总体效果图\"></a>JRAlertController总体效果图</h3><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_Main.gif\" alt=\"UIAlertController_Main\"></p>","more":"<h3 id=\"UIAlertController-历史\"><a href=\"#UIAlertController-历史\" class=\"headerlink\" title=\"UIAlertController 历史\"></a>UIAlertController 历史</h3><p>在日常iOS开发中，我们经常能遇到这种情况（我们需要在某个地方让用户做一个选择），比如说：一个博客，点击右上角的按钮后，你可以执行“修改博客”、“删除博客”两个操作。既然是这么常用的操作，Apple当然给我们提供了常用的控件，那就是UIAlertController。</p>\n<p><code>UIAlertController</code>自iOS8出现，在那之前，我们用的是<code>UIAlertView</code>和<code>UIActionSheet</code>。iOS8之后，<code>UIAlertView</code>与<code>UIActionSheet</code>合并为<code>UIAlertController</code>，并以一个<code>style</code>属性来区分原来的<code>UIAlertView</code>和<code>UIActionSheet</code>的作用，还有就是用闭包回调的方式代替了之前的代理（我觉得闭包回调的方式写起来方便多了）。</p>\n<h3 id=\"UIAlertController-不足\"><a href=\"#UIAlertController-不足\" class=\"headerlink\" title=\"UIAlertController 不足\"></a>UIAlertController 不足</h3><p>那么既然<code>UIAlertController</code>已经是在iOS8优化后的控件（至少api上优化了），那么为何还来个<code>JRAlertController</code>呢？</p>\n<hr>\n<p>在开发中我们会发现，<code>UIAlertController</code>有以下几个不足之处：</p>\n<p>1.无论是<code>alert</code>还是<code>sheet</code>下的界面，边角过于圆滑，尤其当<code>style</code>是<code>sheet</code>的时候，从底部弹出来那么一个过于圆滑的界面，反正我不觉得好看，不信你看微博、微信这些主流app是怎么做的<br>微博的效果：<br><img src=\"/2016/11/11/JRAlertController/weibo.jpeg\" alt=\"weibo\"></p>\n<p>2.点击背景部分，无法<code>dismiss UIAlertController</code></p>\n<p>3.<code>alert</code>样式下，添加过多的<code>UITextField</code>和<code>Action</code>后，界面显示丑陋。（虽然不会有这种需求，也不该在<code>UIAlertController</code>过量添加，毕竟<code>UIAlertController</code>适用于”短暂”操作，但是过多添加后，界面确实不好看，后面会有效果图）</p>\n<p>基于以上几点不足，我认为足以自定义一个控件来代替<code>UIAlertController</code>，所以<code>JRAlertController</code>诞生了。</p>\n<h3 id=\"JRAlertController-与-UIAlertController-的不同\"><a href=\"#JRAlertController-与-UIAlertController-的不同\" class=\"headerlink\" title=\"JRAlertController 与 UIAlertController 的不同\"></a>JRAlertController 与 UIAlertController 的不同</h3><p>我在开头提到过<code>UIAlertController</code>的<code>api</code>,它的<code>api</code>还是不错的，所以我在写<code>JRAlertController</code>的时候，几乎完全采用了<code>UIAlertController</code>的<code>api</code>，一方面<code>api</code>不错，另一方面方便大家从<code>UIAlertController</code>迁移到<code>JRAlertController</code>，基本上你只需要把原来<code>UIAlertController</code>部分的<code>UI</code>开头的改成<code>JR</code>就可以了，我提供的Demo中，大家便能很清晰的看到这一点。</p>\n<hr>\n<h5 id=\"还有的几处不同点：\"><a href=\"#还有的几处不同点：\" class=\"headerlink\" title=\"还有的几处不同点：\"></a>还有的几处不同点：</h5><p>1.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; UIAlertController 的初始化方法</span><br><span class=\"line\">public convenience init(title: String?, message: String?, preferredStyle: UIAlertControllerStyle)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JRAlertController 的初始化方法</span><br><span class=\"line\">public convenience init(title: String? &#x3D; nil, message: String? &#x3D; nil, preferredStyle: JRAlertControllerStyle &#x3D; .actionSheet)</span><br></pre></td></tr></table></figure>\n<p>你会发现，<code>JRAlertController</code>提供了<code>title</code>参数和<code>message</code>参数的默认值，恩……如果你不需要<code>title</code>或<code>message</code>中的某一个（或都不需要），这样可以帮你少写一点点代码。</p>\n<p>2.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; UIAlertController进入方法</span><br><span class=\"line\">&#x2F;&#x2F; 这里的alertController为UIAlertController的实例，self为当前UIViewController</span><br><span class=\"line\">self.present(alertController, animated: true, completion: nil)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; JRAlertController进入方法</span><br><span class=\"line\">&#x2F;&#x2F; 这里的alertController为JRAlertController的实例，self为当前UIViewController</span><br><span class=\"line\">alertController.jr_show(onRootView: self)</span><br></pre></td></tr></table></figure>\n<p>至于这里为什么要做，这里涉及到<code>JRAlertController</code>从底部上移的动画效果。（目前我能想到的方法是在<code>JRAlertController</code>的<code>viewWillAppear</code>中执行一个上移动画，如果调用系统的<code>present</code>进入的话，如果又给animated参数设置true，那么<code>JRAlertController</code>的进入效果会比较丑陋。可能有朋友会问，为什么不使用iOS的转场动画，我有尝试去用过，但是也需要第一个执行<code>present</code>的<code>UIViewController</code>做很多其他的动作，写更多的代码。如果有朋友看了我的代码后，有更好的方式来处理进入效果，欢迎到<a href=\"https://github.com/Jiar/JRAlertController/\">本项目的Github地址</a>来<code>Pull requests</code>）</p>\n<p>3.<br><code>UIAlertController</code>里面有一个属性<code>preferredAction</code>，要求系统版本至少为iOS9。而在<code>JRAlertController</code>中，你只需要在iOS8下就可以使用了（如果不是<code>UIViewController</code>的<code>modalPresentationStyle</code>属性的<code>.overCurrentContext</code>值要求iOS8，我们就可以兼容到iOS7了）</p>\n<h3 id=\"JRAlertController-与-UIAlertController-相同点以及说明\"><a href=\"#JRAlertController-与-UIAlertController-相同点以及说明\" class=\"headerlink\" title=\"JRAlertController 与 UIAlertController 相同点以及说明\"></a>JRAlertController 与 UIAlertController 相同点以及说明</h3><p>因为<code>JRAlertController</code>是采用几乎和<code>UIAlertController</code>一样的<code>api</code>来实现的，所以<code>JRAlertController</code>的大体功能效果会和<code>UIAlertController</code>一样。同时也是为了方便打算使用<code>JRAlertController</code>的朋友们能够在迁移到<code>JRAlertController</code>的时候没有后顾之忧。</p>\n<hr>\n<h5 id=\"他们的相同点说明：\"><a href=\"#他们的相同点说明：\" class=\"headerlink\" title=\"他们的相同点说明：\"></a>他们的相同点说明：</h5><p>1.只有<code>alert</code>样式下，才可以添加<code>UITextField</code>。</p>\n<p>2.<code>action</code>也有样式，但是<code>cancel</code>样式的<code>action</code>只能添加一个，添加多了<code>assert</code>。</p>\n<p>3.<code>preferredAction</code>属性也只能在<code>alert</code>样式下才能使用。</p>\n<p>以上三点别问我为什么这么规定，Apple的<code>UIAlertController</code>就是这么定的。</p>\n<hr>\n<h5 id=\"其他说明：\"><a href=\"#其他说明：\" class=\"headerlink\" title=\"其他说明：\"></a>其他说明：</h5><p>1.<code>JRAlertController</code>的<code>preferredAction</code>属性补充说明：除了只能在<code>alert</code>样式下才能使用外，如果存在<code>UITextField</code>，那么在<code>UITextField</code>列表的最后一个<code>UITextField</code>的键盘中点击<code>return</code>按钮，将触发<code>preferredAction</code>回调，并且<code>dismiss</code>当前<code>JRAlertController</code>。</p>\n<p>2.<code>JRAlertController</code>里面会有一个属性是这样的：<code>open var textFields: [UITextField]?</code>。所有你添加的<code>UITextField</code>都会在这里。注意的是，<code>JRAlertController</code>已经对所以添加的<code>UITextField</code>进行了代理操作。如果你覆盖了代理，影响也不是很大，但是至少会影响你以下两点：</p>\n<p>①.在<code>UITextField</code>中点击键盘上<code>return</code>按钮时无法从当前<code>UITextField</code>进入到下一个<code>UITextField</code>。<br>②.如果当前<code>UITextField</code>已经是最后一个<code>UITextField</code>，同时你又设置了<code>preferredAction</code>，则无法触发<code>preferredAction</code>的回调，以及无法<code>dismiss</code>当前<code>JRAlertController</code>。</p>\n<p>3.如果需要在<code>JRAlertController</code>里，主动<code>dismiss</code>，建议调用<code>jr_dismiss()</code>。</p>\n<h3 id=\"JRAlertController-与-UIAlertController-Gif图效果对比\"><a href=\"#JRAlertController-与-UIAlertController-Gif图效果对比\" class=\"headerlink\" title=\"JRAlertController 与 UIAlertController Gif图效果对比\"></a>JRAlertController 与 UIAlertController Gif图效果对比</h3><p>说了那么多，来几张效果图对比下<code>JRAlertController</code>与<code>UIAlertController</code>的区别</p>\n<h4 id=\"JRAlertController-实现效果图\"><a href=\"#JRAlertController-实现效果图\" class=\"headerlink\" title=\"JRAlertController 实现效果图\"></a>JRAlertController 实现效果图</h4><h5 id=\"JRAlertController在alert样式下简单显示\"><a href=\"#JRAlertController在alert样式下简单显示\" class=\"headerlink\" title=\"JRAlertController在alert样式下简单显示\"></a>JRAlertController在alert样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_simple.gif\" alt=\"JRAlertController_alert_simple\"></p>\n<h5 id=\"JRAlertController在alert样式下复杂显示\"><a href=\"#JRAlertController在alert样式下复杂显示\" class=\"headerlink\" title=\"JRAlertController在alert样式下复杂显示\"></a>JRAlertController在alert样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_alert_multiple.gif\" alt=\"JRAlertController_alert_multiple\"></p>\n<h5 id=\"JRAlertController在sheet样式下简单显示\"><a href=\"#JRAlertController在sheet样式下简单显示\" class=\"headerlink\" title=\"JRAlertController在sheet样式下简单显示\"></a>JRAlertController在sheet样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_simple.gif\" alt=\"JRAlertController_sheet_simple\"></p>\n<h5 id=\"JRAlertController在sheet样式下复杂显示\"><a href=\"#JRAlertController在sheet样式下复杂显示\" class=\"headerlink\" title=\"JRAlertController在sheet样式下复杂显示\"></a>JRAlertController在sheet样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/JRAlertController_sheet_multiple.gif\" alt=\"JRAlertController_sheet_multiple\"></p>\n<h4 id=\"UIAlertController-实现效果图\"><a href=\"#UIAlertController-实现效果图\" class=\"headerlink\" title=\"UIAlertController 实现效果图\"></a>UIAlertController 实现效果图</h4><h5 id=\"UIAlertController在alert样式下简单显示\"><a href=\"#UIAlertController在alert样式下简单显示\" class=\"headerlink\" title=\"UIAlertController在alert样式下简单显示\"></a>UIAlertController在alert样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_simple.gif\" alt=\"UIAlertController_alert_simple\"></p>\n<h5 id=\"UIAlertController在alert样式下复杂显示\"><a href=\"#UIAlertController在alert样式下复杂显示\" class=\"headerlink\" title=\"UIAlertController在alert样式下复杂显示\"></a>UIAlertController在alert样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_alert_multiple.gif\" alt=\"UIAlertController_alert_multiple\"></p>\n<h5 id=\"UIAlertController在sheet样式下简单显示\"><a href=\"#UIAlertController在sheet样式下简单显示\" class=\"headerlink\" title=\"UIAlertController在sheet样式下简单显示\"></a>UIAlertController在sheet样式下简单显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_simple.gif\" alt=\"UIAlertController_sheet_simple\"></p>\n<h5 id=\"UIAlertController在sheet样式下复杂显示\"><a href=\"#UIAlertController在sheet样式下复杂显示\" class=\"headerlink\" title=\"UIAlertController在sheet样式下复杂显示\"></a>UIAlertController在sheet样式下复杂显示</h5><p><img src=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/Screenshot/UIAlertController_sheet_multiple.gif\" alt=\"UIAlertController_sheet_multiple\"></p>\n<p>以上就是对<code>JRAlertController</code>的一些说明，下面放是官方性信息：</p>\n<hr>\n<h3 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h3><ul>\n<li>iOS 8.0+</li>\n<li>Xcode 8.0+</li>\n<li>Swift 3.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><h4 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h4><p><a href=\"http://cocoapods.org/\">CocoaPods</a> is a dependency manager for Cocoa projects. You can install it with the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install cocoapods</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>CocoaPods 1.1.0+ is required to build JRAlertController 1.0.0</p>\n</blockquote>\n<p>To integrate JRAlertController into your Xcode project using CocoaPods, specify it in your <code>Podfile</code>:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">&#x27;https://github.com/CocoaPods/Specs.git&#x27;</span></span><br><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">&#x27;8.0&#x27;</span></span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&#x27;&lt;Your Target Name&gt;&#x27;</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    pod <span class=\"string\">&#x27;JRAlertController&#x27;</span>, <span class=\"string\">&#x27;~&gt; 1.0。0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Then, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Manually\"><a href=\"#Manually\" class=\"headerlink\" title=\"Manually\"></a>Manually</h4><p>If you prefer not to use either of the aforementioned dependency managers, you can integrate JRAlertController into your project manually.</p>\n<h5 id=\"Embedded-Framework\"><a href=\"#Embedded-Framework\" class=\"headerlink\" title=\"Embedded Framework\"></a>Embedded Framework</h5><ul>\n<li><p>Open up Terminal, <code>cd</code> into your top-level project directory, and run the following command “if” your project is not initialized as a git repository:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add JRAlertController as a git <a href=\"http://git-scm.com/docs/git-submodule\">submodule</a> by running the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git submodule add https://github.com/Jiar/JRAlertController.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Open the new <code>JRAlertController</code> folder, and drag the <code>JRAlertController.xcodeproj</code> into the Project Navigator of your application’s Xcode project.</p>\n<blockquote>\n<p>It should appear nested underneath your application’s blue project icon. Whether it is above or below all the other Xcode groups does not matter.</p>\n</blockquote>\n</li>\n<li><p>Select the <code>JRAlertController.xcodeproj</code> in the Project Navigator and verify the deployment target matches that of your application target.</p>\n</li>\n<li><p>Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the “Targets” heading in the sidebar.</p>\n</li>\n<li><p>In the tab bar at the top of that window, open the “General” panel.</p>\n</li>\n<li><p>Click on the <code>+</code> button under the “Embedded Binaries” section.</p>\n</li>\n<li><p>You will see two different <code>JRAlertController.xcodeproj</code> folders each with two different versions of the <code>JRAlertController.framework</code> nested inside a <code>Products</code> folder.</p>\n<blockquote>\n<p>It does not matter which <code>Products</code> folder you choose from, but it does matter whether you choose the top or bottom <code>JRAlertController.framework</code>.</p>\n</blockquote>\n</li>\n<li><p>Select the top <code>JRAlertController.framework</code> for iOS.</p>\n</li>\n<li><p>And that’s it!</p>\n<blockquote>\n<p>The <code>JRAlertController.framework</code> is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><h4 id=\"JRAlertController-alert-simple\"><a href=\"#JRAlertController-alert-simple\" class=\"headerlink\" title=\"JRAlertController_alert_simple\"></a>JRAlertController_alert_simple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;login tip&quot;</span>, message: <span class=\"string\">&quot;please input account and password&quot;</span>, preferredStyle: .alert)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler:  &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cancel&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> loginAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;login&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(cancelAction)</span><br><span class=\"line\">alertController.addAction(loginAction)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.keyboardType = .<span class=\"keyword\">default</span></span><br><span class=\"line\">    textField.placeholder = <span class=\"string\">&quot;please input account&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.keyboardType = .<span class=\"keyword\">default</span></span><br><span class=\"line\">    textField.isSecureTextEntry = <span class=\"literal\">true</span></span><br><span class=\"line\">    textField.placeholder = <span class=\"string\">&quot;please input password&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\"><span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JRAlertController-alert-multiple\"><a href=\"#JRAlertController-alert-multiple\" class=\"headerlink\" title=\"JRAlertController_alert_multiple\"></a>JRAlertController_alert_multiple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;I am title,I am title,I am title,I am title,I am title&quot;</span>, message: <span class=\"string\">&quot;I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message&quot;</span>, preferredStyle: .alert)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler:  &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cancel&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;delete&quot;</span>, style: .destructive, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;delete&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction1 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive1&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction2 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive2&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive2&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction3 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive3&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive3&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction4 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive4&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive4&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction5 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive5&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive5&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction6 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive6&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive6&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(cancelAction)</span><br><span class=\"line\">alertController.addAction(deleteAction)</span><br><span class=\"line\">alertController.addAction(archiveAction)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .black</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .darkGray</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;darkGray&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .lightGray</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;lightGray&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.backgroundColor = .black</span><br><span class=\"line\">    textField.textColor = .white</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;white&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .gray</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;gray&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .red</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(archiveAction1)</span><br><span class=\"line\">alertController.addAction(archiveAction2)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .green</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;green&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .blue</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .cyan</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;cyan&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .yellow</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;yellow&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .magenta</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;magenta&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .orange</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;orange&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .purple</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;purple&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addTextField(configurationHandler: &#123; (textField: <span class=\"type\">UITextField</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    textField.textColor = .brown</span><br><span class=\"line\">    textField.text = <span class=\"string\">&quot;brown&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(archiveAction3)</span><br><span class=\"line\">alertController.addAction(archiveAction4)</span><br><span class=\"line\">alertController.addAction(archiveAction5)</span><br><span class=\"line\">alertController.addAction(archiveAction6)</span><br><span class=\"line\">alertController.preferredAction  = archiveAction6</span><br><span class=\"line\"><span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\"><span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JRAlertController-sheet-simple\"><a href=\"#JRAlertController-sheet-simple\" class=\"headerlink\" title=\"JRAlertController_sheet_simple\"></a>JRAlertController_sheet_simple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;blog tip&quot;</span>, message: <span class=\"string\">&quot;Please select the option to use the corresponding option to operate your blog&quot;</span>, preferredStyle: .actionSheet)</span><br><span class=\"line\"><span class=\"comment\">// let alertController = JRAlertController(title: &quot;blog tip&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// let alertController = JRAlertController(message: &quot;Please select the option to use the corresponding option to operate your blog&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">// let alertController = JRAlertController()</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> addAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;add&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add blog&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> modifyAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;modify&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;modify blog&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> deleteAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;delete&quot;</span>, style: .destructive, handler: &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;delete blog&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler:  &#123;</span><br><span class=\"line\">          (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cancel&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      alertController.addAction(addAction)</span><br><span class=\"line\">      alertController.addAction(modifyAction)</span><br><span class=\"line\">      alertController.addAction(deleteAction)</span><br><span class=\"line\">      alertController.addAction(cancelAction)</span><br><span class=\"line\">      <span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\">      <span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">      alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JRAlertController-sheet-multiple\"><a href=\"#JRAlertController-sheet-multiple\" class=\"headerlink\" title=\"JRAlertController_sheet_multiple\"></a>JRAlertController_sheet_multiple</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">JRAlertController</span>(title: <span class=\"string\">&quot;I am title,I am title,I am title,I am title,I am title&quot;</span>, message: <span class=\"string\">&quot;I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message, I am message&quot;</span>, preferredStyle: .actionSheet)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;cancel&quot;</span>, style: .cancel, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;delete&quot;</span>, style: .destructive, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction1 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive1&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction2 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive2&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive2&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction3 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive3&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive3&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction4 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive4&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive4&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction5 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive5&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive5&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction6 = <span class=\"type\">JRAlertAction</span>(title: <span class=\"string\">&quot;archive6&quot;</span>, style: .<span class=\"keyword\">default</span>, handler: &#123;</span><br><span class=\"line\">    (action: <span class=\"type\">JRAlertAction!</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;archive6&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">alertController.addAction(cancelAction)</span><br><span class=\"line\">alertController.addAction(deleteAction)</span><br><span class=\"line\">alertController.addAction(archiveAction)</span><br><span class=\"line\">alertController.addAction(archiveAction1)</span><br><span class=\"line\">alertController.addAction(archiveAction2)</span><br><span class=\"line\">alertController.addAction(archiveAction3)</span><br><span class=\"line\">alertController.addAction(archiveAction4)</span><br><span class=\"line\">alertController.addAction(archiveAction5)</span><br><span class=\"line\">alertController.addAction(archiveAction6)</span><br><span class=\"line\"><span class=\"comment\">// must use this function to show JRAlertController</span></span><br><span class=\"line\"><span class=\"comment\">// self is a UIControllerView</span></span><br><span class=\"line\">alertController.jr_show(onRootView: <span class=\"keyword\">self</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3><p>JRAlertController is released under the Apache-2.0 license. See <a href=\"https://raw.githubusercontent.com/Jiar/JRAlertController/master/LICENSE\">LICENSE</a> for details.</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>本文完，大家如何喜欢<code>JRAlertController</code>，欢迎来<a href=\"https://github.com/Jiar/JRAlertController/\">JRAlertController</a>对本项目Star。读者在阅读本文时如有发现错误或不恰当指出，欢迎在评论中指出。如果读者还有一些相关方面的疑问，也欢迎在评论中提出。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"},{"title":"多层 UIScrollView 嵌套滚动解决方案","date":"2019-02-13T10:22:01.000Z","_content":"\n[掘金阅读地址在这里](https://juejin.cn/post/6844903776130695175)\n\n本文旨在对于[SegementSlide](https://github.com/Jiar/SegementSlide)库实现原理的讲解，有兴趣的同学，欢迎前往[Github地址](https://github.com/Jiar/SegementSlide)浏览。\n\n![SegementSlide](Logo.png)\n\n------\n\n#### 背景\n\n如今的app中，越来越多地采用如下图所示的设计，一般用在诸如『用户主页』、『话题详情页』、『专题详情页』等这些场景。通常，这些场景会带有头部视图（头部视图可能要求支持滚动渐变），下面紧接着的是分页控件，最下面是滚动列表。\n\n如下图所示：\n![SegementSlide](transparent.gif)\n\n<!--more-->\n\n#### 各种方案以及优缺点\n\n为了方便下面的说明，在开始之前，先约定几个说法，下面的各种方案，大都离不开在最底层放上一个`UIScrollView`（竖直方向滚动），我们称之为`rootScrollView`。无论分页控件下方有多少个子界面，总有一个当前界面，我们称当前界面下的`UIScrollView`（竖直方向滚动）为`childScrollView`。\n\n##### I 控制`isScrollEnabled`属性\n\n这是我们第一时间能想到的方案，通过给`rootScrollView`和`childScrollView`实现`UIScrollViewDelegate`，并在`func scrollViewDidScroll(_ scrollView: UIScrollView)`方法中实时将`scrollView.contentOffset.y`与临界值进行对比从而修改两者`scrollView`的`isScrollEnabled`属性值来达到目的。\n\n大致代码如下\n```swift\nfunc scrollViewDidScroll(_ scrollView: UIScrollView) {\n    if scrollView == rootScrollView {\n        if scrollView.contentOffset.y >= headerStickyHeight {\n            scrollView.contentOffset.y = headerStickyHeight\n            rootScrollView.isScrollEnabled = false\n            childScrollView.isScrollEnabled = true\n        }\n    } else {\n        if scrollView.contentOffset.y <= 0 {\n            scrollView.contentOffset.y = 0\n            childScrollView.isScrollEnabled = false\n            rootScrollView.isScrollEnabled = true\n        }\n    }\n}\n```\n\n方法简单，但是有个不太能接受的交互问题，但凡将`isScrollEnabled`设置为`false`，这次的滑动手势就会被打断，从表现上来看，就是滑动到临界值时滑动会被中断。\n\n##### II 自定义滑动手势\n\n在这篇文章[这篇文章](https://www.jianshu.com/p/df01610b4e73)中，作者提供了一种利用自定义手势的方式来实现。\n但是，只是添加普通的滑动手势是不够的，`UIScrollView`是自带阻尼效果的，因此引入了`UIDynamicAnimator `来实现阻尼效果。\n这是一种不错的思路。不过完全自定义手势来实现`UIScrollView`的效果，需要考虑的细节过多，挺难处理得跟系统的效果一致（写这篇文章的时候，下载了作者提供的[源码](https://github.com/Junlau/ScrollViewInScrollView)，`commitID`为`ff7b76f8468bc87fea8ea6975d8b9fe1173ab031`，在真机`iPhone X`上运行，感觉还是有交互上的问题）。此外，因为是自定义手势，手势不是直接作用在`UIScrollView`上的，`UIScrollView`的`ScrollIndicator`是无法显示的，通过改变`UIScrollView`的`contentOffset`，其`ScrollIndicator`也是无法显示的，必须要手势作用在`UIScrollView`上才行。使用`UIScrollView`的`flashScrollIndicators()`来强迫`ScrollIndicator`显示出来？...可能还真行，不过我没试过，感觉太粗暴了。\n\n##### III 手势穿透\n\n这应该是目前相对主流的一种实现方式，比如在[这篇文章中](https://www.jianshu.com/p/8bf6c2953da3)，便是介绍了这种方式。据我观察Twitter和微博的用户主页可能是使用这种方式实现的（写这篇文章的时候，Twitter版本为：7.41.2，微博版本为：9.2.0，推测错了的话还望见谅）\n\n该方案的核心为有两点：\n\n- 让滑动手势穿透使得`rootScrollView`和`childScrollView`都能接收到滑动手势（因为手势是作用到`UIScrollview`上的，自然是能显示`ScrollIndicator`的）。做法是让`rootScrollView`实现`UIGestureRecognizerDelegate`的代理方法`func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool`，并在适当的时机返回`true`。\n\n这部分的代码大致如下：\n```swift\nclass SegementSlideScrollView: UIScrollView, UIGestureRecognizerDelegate {\n    \n    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n        return true\n    }\n    \n}\n```\n\n当然只是如此的话，是不够的，这样的结果是滑动的时候，导致`rootScrollView`和`childScrollView`一起滚动。\n\n- 增加两个标志位来控制何时允许`rootScrollView`滚动，以及何时允许`childScrollView`。\n\n这部分代码大致如下：\n```swift\nfunc scrollViewDidScroll(_ scrollView: UIScrollView) {\n    if scrollView == rootScrollView {\n        if !canParentViewScroll {\n            rootScrollView.contentOffset.y = headerStickyHeight // point A\n            canChildViewScroll = true\n        } else if scrollView.contentOffset.y >= headerStickyHeight {\n            rootScrollView.contentOffset.y = headerStickyHeight\n            canParentViewScroll = false\n            canChildViewScroll = true\n        }\n    } else {\n        if !canChildViewScroll {\n            childScrollView.contentOffset.y = 0 // point B\n        } else if scrollView.contentOffset.y <= 0 {\n            canChildViewScroll = false\n            canParentViewScroll = true\n        }\n    }\n}\n```\n\n如上代码所示，控制`rootScrollView`或者是`childScrollView`不可滚动的方式是将两者的`contentOffset.y`设置为一个固定值（见注释`point A`和`point B`），并不是简单地将`isScrollEnabled`设置`false`而已。\n\n 没问题了？不，也是有不足之处的：\n***在第一个界面使用手指向上滑动，让头部视图完全被隐藏后再向上滑动一些，让`childScrollView`的`contentOffset.y`处于大于`0`的状态，随后，左右切换到第二个界面，使用手指向下滑动，完全拉出头部视图，然后再切换回第一个界面，这个时候，使用手指在屏幕上稍微滑动一下，`rootScrollView`或是`childScrollView`的`contentOffset.y`会突变，从表现上看，就是发生『位置突变现象』***\n\n问题产生的原因是什么？\n`canParentViewScroll`和`childScrollView`始终为一对相反的值，浏览上诉代码，会发现在`point A`和`point B`处，将`rootScrollView`或者是`childScrollView`的`contentOffset.y`设置为了一个固定值。这样的处理，当始终在同一个界面滑动的时候，不会有问题，但是，在切换界面后，由于`rootScrollView`是共用的，在新界面改动了`rootScrollView`的`contentOffset.y`，切换回原界面后，稍做滑动，定会执行`point A`或是`point B`其中的一处代码，从而导致『位置突变现象』。\n\n在微博和Twitter中对此问题做了简单的处理。微博上，在切换至新界面之前，将原界面的`childScrollView`的`contentOffset.y`值重置为了`0`。Twitter上，则是在合适的时机做了重置。这也是推测两者可能是使用了该方案的原因。\n\n如下图所示：\n![weibo](weibo.gif)\n![twitter](twitter.gif)\n\n#### SegementSlide的需求\n[SegementSlide](https://github.com/Jiar/SegementSlide)是使用 **方案III** 来实现的。\n\n此外我希望它还能支持一些别的特性：\n1. 简单易用的接口\n2. 一般使用 方案III 实现的例子，大都只是支持在`rootScrollView`上实现阻尼效果，我希望也能在`childScrollView`上实现，可以选择任意一个阻尼来使用。（有阻尼，就可以配套下拉刷新工具来使用了）\n3. 一般使用 方案III 实现的例子，大都是需要手指在子视图部分滑动才能实现联动，希望也能在头部滑动实现联动\n4. 既可以支持使用头部视图，也可以不需要头部视图\n5. 头部视图可以使用简单的接口实现滚动渐变效果（`navigation`上随着滚动改变背景色、标题、leftItem颜色、rightItem颜色，或是背景色透明之类的），也可以自定义渐变效果\n6. 子控件既可结合一起使用，也可以单独使用\n7. 分页标题旁可以显示红点\n...\n\n对此，大都已经实现：\n1. 看下如下示例代码，是否还算简单易用：\n\n```swift\nimport SegementSlide\n\nclass HomeViewController: SegementSlideViewController {\n\n    ......\n\n    override var headerHeight: CGFloat? {\n        return view.bounds.height/4\n    }\n    \n    override var headerView: UIView? {\n        return UIView()\n    }\n\n    override var titlesInSwitcher: [String] {\n        return [\"Swift\", \"Ruby\", \"Kotlin\"]\n    }\n\n    override func segementSlideContentViewController(at index: Int) -> SegementSlideContentScrollViewDelegate? {\n        return ContentViewController()\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        canCacheScrollState = true\n        reloadData()\n        scrollToSlide(at: 0, animated: false)\n    }\n\n}\n```\n\n```swift\nimport SegementSlide\n\nclass ContentViewController: UITableViewController, SegementSlideContentScrollViewDelegate {\n\n    ......\n\n    @objc var scrollView: UIScrollView {\n        return tableView\n    }\n\n}\n```\n\n2. 已经能否支持“父阻尼”和“子阻尼”效果了\n\n重写`SegementSlideViewController`的属性`bouncesType`，它是一个枚举类型：\n\n```swift\nenum BouncesType {\n    case parent\n    case child\n}\n```\n\n默认值为`.parent`，如下重写，即可实现『子阻尼』效果：\n\n```\nclass HomeViewController: SegementSlideViewController {\n\n    ......\n\n    override var bouncesType: BouncesType {\n        return .child\n    }\n}\n```\n\n3. 如何使得在头部滑动也能实现滚动联动效果？\n我在`SegementSlideHeaderView`中重写了方法`func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView?`，在合适的情况下返回了`childScrollView`。目前这不是一个最优的方法，因为我没能够在这个方法中判断出这个事件是滑动还是点击事件，这里还可以优化。\n\n4. 既可以支持使用头部视图，也可以不需要头部视图\n`SegementSlideViewController`是实现这套方案的基类，其中有一个`headerView`属性，该属性为可选值，返回`nil`则表示不需要头部视图。我在项目配套的`Example`工程中，其中的首页便是没有头部视图的示例，不过增加了下拉显示`navigation`、上滑隐藏`navigation`的效果。一般使用 方案III 的例子，在`rootScrollView`上使用了`UITableView`，为了使用`UITableView`的`tableHeaderView`属性，以及吸顶效果。`SegementSlide`在`v1`版本的时候，使用了`UICollectionView`，也是处于同样的目的，现`v2`已经改成了`UIScrollView`，吸顶效果的话，可以通过增加一条到`view.safeAreaLayoutGuide.topAnchor`的约束来实现。\n\n5. 快速应用头部渐变效果？\n`TransparentSlideViewController`是继承于`SegementSlideViewController`的子类，其中的`headerView`属性已被改成非可选值。其中另外定义了一些属性，用于头部视图处于『显示状态』或是『嵌入状态』时，`titleView`和`navigationBar`对应属性的改动。\n\n如下所示：\n\n```\ntypealias DisplayEmbed<T> = (display: T, embed: T)\n\noverride var isTranslucents: DisplayEmbed<Bool> {\n    return (true, false)\n}\n\noverride var attributedTexts: DisplayEmbed<NSAttributedString?> {\n    return (nil, nil)\n}\n\noverride var barStyles: DisplayEmbed<UIBarStyle> {\n    return (.black, .default)\n}\n\noverride var barTintColors: DisplayEmbed<UIColor?> {\n    return (nil, .white)\n}\n\noverride var tintColors: DisplayEmbed<UIColor> {\n    return (.white, .black)\n}\n```\n\n其中`DisplayEmbed`为一个`typealias`表示『显示状态』或是『嵌入状态』时的值。\n\n需要注意的是：\n- `TransparentSlideViewController`中的`titleView`是使用自定义的方式并赋值给`navigationItem.titleView`来实现的，最先考虑的是修改`navigationBar`的`titleTextAttributes`属性，实践下来，发现会出现`titleTextAttributes`已经修改完毕，但是效果没有改变的情况。\n- `TransparentSlideViewController`会在`viewWillAppear`时保存`navigation`上对应样式的状态，并在`viewWillDisappear`时进行还原，来保证从一个`TransparentSlideViewController`（A）进入到另一个`TransparentSlideViewController`（B）时，`navigation`上样式的状态不会有错误，所以也不该在`viewDidLoad`时修改`navigation`上的样式，因为`B`的`viewDidLoad`先于`A`的`viewWillDisappear`执行。\n\n如果需要自定义渐变效果，可以模仿`TransparentSlideViewController`继承`SegementSlideViewController`来实现需要的效果。`Example`中使用的是原生的`UINavigationController`，和`TransparentSlideViewController`配合起来，可以做到还算满意的效果。但是，实际情况下每个项目中可能会去改动默认的`navigation`，如果`TransparentSlideViewController`不适用，则需要使用自定义的方式来支持已有项目。\n\n6. 子控件既可结合一起使用，也可以单独使用\n目前`SegementSlideSwitcherView`和`SegementSlideContentView`既可以作为`SegementSlideViewController`的子控件来使用，也可以单独拿出来使用，`Example`工程中的`NoticeViewController`便是单独使用的例子，实现了将`switcher`放在`navigation`上的效果。\n\n7. 红点显示？\n`SegementSlideSwitcherView`支持了红点显示\n\n```swift\nenum BadgeType {\n    case none\n    case point\n    case count(Int)\n}\n```\n\n红点类型为枚举值，从上述代码可以看出红点是支持『普通红点显示』还有『带数字红点显示』。\n\n#### 还需要优化的点\n\n1. 上面在第3点已经提到，『头部滑动也能实现滚动联动效果』目前对此的解决方法不是最优。\n\n2. 方案III 所提到的『位置突变现象』，我在`SegementSlideViewController`中提供了`canCacheScrollState`属性，值为`true`时，在切换界面的时候会缓存当前的`canParentViewScroll`、`canChildViewScroll`以及`rootScrollView`的`contentOffset.y`值，并在切换回该界面的时候恢复；值为`false`时，即为类似微博的处理，在切换到新界面前将当前界面的`childScrollView`的`contentOffset.y`值置为`0`。设置为`true`时会有一个效果，担心这个效果难以被接受，故将该值的默认值设置为了`false`。\n\n效果如下：\n![canCacheScrollState](canCacheScrollState.gif)\n\n但这仍不是一个很好的处理方式。\n\n3. 联动滚动切换的时候，还没有达到完美的流畅效果。由于`point A`和`point B`处将`contentOffset.y`强制设值来阻止滚动，同时也导致了滚动切换时『动能』不足的结果，也就是还不够流畅。\n\n#### 接下去要做的事\n\n自然是要解决上面提到的三点不足的地方，要想让联动完美般流畅，还是需要使用一个滚动，而不是两个。我在本地开了个`v3`分支做了个尝试，在视图顶层覆盖一层透明的`UIScrollView`，借用它的手势、它的`contentOffset`来控制`rootScrollView`和`childScrollView`的`contentOffset`，可以解决上述提到的三个需要优化的点，但是同时也带来了其他好多问题，这里就不细说了，哪天问题都解决了，更新了`v3`版本，再来补充说明吧。\n\n\n#### 参考\n- [iOS 嵌套UIScrollview的滑动冲突另一种解决方案](https://www.jianshu.com/p/df01610b4e73)\n- [iOS scrollView嵌套tableView的手势冲突解决方案](https://www.jianshu.com/p/8bf6c2953da3)\n\n#### 结束语\n编写本文时，[SegementSlide](https://github.com/Jiar/SegementSlide)的版本号为`2.0-beta-13`。另外，本站还未开通评论功能，如对本文中的内容存在疑问，或者发现文中的不正确之处，欢迎在本文的[掘金地址](https://juejin.im/post/6844903776130695175)评论区中**友善**提出。如对本项目有任何疑问，欢迎前往[issues](https://github.com/Jiar/SegementSlide/issues)提出，同时也欢迎来[Pull requests](https://github.com/Jiar/SegementSlide/pulls)，为本项目做贡献。\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","source":"_posts/Multi-tier-UIScrollView-nested-scrolling-solution.md","raw":"---\ntitle: 多层 UIScrollView 嵌套滚动解决方案\ndate: 2019-02-13 18:22:01\ncategories: iOS\ntags:\n- iOS\n- UIScrollView\n- 嵌套\n---\n\n[掘金阅读地址在这里](https://juejin.cn/post/6844903776130695175)\n\n本文旨在对于[SegementSlide](https://github.com/Jiar/SegementSlide)库实现原理的讲解，有兴趣的同学，欢迎前往[Github地址](https://github.com/Jiar/SegementSlide)浏览。\n\n![SegementSlide](Logo.png)\n\n------\n\n#### 背景\n\n如今的app中，越来越多地采用如下图所示的设计，一般用在诸如『用户主页』、『话题详情页』、『专题详情页』等这些场景。通常，这些场景会带有头部视图（头部视图可能要求支持滚动渐变），下面紧接着的是分页控件，最下面是滚动列表。\n\n如下图所示：\n![SegementSlide](transparent.gif)\n\n<!--more-->\n\n#### 各种方案以及优缺点\n\n为了方便下面的说明，在开始之前，先约定几个说法，下面的各种方案，大都离不开在最底层放上一个`UIScrollView`（竖直方向滚动），我们称之为`rootScrollView`。无论分页控件下方有多少个子界面，总有一个当前界面，我们称当前界面下的`UIScrollView`（竖直方向滚动）为`childScrollView`。\n\n##### I 控制`isScrollEnabled`属性\n\n这是我们第一时间能想到的方案，通过给`rootScrollView`和`childScrollView`实现`UIScrollViewDelegate`，并在`func scrollViewDidScroll(_ scrollView: UIScrollView)`方法中实时将`scrollView.contentOffset.y`与临界值进行对比从而修改两者`scrollView`的`isScrollEnabled`属性值来达到目的。\n\n大致代码如下\n```swift\nfunc scrollViewDidScroll(_ scrollView: UIScrollView) {\n    if scrollView == rootScrollView {\n        if scrollView.contentOffset.y >= headerStickyHeight {\n            scrollView.contentOffset.y = headerStickyHeight\n            rootScrollView.isScrollEnabled = false\n            childScrollView.isScrollEnabled = true\n        }\n    } else {\n        if scrollView.contentOffset.y <= 0 {\n            scrollView.contentOffset.y = 0\n            childScrollView.isScrollEnabled = false\n            rootScrollView.isScrollEnabled = true\n        }\n    }\n}\n```\n\n方法简单，但是有个不太能接受的交互问题，但凡将`isScrollEnabled`设置为`false`，这次的滑动手势就会被打断，从表现上来看，就是滑动到临界值时滑动会被中断。\n\n##### II 自定义滑动手势\n\n在这篇文章[这篇文章](https://www.jianshu.com/p/df01610b4e73)中，作者提供了一种利用自定义手势的方式来实现。\n但是，只是添加普通的滑动手势是不够的，`UIScrollView`是自带阻尼效果的，因此引入了`UIDynamicAnimator `来实现阻尼效果。\n这是一种不错的思路。不过完全自定义手势来实现`UIScrollView`的效果，需要考虑的细节过多，挺难处理得跟系统的效果一致（写这篇文章的时候，下载了作者提供的[源码](https://github.com/Junlau/ScrollViewInScrollView)，`commitID`为`ff7b76f8468bc87fea8ea6975d8b9fe1173ab031`，在真机`iPhone X`上运行，感觉还是有交互上的问题）。此外，因为是自定义手势，手势不是直接作用在`UIScrollView`上的，`UIScrollView`的`ScrollIndicator`是无法显示的，通过改变`UIScrollView`的`contentOffset`，其`ScrollIndicator`也是无法显示的，必须要手势作用在`UIScrollView`上才行。使用`UIScrollView`的`flashScrollIndicators()`来强迫`ScrollIndicator`显示出来？...可能还真行，不过我没试过，感觉太粗暴了。\n\n##### III 手势穿透\n\n这应该是目前相对主流的一种实现方式，比如在[这篇文章中](https://www.jianshu.com/p/8bf6c2953da3)，便是介绍了这种方式。据我观察Twitter和微博的用户主页可能是使用这种方式实现的（写这篇文章的时候，Twitter版本为：7.41.2，微博版本为：9.2.0，推测错了的话还望见谅）\n\n该方案的核心为有两点：\n\n- 让滑动手势穿透使得`rootScrollView`和`childScrollView`都能接收到滑动手势（因为手势是作用到`UIScrollview`上的，自然是能显示`ScrollIndicator`的）。做法是让`rootScrollView`实现`UIGestureRecognizerDelegate`的代理方法`func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool`，并在适当的时机返回`true`。\n\n这部分的代码大致如下：\n```swift\nclass SegementSlideScrollView: UIScrollView, UIGestureRecognizerDelegate {\n    \n    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n        return true\n    }\n    \n}\n```\n\n当然只是如此的话，是不够的，这样的结果是滑动的时候，导致`rootScrollView`和`childScrollView`一起滚动。\n\n- 增加两个标志位来控制何时允许`rootScrollView`滚动，以及何时允许`childScrollView`。\n\n这部分代码大致如下：\n```swift\nfunc scrollViewDidScroll(_ scrollView: UIScrollView) {\n    if scrollView == rootScrollView {\n        if !canParentViewScroll {\n            rootScrollView.contentOffset.y = headerStickyHeight // point A\n            canChildViewScroll = true\n        } else if scrollView.contentOffset.y >= headerStickyHeight {\n            rootScrollView.contentOffset.y = headerStickyHeight\n            canParentViewScroll = false\n            canChildViewScroll = true\n        }\n    } else {\n        if !canChildViewScroll {\n            childScrollView.contentOffset.y = 0 // point B\n        } else if scrollView.contentOffset.y <= 0 {\n            canChildViewScroll = false\n            canParentViewScroll = true\n        }\n    }\n}\n```\n\n如上代码所示，控制`rootScrollView`或者是`childScrollView`不可滚动的方式是将两者的`contentOffset.y`设置为一个固定值（见注释`point A`和`point B`），并不是简单地将`isScrollEnabled`设置`false`而已。\n\n 没问题了？不，也是有不足之处的：\n***在第一个界面使用手指向上滑动，让头部视图完全被隐藏后再向上滑动一些，让`childScrollView`的`contentOffset.y`处于大于`0`的状态，随后，左右切换到第二个界面，使用手指向下滑动，完全拉出头部视图，然后再切换回第一个界面，这个时候，使用手指在屏幕上稍微滑动一下，`rootScrollView`或是`childScrollView`的`contentOffset.y`会突变，从表现上看，就是发生『位置突变现象』***\n\n问题产生的原因是什么？\n`canParentViewScroll`和`childScrollView`始终为一对相反的值，浏览上诉代码，会发现在`point A`和`point B`处，将`rootScrollView`或者是`childScrollView`的`contentOffset.y`设置为了一个固定值。这样的处理，当始终在同一个界面滑动的时候，不会有问题，但是，在切换界面后，由于`rootScrollView`是共用的，在新界面改动了`rootScrollView`的`contentOffset.y`，切换回原界面后，稍做滑动，定会执行`point A`或是`point B`其中的一处代码，从而导致『位置突变现象』。\n\n在微博和Twitter中对此问题做了简单的处理。微博上，在切换至新界面之前，将原界面的`childScrollView`的`contentOffset.y`值重置为了`0`。Twitter上，则是在合适的时机做了重置。这也是推测两者可能是使用了该方案的原因。\n\n如下图所示：\n![weibo](weibo.gif)\n![twitter](twitter.gif)\n\n#### SegementSlide的需求\n[SegementSlide](https://github.com/Jiar/SegementSlide)是使用 **方案III** 来实现的。\n\n此外我希望它还能支持一些别的特性：\n1. 简单易用的接口\n2. 一般使用 方案III 实现的例子，大都只是支持在`rootScrollView`上实现阻尼效果，我希望也能在`childScrollView`上实现，可以选择任意一个阻尼来使用。（有阻尼，就可以配套下拉刷新工具来使用了）\n3. 一般使用 方案III 实现的例子，大都是需要手指在子视图部分滑动才能实现联动，希望也能在头部滑动实现联动\n4. 既可以支持使用头部视图，也可以不需要头部视图\n5. 头部视图可以使用简单的接口实现滚动渐变效果（`navigation`上随着滚动改变背景色、标题、leftItem颜色、rightItem颜色，或是背景色透明之类的），也可以自定义渐变效果\n6. 子控件既可结合一起使用，也可以单独使用\n7. 分页标题旁可以显示红点\n...\n\n对此，大都已经实现：\n1. 看下如下示例代码，是否还算简单易用：\n\n```swift\nimport SegementSlide\n\nclass HomeViewController: SegementSlideViewController {\n\n    ......\n\n    override var headerHeight: CGFloat? {\n        return view.bounds.height/4\n    }\n    \n    override var headerView: UIView? {\n        return UIView()\n    }\n\n    override var titlesInSwitcher: [String] {\n        return [\"Swift\", \"Ruby\", \"Kotlin\"]\n    }\n\n    override func segementSlideContentViewController(at index: Int) -> SegementSlideContentScrollViewDelegate? {\n        return ContentViewController()\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        canCacheScrollState = true\n        reloadData()\n        scrollToSlide(at: 0, animated: false)\n    }\n\n}\n```\n\n```swift\nimport SegementSlide\n\nclass ContentViewController: UITableViewController, SegementSlideContentScrollViewDelegate {\n\n    ......\n\n    @objc var scrollView: UIScrollView {\n        return tableView\n    }\n\n}\n```\n\n2. 已经能否支持“父阻尼”和“子阻尼”效果了\n\n重写`SegementSlideViewController`的属性`bouncesType`，它是一个枚举类型：\n\n```swift\nenum BouncesType {\n    case parent\n    case child\n}\n```\n\n默认值为`.parent`，如下重写，即可实现『子阻尼』效果：\n\n```\nclass HomeViewController: SegementSlideViewController {\n\n    ......\n\n    override var bouncesType: BouncesType {\n        return .child\n    }\n}\n```\n\n3. 如何使得在头部滑动也能实现滚动联动效果？\n我在`SegementSlideHeaderView`中重写了方法`func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView?`，在合适的情况下返回了`childScrollView`。目前这不是一个最优的方法，因为我没能够在这个方法中判断出这个事件是滑动还是点击事件，这里还可以优化。\n\n4. 既可以支持使用头部视图，也可以不需要头部视图\n`SegementSlideViewController`是实现这套方案的基类，其中有一个`headerView`属性，该属性为可选值，返回`nil`则表示不需要头部视图。我在项目配套的`Example`工程中，其中的首页便是没有头部视图的示例，不过增加了下拉显示`navigation`、上滑隐藏`navigation`的效果。一般使用 方案III 的例子，在`rootScrollView`上使用了`UITableView`，为了使用`UITableView`的`tableHeaderView`属性，以及吸顶效果。`SegementSlide`在`v1`版本的时候，使用了`UICollectionView`，也是处于同样的目的，现`v2`已经改成了`UIScrollView`，吸顶效果的话，可以通过增加一条到`view.safeAreaLayoutGuide.topAnchor`的约束来实现。\n\n5. 快速应用头部渐变效果？\n`TransparentSlideViewController`是继承于`SegementSlideViewController`的子类，其中的`headerView`属性已被改成非可选值。其中另外定义了一些属性，用于头部视图处于『显示状态』或是『嵌入状态』时，`titleView`和`navigationBar`对应属性的改动。\n\n如下所示：\n\n```\ntypealias DisplayEmbed<T> = (display: T, embed: T)\n\noverride var isTranslucents: DisplayEmbed<Bool> {\n    return (true, false)\n}\n\noverride var attributedTexts: DisplayEmbed<NSAttributedString?> {\n    return (nil, nil)\n}\n\noverride var barStyles: DisplayEmbed<UIBarStyle> {\n    return (.black, .default)\n}\n\noverride var barTintColors: DisplayEmbed<UIColor?> {\n    return (nil, .white)\n}\n\noverride var tintColors: DisplayEmbed<UIColor> {\n    return (.white, .black)\n}\n```\n\n其中`DisplayEmbed`为一个`typealias`表示『显示状态』或是『嵌入状态』时的值。\n\n需要注意的是：\n- `TransparentSlideViewController`中的`titleView`是使用自定义的方式并赋值给`navigationItem.titleView`来实现的，最先考虑的是修改`navigationBar`的`titleTextAttributes`属性，实践下来，发现会出现`titleTextAttributes`已经修改完毕，但是效果没有改变的情况。\n- `TransparentSlideViewController`会在`viewWillAppear`时保存`navigation`上对应样式的状态，并在`viewWillDisappear`时进行还原，来保证从一个`TransparentSlideViewController`（A）进入到另一个`TransparentSlideViewController`（B）时，`navigation`上样式的状态不会有错误，所以也不该在`viewDidLoad`时修改`navigation`上的样式，因为`B`的`viewDidLoad`先于`A`的`viewWillDisappear`执行。\n\n如果需要自定义渐变效果，可以模仿`TransparentSlideViewController`继承`SegementSlideViewController`来实现需要的效果。`Example`中使用的是原生的`UINavigationController`，和`TransparentSlideViewController`配合起来，可以做到还算满意的效果。但是，实际情况下每个项目中可能会去改动默认的`navigation`，如果`TransparentSlideViewController`不适用，则需要使用自定义的方式来支持已有项目。\n\n6. 子控件既可结合一起使用，也可以单独使用\n目前`SegementSlideSwitcherView`和`SegementSlideContentView`既可以作为`SegementSlideViewController`的子控件来使用，也可以单独拿出来使用，`Example`工程中的`NoticeViewController`便是单独使用的例子，实现了将`switcher`放在`navigation`上的效果。\n\n7. 红点显示？\n`SegementSlideSwitcherView`支持了红点显示\n\n```swift\nenum BadgeType {\n    case none\n    case point\n    case count(Int)\n}\n```\n\n红点类型为枚举值，从上述代码可以看出红点是支持『普通红点显示』还有『带数字红点显示』。\n\n#### 还需要优化的点\n\n1. 上面在第3点已经提到，『头部滑动也能实现滚动联动效果』目前对此的解决方法不是最优。\n\n2. 方案III 所提到的『位置突变现象』，我在`SegementSlideViewController`中提供了`canCacheScrollState`属性，值为`true`时，在切换界面的时候会缓存当前的`canParentViewScroll`、`canChildViewScroll`以及`rootScrollView`的`contentOffset.y`值，并在切换回该界面的时候恢复；值为`false`时，即为类似微博的处理，在切换到新界面前将当前界面的`childScrollView`的`contentOffset.y`值置为`0`。设置为`true`时会有一个效果，担心这个效果难以被接受，故将该值的默认值设置为了`false`。\n\n效果如下：\n![canCacheScrollState](canCacheScrollState.gif)\n\n但这仍不是一个很好的处理方式。\n\n3. 联动滚动切换的时候，还没有达到完美的流畅效果。由于`point A`和`point B`处将`contentOffset.y`强制设值来阻止滚动，同时也导致了滚动切换时『动能』不足的结果，也就是还不够流畅。\n\n#### 接下去要做的事\n\n自然是要解决上面提到的三点不足的地方，要想让联动完美般流畅，还是需要使用一个滚动，而不是两个。我在本地开了个`v3`分支做了个尝试，在视图顶层覆盖一层透明的`UIScrollView`，借用它的手势、它的`contentOffset`来控制`rootScrollView`和`childScrollView`的`contentOffset`，可以解决上述提到的三个需要优化的点，但是同时也带来了其他好多问题，这里就不细说了，哪天问题都解决了，更新了`v3`版本，再来补充说明吧。\n\n\n#### 参考\n- [iOS 嵌套UIScrollview的滑动冲突另一种解决方案](https://www.jianshu.com/p/df01610b4e73)\n- [iOS scrollView嵌套tableView的手势冲突解决方案](https://www.jianshu.com/p/8bf6c2953da3)\n\n#### 结束语\n编写本文时，[SegementSlide](https://github.com/Jiar/SegementSlide)的版本号为`2.0-beta-13`。另外，本站还未开通评论功能，如对本文中的内容存在疑问，或者发现文中的不正确之处，欢迎在本文的[掘金地址](https://juejin.im/post/6844903776130695175)评论区中**友善**提出。如对本项目有任何疑问，欢迎前往[issues](https://github.com/Jiar/SegementSlide/issues)提出，同时也欢迎来[Pull requests](https://github.com/Jiar/SegementSlide/pulls)，为本项目做贡献。\n\n欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。\n\n![Jiar's 微信订阅号](/images/Dingyuehao.jpg)\n\n","slug":"Multi-tier-UIScrollView-nested-scrolling-solution","published":1,"updated":"2022-02-14T09:22:35.784Z","_id":"ckzmgah0s00000i8s4q88e9iz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://juejin.cn/post/6844903776130695175\">掘金阅读地址在这里</a></p>\n<p>本文旨在对于<a href=\"https://github.com/Jiar/SegementSlide\">SegementSlide</a>库实现原理的讲解，有兴趣的同学，欢迎前往<a href=\"https://github.com/Jiar/SegementSlide\">Github地址</a>浏览。</p>\n<p><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/Logo.png\" alt=\"SegementSlide\"></p>\n<hr>\n<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>如今的app中，越来越多地采用如下图所示的设计，一般用在诸如『用户主页』、『话题详情页』、『专题详情页』等这些场景。通常，这些场景会带有头部视图（头部视图可能要求支持滚动渐变），下面紧接着的是分页控件，最下面是滚动列表。</p>\n<p>如下图所示：<br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/transparent.gif\" alt=\"SegementSlide\"></p>\n<a id=\"more\"></a>\n\n<h4 id=\"各种方案以及优缺点\"><a href=\"#各种方案以及优缺点\" class=\"headerlink\" title=\"各种方案以及优缺点\"></a>各种方案以及优缺点</h4><p>为了方便下面的说明，在开始之前，先约定几个说法，下面的各种方案，大都离不开在最底层放上一个<code>UIScrollView</code>（竖直方向滚动），我们称之为<code>rootScrollView</code>。无论分页控件下方有多少个子界面，总有一个当前界面，我们称当前界面下的<code>UIScrollView</code>（竖直方向滚动）为<code>childScrollView</code>。</p>\n<h5 id=\"I-控制isScrollEnabled属性\"><a href=\"#I-控制isScrollEnabled属性\" class=\"headerlink\" title=\"I 控制isScrollEnabled属性\"></a>I 控制<code>isScrollEnabled</code>属性</h5><p>这是我们第一时间能想到的方案，通过给<code>rootScrollView</code>和<code>childScrollView</code>实现<code>UIScrollViewDelegate</code>，并在<code>func scrollViewDidScroll(_ scrollView: UIScrollView)</code>方法中实时将<code>scrollView.contentOffset.y</code>与临界值进行对比从而修改两者<code>scrollView</code>的<code>isScrollEnabled</code>属性值来达到目的。</p>\n<p>大致代码如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> scrollView == rootScrollView &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> scrollView.contentOffset.y &gt;= headerStickyHeight &#123;</span><br><span class=\"line\">            scrollView.contentOffset.y = headerStickyHeight</span><br><span class=\"line\">            rootScrollView.isScrollEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">            childScrollView.isScrollEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> scrollView.contentOffset.y &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            scrollView.contentOffset.y = <span class=\"number\">0</span></span><br><span class=\"line\">            childScrollView.isScrollEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">            rootScrollView.isScrollEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法简单，但是有个不太能接受的交互问题，但凡将<code>isScrollEnabled</code>设置为<code>false</code>，这次的滑动手势就会被打断，从表现上来看，就是滑动到临界值时滑动会被中断。</p>\n<h5 id=\"II-自定义滑动手势\"><a href=\"#II-自定义滑动手势\" class=\"headerlink\" title=\"II 自定义滑动手势\"></a>II 自定义滑动手势</h5><p>在这篇文章<a href=\"https://www.jianshu.com/p/df01610b4e73\">这篇文章</a>中，作者提供了一种利用自定义手势的方式来实现。<br>但是，只是添加普通的滑动手势是不够的，<code>UIScrollView</code>是自带阻尼效果的，因此引入了<code>UIDynamicAnimator </code>来实现阻尼效果。<br>这是一种不错的思路。不过完全自定义手势来实现<code>UIScrollView</code>的效果，需要考虑的细节过多，挺难处理得跟系统的效果一致（写这篇文章的时候，下载了作者提供的<a href=\"https://github.com/Junlau/ScrollViewInScrollView\">源码</a>，<code>commitID</code>为<code>ff7b76f8468bc87fea8ea6975d8b9fe1173ab031</code>，在真机<code>iPhone X</code>上运行，感觉还是有交互上的问题）。此外，因为是自定义手势，手势不是直接作用在<code>UIScrollView</code>上的，<code>UIScrollView</code>的<code>ScrollIndicator</code>是无法显示的，通过改变<code>UIScrollView</code>的<code>contentOffset</code>，其<code>ScrollIndicator</code>也是无法显示的，必须要手势作用在<code>UIScrollView</code>上才行。使用<code>UIScrollView</code>的<code>flashScrollIndicators()</code>来强迫<code>ScrollIndicator</code>显示出来？…可能还真行，不过我没试过，感觉太粗暴了。</p>\n<h5 id=\"III-手势穿透\"><a href=\"#III-手势穿透\" class=\"headerlink\" title=\"III 手势穿透\"></a>III 手势穿透</h5><p>这应该是目前相对主流的一种实现方式，比如在<a href=\"https://www.jianshu.com/p/8bf6c2953da3\">这篇文章中</a>，便是介绍了这种方式。据我观察Twitter和微博的用户主页可能是使用这种方式实现的（写这篇文章的时候，Twitter版本为：7.41.2，微博版本为：9.2.0，推测错了的话还望见谅）</p>\n<p>该方案的核心为有两点：</p>\n<ul>\n<li>让滑动手势穿透使得<code>rootScrollView</code>和<code>childScrollView</code>都能接收到滑动手势（因为手势是作用到<code>UIScrollview</code>上的，自然是能显示<code>ScrollIndicator</code>的）。做法是让<code>rootScrollView</code>实现<code>UIGestureRecognizerDelegate</code>的代理方法<code>func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -&gt; Bool</code>，并在适当的时机返回<code>true</code>。</li>\n</ul>\n<p>这部分的代码大致如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SegementSlideScrollView</span>: <span class=\"title\">UIScrollView</span>, <span class=\"title\">UIGestureRecognizerDelegate</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gestureRecognizer</span><span class=\"params\">(<span class=\"number\">_</span> gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然只是如此的话，是不够的，这样的结果是滑动的时候，导致<code>rootScrollView</code>和<code>childScrollView</code>一起滚动。</p>\n<ul>\n<li>增加两个标志位来控制何时允许<code>rootScrollView</code>滚动，以及何时允许<code>childScrollView</code>。</li>\n</ul>\n<p>这部分代码大致如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> scrollView == rootScrollView &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !canParentViewScroll &#123;</span><br><span class=\"line\">            rootScrollView.contentOffset.y = headerStickyHeight <span class=\"comment\">// point A</span></span><br><span class=\"line\">            canChildViewScroll = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> scrollView.contentOffset.y &gt;= headerStickyHeight &#123;</span><br><span class=\"line\">            rootScrollView.contentOffset.y = headerStickyHeight</span><br><span class=\"line\">            canParentViewScroll = <span class=\"literal\">false</span></span><br><span class=\"line\">            canChildViewScroll = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !canChildViewScroll &#123;</span><br><span class=\"line\">            childScrollView.contentOffset.y = <span class=\"number\">0</span> <span class=\"comment\">// point B</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> scrollView.contentOffset.y &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            canChildViewScroll = <span class=\"literal\">false</span></span><br><span class=\"line\">            canParentViewScroll = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码所示，控制<code>rootScrollView</code>或者是<code>childScrollView</code>不可滚动的方式是将两者的<code>contentOffset.y</code>设置为一个固定值（见注释<code>point A</code>和<code>point B</code>），并不是简单地将<code>isScrollEnabled</code>设置<code>false</code>而已。</p>\n<p> 没问题了？不，也是有不足之处的：<br>**<em>在第一个界面使用手指向上滑动，让头部视图完全被隐藏后再向上滑动一些，让<code>childScrollView</code>的<code>contentOffset.y</code>处于大于<code>0</code>的状态，随后，左右切换到第二个界面，使用手指向下滑动，完全拉出头部视图，然后再切换回第一个界面，这个时候，使用手指在屏幕上稍微滑动一下，<code>rootScrollView</code>或是<code>childScrollView</code>的<code>contentOffset.y</code>会突变，从表现上看，就是发生『位置突变现象』**</em></p>\n<p>问题产生的原因是什么？<br><code>canParentViewScroll</code>和<code>childScrollView</code>始终为一对相反的值，浏览上诉代码，会发现在<code>point A</code>和<code>point B</code>处，将<code>rootScrollView</code>或者是<code>childScrollView</code>的<code>contentOffset.y</code>设置为了一个固定值。这样的处理，当始终在同一个界面滑动的时候，不会有问题，但是，在切换界面后，由于<code>rootScrollView</code>是共用的，在新界面改动了<code>rootScrollView</code>的<code>contentOffset.y</code>，切换回原界面后，稍做滑动，定会执行<code>point A</code>或是<code>point B</code>其中的一处代码，从而导致『位置突变现象』。</p>\n<p>在微博和Twitter中对此问题做了简单的处理。微博上，在切换至新界面之前，将原界面的<code>childScrollView</code>的<code>contentOffset.y</code>值重置为了<code>0</code>。Twitter上，则是在合适的时机做了重置。这也是推测两者可能是使用了该方案的原因。</p>\n<p>如下图所示：<br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/weibo.gif\" alt=\"weibo\"><br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/twitter.gif\" alt=\"twitter\"></p>\n<h4 id=\"SegementSlide的需求\"><a href=\"#SegementSlide的需求\" class=\"headerlink\" title=\"SegementSlide的需求\"></a>SegementSlide的需求</h4><p><a href=\"https://github.com/Jiar/SegementSlide\">SegementSlide</a>是使用 <strong>方案III</strong> 来实现的。</p>\n<p>此外我希望它还能支持一些别的特性：</p>\n<ol>\n<li>简单易用的接口</li>\n<li>一般使用 方案III 实现的例子，大都只是支持在<code>rootScrollView</code>上实现阻尼效果，我希望也能在<code>childScrollView</code>上实现，可以选择任意一个阻尼来使用。（有阻尼，就可以配套下拉刷新工具来使用了）</li>\n<li>一般使用 方案III 实现的例子，大都是需要手指在子视图部分滑动才能实现联动，希望也能在头部滑动实现联动</li>\n<li>既可以支持使用头部视图，也可以不需要头部视图</li>\n<li>头部视图可以使用简单的接口实现滚动渐变效果（<code>navigation</code>上随着滚动改变背景色、标题、leftItem颜色、rightItem颜色，或是背景色透明之类的），也可以自定义渐变效果</li>\n<li>子控件既可结合一起使用，也可以单独使用</li>\n<li>分页标题旁可以显示红点<br>…</li>\n</ol>\n<p>对此，大都已经实现：</p>\n<ol>\n<li>看下如下示例代码，是否还算简单易用：</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SegementSlide</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeViewController</span>: <span class=\"title\">SegementSlideViewController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> headerHeight: <span class=\"type\">CGFloat?</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view.bounds.height/<span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> headerView: <span class=\"type\">UIView?</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> titlesInSwitcher: [<span class=\"type\">String</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&quot;Swift&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">segementSlideContentViewController</span><span class=\"params\">(at index: Int)</span></span> -&gt; <span class=\"type\">SegementSlideContentScrollViewDelegate?</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">ContentViewController</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        canCacheScrollState = <span class=\"literal\">true</span></span><br><span class=\"line\">        reloadData()</span><br><span class=\"line\">        scrollToSlide(at: <span class=\"number\">0</span>, animated: <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SegementSlide</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewController</span>: <span class=\"title\">UITableViewController</span>, <span class=\"title\">SegementSlideContentScrollViewDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"keyword\">var</span> scrollView: <span class=\"type\">UIScrollView</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tableView</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>已经能否支持“父阻尼”和“子阻尼”效果了</li>\n</ol>\n<p>重写<code>SegementSlideViewController</code>的属性<code>bouncesType</code>，它是一个枚举类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">BouncesType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> parent</span><br><span class=\"line\">    <span class=\"keyword\">case</span> child</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认值为<code>.parent</code>，如下重写，即可实现『子阻尼』效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HomeViewController: SegementSlideViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    override var bouncesType: BouncesType &#123;</span><br><span class=\"line\">        return .child</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>如何使得在头部滑动也能实现滚动联动效果？<br>我在<code>SegementSlideHeaderView</code>中重写了方法<code>func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView?</code>，在合适的情况下返回了<code>childScrollView</code>。目前这不是一个最优的方法，因为我没能够在这个方法中判断出这个事件是滑动还是点击事件，这里还可以优化。</p>\n</li>\n<li><p>既可以支持使用头部视图，也可以不需要头部视图<br><code>SegementSlideViewController</code>是实现这套方案的基类，其中有一个<code>headerView</code>属性，该属性为可选值，返回<code>nil</code>则表示不需要头部视图。我在项目配套的<code>Example</code>工程中，其中的首页便是没有头部视图的示例，不过增加了下拉显示<code>navigation</code>、上滑隐藏<code>navigation</code>的效果。一般使用 方案III 的例子，在<code>rootScrollView</code>上使用了<code>UITableView</code>，为了使用<code>UITableView</code>的<code>tableHeaderView</code>属性，以及吸顶效果。<code>SegementSlide</code>在<code>v1</code>版本的时候，使用了<code>UICollectionView</code>，也是处于同样的目的，现<code>v2</code>已经改成了<code>UIScrollView</code>，吸顶效果的话，可以通过增加一条到<code>view.safeAreaLayoutGuide.topAnchor</code>的约束来实现。</p>\n</li>\n<li><p>快速应用头部渐变效果？<br><code>TransparentSlideViewController</code>是继承于<code>SegementSlideViewController</code>的子类，其中的<code>headerView</code>属性已被改成非可选值。其中另外定义了一些属性，用于头部视图处于『显示状态』或是『嵌入状态』时，<code>titleView</code>和<code>navigationBar</code>对应属性的改动。</p>\n</li>\n</ol>\n<p>如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typealias DisplayEmbed&lt;T&gt; &#x3D; (display: T, embed: T)</span><br><span class=\"line\"></span><br><span class=\"line\">override var isTranslucents: DisplayEmbed&lt;Bool&gt; &#123;</span><br><span class=\"line\">    return (true, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var attributedTexts: DisplayEmbed&lt;NSAttributedString?&gt; &#123;</span><br><span class=\"line\">    return (nil, nil)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var barStyles: DisplayEmbed&lt;UIBarStyle&gt; &#123;</span><br><span class=\"line\">    return (.black, .default)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var barTintColors: DisplayEmbed&lt;UIColor?&gt; &#123;</span><br><span class=\"line\">    return (nil, .white)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var tintColors: DisplayEmbed&lt;UIColor&gt; &#123;</span><br><span class=\"line\">    return (.white, .black)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>DisplayEmbed</code>为一个<code>typealias</code>表示『显示状态』或是『嵌入状态』时的值。</p>\n<p>需要注意的是：</p>\n<ul>\n<li><code>TransparentSlideViewController</code>中的<code>titleView</code>是使用自定义的方式并赋值给<code>navigationItem.titleView</code>来实现的，最先考虑的是修改<code>navigationBar</code>的<code>titleTextAttributes</code>属性，实践下来，发现会出现<code>titleTextAttributes</code>已经修改完毕，但是效果没有改变的情况。</li>\n<li><code>TransparentSlideViewController</code>会在<code>viewWillAppear</code>时保存<code>navigation</code>上对应样式的状态，并在<code>viewWillDisappear</code>时进行还原，来保证从一个<code>TransparentSlideViewController</code>（A）进入到另一个<code>TransparentSlideViewController</code>（B）时，<code>navigation</code>上样式的状态不会有错误，所以也不该在<code>viewDidLoad</code>时修改<code>navigation</code>上的样式，因为<code>B</code>的<code>viewDidLoad</code>先于<code>A</code>的<code>viewWillDisappear</code>执行。</li>\n</ul>\n<p>如果需要自定义渐变效果，可以模仿<code>TransparentSlideViewController</code>继承<code>SegementSlideViewController</code>来实现需要的效果。<code>Example</code>中使用的是原生的<code>UINavigationController</code>，和<code>TransparentSlideViewController</code>配合起来，可以做到还算满意的效果。但是，实际情况下每个项目中可能会去改动默认的<code>navigation</code>，如果<code>TransparentSlideViewController</code>不适用，则需要使用自定义的方式来支持已有项目。</p>\n<ol start=\"6\">\n<li><p>子控件既可结合一起使用，也可以单独使用<br>目前<code>SegementSlideSwitcherView</code>和<code>SegementSlideContentView</code>既可以作为<code>SegementSlideViewController</code>的子控件来使用，也可以单独拿出来使用，<code>Example</code>工程中的<code>NoticeViewController</code>便是单独使用的例子，实现了将<code>switcher</code>放在<code>navigation</code>上的效果。</p>\n</li>\n<li><p>红点显示？<br><code>SegementSlideSwitcherView</code>支持了红点显示</p>\n</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">BadgeType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">none</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> point</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">count</span>(<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>红点类型为枚举值，从上述代码可以看出红点是支持『普通红点显示』还有『带数字红点显示』。</p>\n<h4 id=\"还需要优化的点\"><a href=\"#还需要优化的点\" class=\"headerlink\" title=\"还需要优化的点\"></a>还需要优化的点</h4><ol>\n<li><p>上面在第3点已经提到，『头部滑动也能实现滚动联动效果』目前对此的解决方法不是最优。</p>\n</li>\n<li><p>方案III 所提到的『位置突变现象』，我在<code>SegementSlideViewController</code>中提供了<code>canCacheScrollState</code>属性，值为<code>true</code>时，在切换界面的时候会缓存当前的<code>canParentViewScroll</code>、<code>canChildViewScroll</code>以及<code>rootScrollView</code>的<code>contentOffset.y</code>值，并在切换回该界面的时候恢复；值为<code>false</code>时，即为类似微博的处理，在切换到新界面前将当前界面的<code>childScrollView</code>的<code>contentOffset.y</code>值置为<code>0</code>。设置为<code>true</code>时会有一个效果，担心这个效果难以被接受，故将该值的默认值设置为了<code>false</code>。</p>\n</li>\n</ol>\n<p>效果如下：<br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/canCacheScrollState.gif\" alt=\"canCacheScrollState\"></p>\n<p>但这仍不是一个很好的处理方式。</p>\n<ol start=\"3\">\n<li>联动滚动切换的时候，还没有达到完美的流畅效果。由于<code>point A</code>和<code>point B</code>处将<code>contentOffset.y</code>强制设值来阻止滚动，同时也导致了滚动切换时『动能』不足的结果，也就是还不够流畅。</li>\n</ol>\n<h4 id=\"接下去要做的事\"><a href=\"#接下去要做的事\" class=\"headerlink\" title=\"接下去要做的事\"></a>接下去要做的事</h4><p>自然是要解决上面提到的三点不足的地方，要想让联动完美般流畅，还是需要使用一个滚动，而不是两个。我在本地开了个<code>v3</code>分支做了个尝试，在视图顶层覆盖一层透明的<code>UIScrollView</code>，借用它的手势、它的<code>contentOffset</code>来控制<code>rootScrollView</code>和<code>childScrollView</code>的<code>contentOffset</code>，可以解决上述提到的三个需要优化的点，但是同时也带来了其他好多问题，这里就不细说了，哪天问题都解决了，更新了<code>v3</code>版本，再来补充说明吧。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/df01610b4e73\">iOS 嵌套UIScrollview的滑动冲突另一种解决方案</a></li>\n<li><a href=\"https://www.jianshu.com/p/8bf6c2953da3\">iOS scrollView嵌套tableView的手势冲突解决方案</a></li>\n</ul>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>编写本文时，<a href=\"https://github.com/Jiar/SegementSlide\">SegementSlide</a>的版本号为<code>2.0-beta-13</code>。另外，本站还未开通评论功能，如对本文中的内容存在疑问，或者发现文中的不正确之处，欢迎在本文的<a href=\"https://juejin.im/post/6844903776130695175\">掘金地址</a>评论区中<strong>友善</strong>提出。如对本项目有任何疑问，欢迎前往<a href=\"https://github.com/Jiar/SegementSlide/issues\">issues</a>提出，同时也欢迎来<a href=\"https://github.com/Jiar/SegementSlide/pulls\">Pull requests</a>，为本项目做贡献。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://juejin.cn/post/6844903776130695175\">掘金阅读地址在这里</a></p>\n<p>本文旨在对于<a href=\"https://github.com/Jiar/SegementSlide\">SegementSlide</a>库实现原理的讲解，有兴趣的同学，欢迎前往<a href=\"https://github.com/Jiar/SegementSlide\">Github地址</a>浏览。</p>\n<p><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/Logo.png\" alt=\"SegementSlide\"></p>\n<hr>\n<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>如今的app中，越来越多地采用如下图所示的设计，一般用在诸如『用户主页』、『话题详情页』、『专题详情页』等这些场景。通常，这些场景会带有头部视图（头部视图可能要求支持滚动渐变），下面紧接着的是分页控件，最下面是滚动列表。</p>\n<p>如下图所示：<br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/transparent.gif\" alt=\"SegementSlide\"></p>","more":"<h4 id=\"各种方案以及优缺点\"><a href=\"#各种方案以及优缺点\" class=\"headerlink\" title=\"各种方案以及优缺点\"></a>各种方案以及优缺点</h4><p>为了方便下面的说明，在开始之前，先约定几个说法，下面的各种方案，大都离不开在最底层放上一个<code>UIScrollView</code>（竖直方向滚动），我们称之为<code>rootScrollView</code>。无论分页控件下方有多少个子界面，总有一个当前界面，我们称当前界面下的<code>UIScrollView</code>（竖直方向滚动）为<code>childScrollView</code>。</p>\n<h5 id=\"I-控制isScrollEnabled属性\"><a href=\"#I-控制isScrollEnabled属性\" class=\"headerlink\" title=\"I 控制isScrollEnabled属性\"></a>I 控制<code>isScrollEnabled</code>属性</h5><p>这是我们第一时间能想到的方案，通过给<code>rootScrollView</code>和<code>childScrollView</code>实现<code>UIScrollViewDelegate</code>，并在<code>func scrollViewDidScroll(_ scrollView: UIScrollView)</code>方法中实时将<code>scrollView.contentOffset.y</code>与临界值进行对比从而修改两者<code>scrollView</code>的<code>isScrollEnabled</code>属性值来达到目的。</p>\n<p>大致代码如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> scrollView == rootScrollView &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> scrollView.contentOffset.y &gt;= headerStickyHeight &#123;</span><br><span class=\"line\">            scrollView.contentOffset.y = headerStickyHeight</span><br><span class=\"line\">            rootScrollView.isScrollEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">            childScrollView.isScrollEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> scrollView.contentOffset.y &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            scrollView.contentOffset.y = <span class=\"number\">0</span></span><br><span class=\"line\">            childScrollView.isScrollEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">            rootScrollView.isScrollEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法简单，但是有个不太能接受的交互问题，但凡将<code>isScrollEnabled</code>设置为<code>false</code>，这次的滑动手势就会被打断，从表现上来看，就是滑动到临界值时滑动会被中断。</p>\n<h5 id=\"II-自定义滑动手势\"><a href=\"#II-自定义滑动手势\" class=\"headerlink\" title=\"II 自定义滑动手势\"></a>II 自定义滑动手势</h5><p>在这篇文章<a href=\"https://www.jianshu.com/p/df01610b4e73\">这篇文章</a>中，作者提供了一种利用自定义手势的方式来实现。<br>但是，只是添加普通的滑动手势是不够的，<code>UIScrollView</code>是自带阻尼效果的，因此引入了<code>UIDynamicAnimator </code>来实现阻尼效果。<br>这是一种不错的思路。不过完全自定义手势来实现<code>UIScrollView</code>的效果，需要考虑的细节过多，挺难处理得跟系统的效果一致（写这篇文章的时候，下载了作者提供的<a href=\"https://github.com/Junlau/ScrollViewInScrollView\">源码</a>，<code>commitID</code>为<code>ff7b76f8468bc87fea8ea6975d8b9fe1173ab031</code>，在真机<code>iPhone X</code>上运行，感觉还是有交互上的问题）。此外，因为是自定义手势，手势不是直接作用在<code>UIScrollView</code>上的，<code>UIScrollView</code>的<code>ScrollIndicator</code>是无法显示的，通过改变<code>UIScrollView</code>的<code>contentOffset</code>，其<code>ScrollIndicator</code>也是无法显示的，必须要手势作用在<code>UIScrollView</code>上才行。使用<code>UIScrollView</code>的<code>flashScrollIndicators()</code>来强迫<code>ScrollIndicator</code>显示出来？…可能还真行，不过我没试过，感觉太粗暴了。</p>\n<h5 id=\"III-手势穿透\"><a href=\"#III-手势穿透\" class=\"headerlink\" title=\"III 手势穿透\"></a>III 手势穿透</h5><p>这应该是目前相对主流的一种实现方式，比如在<a href=\"https://www.jianshu.com/p/8bf6c2953da3\">这篇文章中</a>，便是介绍了这种方式。据我观察Twitter和微博的用户主页可能是使用这种方式实现的（写这篇文章的时候，Twitter版本为：7.41.2，微博版本为：9.2.0，推测错了的话还望见谅）</p>\n<p>该方案的核心为有两点：</p>\n<ul>\n<li>让滑动手势穿透使得<code>rootScrollView</code>和<code>childScrollView</code>都能接收到滑动手势（因为手势是作用到<code>UIScrollview</code>上的，自然是能显示<code>ScrollIndicator</code>的）。做法是让<code>rootScrollView</code>实现<code>UIGestureRecognizerDelegate</code>的代理方法<code>func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -&gt; Bool</code>，并在适当的时机返回<code>true</code>。</li>\n</ul>\n<p>这部分的代码大致如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SegementSlideScrollView</span>: <span class=\"title\">UIScrollView</span>, <span class=\"title\">UIGestureRecognizerDelegate</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gestureRecognizer</span><span class=\"params\">(<span class=\"number\">_</span> gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然只是如此的话，是不够的，这样的结果是滑动的时候，导致<code>rootScrollView</code>和<code>childScrollView</code>一起滚动。</p>\n<ul>\n<li>增加两个标志位来控制何时允许<code>rootScrollView</code>滚动，以及何时允许<code>childScrollView</code>。</li>\n</ul>\n<p>这部分代码大致如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> scrollView == rootScrollView &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !canParentViewScroll &#123;</span><br><span class=\"line\">            rootScrollView.contentOffset.y = headerStickyHeight <span class=\"comment\">// point A</span></span><br><span class=\"line\">            canChildViewScroll = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> scrollView.contentOffset.y &gt;= headerStickyHeight &#123;</span><br><span class=\"line\">            rootScrollView.contentOffset.y = headerStickyHeight</span><br><span class=\"line\">            canParentViewScroll = <span class=\"literal\">false</span></span><br><span class=\"line\">            canChildViewScroll = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !canChildViewScroll &#123;</span><br><span class=\"line\">            childScrollView.contentOffset.y = <span class=\"number\">0</span> <span class=\"comment\">// point B</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> scrollView.contentOffset.y &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            canChildViewScroll = <span class=\"literal\">false</span></span><br><span class=\"line\">            canParentViewScroll = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码所示，控制<code>rootScrollView</code>或者是<code>childScrollView</code>不可滚动的方式是将两者的<code>contentOffset.y</code>设置为一个固定值（见注释<code>point A</code>和<code>point B</code>），并不是简单地将<code>isScrollEnabled</code>设置<code>false</code>而已。</p>\n<p> 没问题了？不，也是有不足之处的：<br>**<em>在第一个界面使用手指向上滑动，让头部视图完全被隐藏后再向上滑动一些，让<code>childScrollView</code>的<code>contentOffset.y</code>处于大于<code>0</code>的状态，随后，左右切换到第二个界面，使用手指向下滑动，完全拉出头部视图，然后再切换回第一个界面，这个时候，使用手指在屏幕上稍微滑动一下，<code>rootScrollView</code>或是<code>childScrollView</code>的<code>contentOffset.y</code>会突变，从表现上看，就是发生『位置突变现象』**</em></p>\n<p>问题产生的原因是什么？<br><code>canParentViewScroll</code>和<code>childScrollView</code>始终为一对相反的值，浏览上诉代码，会发现在<code>point A</code>和<code>point B</code>处，将<code>rootScrollView</code>或者是<code>childScrollView</code>的<code>contentOffset.y</code>设置为了一个固定值。这样的处理，当始终在同一个界面滑动的时候，不会有问题，但是，在切换界面后，由于<code>rootScrollView</code>是共用的，在新界面改动了<code>rootScrollView</code>的<code>contentOffset.y</code>，切换回原界面后，稍做滑动，定会执行<code>point A</code>或是<code>point B</code>其中的一处代码，从而导致『位置突变现象』。</p>\n<p>在微博和Twitter中对此问题做了简单的处理。微博上，在切换至新界面之前，将原界面的<code>childScrollView</code>的<code>contentOffset.y</code>值重置为了<code>0</code>。Twitter上，则是在合适的时机做了重置。这也是推测两者可能是使用了该方案的原因。</p>\n<p>如下图所示：<br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/weibo.gif\" alt=\"weibo\"><br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/twitter.gif\" alt=\"twitter\"></p>\n<h4 id=\"SegementSlide的需求\"><a href=\"#SegementSlide的需求\" class=\"headerlink\" title=\"SegementSlide的需求\"></a>SegementSlide的需求</h4><p><a href=\"https://github.com/Jiar/SegementSlide\">SegementSlide</a>是使用 <strong>方案III</strong> 来实现的。</p>\n<p>此外我希望它还能支持一些别的特性：</p>\n<ol>\n<li>简单易用的接口</li>\n<li>一般使用 方案III 实现的例子，大都只是支持在<code>rootScrollView</code>上实现阻尼效果，我希望也能在<code>childScrollView</code>上实现，可以选择任意一个阻尼来使用。（有阻尼，就可以配套下拉刷新工具来使用了）</li>\n<li>一般使用 方案III 实现的例子，大都是需要手指在子视图部分滑动才能实现联动，希望也能在头部滑动实现联动</li>\n<li>既可以支持使用头部视图，也可以不需要头部视图</li>\n<li>头部视图可以使用简单的接口实现滚动渐变效果（<code>navigation</code>上随着滚动改变背景色、标题、leftItem颜色、rightItem颜色，或是背景色透明之类的），也可以自定义渐变效果</li>\n<li>子控件既可结合一起使用，也可以单独使用</li>\n<li>分页标题旁可以显示红点<br>…</li>\n</ol>\n<p>对此，大都已经实现：</p>\n<ol>\n<li>看下如下示例代码，是否还算简单易用：</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SegementSlide</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeViewController</span>: <span class=\"title\">SegementSlideViewController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> headerHeight: <span class=\"type\">CGFloat?</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view.bounds.height/<span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> headerView: <span class=\"type\">UIView?</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> titlesInSwitcher: [<span class=\"type\">String</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&quot;Swift&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>, <span class=\"string\">&quot;Kotlin&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">segementSlideContentViewController</span><span class=\"params\">(at index: Int)</span></span> -&gt; <span class=\"type\">SegementSlideContentScrollViewDelegate?</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">ContentViewController</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        canCacheScrollState = <span class=\"literal\">true</span></span><br><span class=\"line\">        reloadData()</span><br><span class=\"line\">        scrollToSlide(at: <span class=\"number\">0</span>, animated: <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SegementSlide</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewController</span>: <span class=\"title\">UITableViewController</span>, <span class=\"title\">SegementSlideContentScrollViewDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"keyword\">var</span> scrollView: <span class=\"type\">UIScrollView</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tableView</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>已经能否支持“父阻尼”和“子阻尼”效果了</li>\n</ol>\n<p>重写<code>SegementSlideViewController</code>的属性<code>bouncesType</code>，它是一个枚举类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">BouncesType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> parent</span><br><span class=\"line\">    <span class=\"keyword\">case</span> child</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认值为<code>.parent</code>，如下重写，即可实现『子阻尼』效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HomeViewController: SegementSlideViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    override var bouncesType: BouncesType &#123;</span><br><span class=\"line\">        return .child</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>如何使得在头部滑动也能实现滚动联动效果？<br>我在<code>SegementSlideHeaderView</code>中重写了方法<code>func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView?</code>，在合适的情况下返回了<code>childScrollView</code>。目前这不是一个最优的方法，因为我没能够在这个方法中判断出这个事件是滑动还是点击事件，这里还可以优化。</p>\n</li>\n<li><p>既可以支持使用头部视图，也可以不需要头部视图<br><code>SegementSlideViewController</code>是实现这套方案的基类，其中有一个<code>headerView</code>属性，该属性为可选值，返回<code>nil</code>则表示不需要头部视图。我在项目配套的<code>Example</code>工程中，其中的首页便是没有头部视图的示例，不过增加了下拉显示<code>navigation</code>、上滑隐藏<code>navigation</code>的效果。一般使用 方案III 的例子，在<code>rootScrollView</code>上使用了<code>UITableView</code>，为了使用<code>UITableView</code>的<code>tableHeaderView</code>属性，以及吸顶效果。<code>SegementSlide</code>在<code>v1</code>版本的时候，使用了<code>UICollectionView</code>，也是处于同样的目的，现<code>v2</code>已经改成了<code>UIScrollView</code>，吸顶效果的话，可以通过增加一条到<code>view.safeAreaLayoutGuide.topAnchor</code>的约束来实现。</p>\n</li>\n<li><p>快速应用头部渐变效果？<br><code>TransparentSlideViewController</code>是继承于<code>SegementSlideViewController</code>的子类，其中的<code>headerView</code>属性已被改成非可选值。其中另外定义了一些属性，用于头部视图处于『显示状态』或是『嵌入状态』时，<code>titleView</code>和<code>navigationBar</code>对应属性的改动。</p>\n</li>\n</ol>\n<p>如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typealias DisplayEmbed&lt;T&gt; &#x3D; (display: T, embed: T)</span><br><span class=\"line\"></span><br><span class=\"line\">override var isTranslucents: DisplayEmbed&lt;Bool&gt; &#123;</span><br><span class=\"line\">    return (true, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var attributedTexts: DisplayEmbed&lt;NSAttributedString?&gt; &#123;</span><br><span class=\"line\">    return (nil, nil)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var barStyles: DisplayEmbed&lt;UIBarStyle&gt; &#123;</span><br><span class=\"line\">    return (.black, .default)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var barTintColors: DisplayEmbed&lt;UIColor?&gt; &#123;</span><br><span class=\"line\">    return (nil, .white)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override var tintColors: DisplayEmbed&lt;UIColor&gt; &#123;</span><br><span class=\"line\">    return (.white, .black)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>DisplayEmbed</code>为一个<code>typealias</code>表示『显示状态』或是『嵌入状态』时的值。</p>\n<p>需要注意的是：</p>\n<ul>\n<li><code>TransparentSlideViewController</code>中的<code>titleView</code>是使用自定义的方式并赋值给<code>navigationItem.titleView</code>来实现的，最先考虑的是修改<code>navigationBar</code>的<code>titleTextAttributes</code>属性，实践下来，发现会出现<code>titleTextAttributes</code>已经修改完毕，但是效果没有改变的情况。</li>\n<li><code>TransparentSlideViewController</code>会在<code>viewWillAppear</code>时保存<code>navigation</code>上对应样式的状态，并在<code>viewWillDisappear</code>时进行还原，来保证从一个<code>TransparentSlideViewController</code>（A）进入到另一个<code>TransparentSlideViewController</code>（B）时，<code>navigation</code>上样式的状态不会有错误，所以也不该在<code>viewDidLoad</code>时修改<code>navigation</code>上的样式，因为<code>B</code>的<code>viewDidLoad</code>先于<code>A</code>的<code>viewWillDisappear</code>执行。</li>\n</ul>\n<p>如果需要自定义渐变效果，可以模仿<code>TransparentSlideViewController</code>继承<code>SegementSlideViewController</code>来实现需要的效果。<code>Example</code>中使用的是原生的<code>UINavigationController</code>，和<code>TransparentSlideViewController</code>配合起来，可以做到还算满意的效果。但是，实际情况下每个项目中可能会去改动默认的<code>navigation</code>，如果<code>TransparentSlideViewController</code>不适用，则需要使用自定义的方式来支持已有项目。</p>\n<ol start=\"6\">\n<li><p>子控件既可结合一起使用，也可以单独使用<br>目前<code>SegementSlideSwitcherView</code>和<code>SegementSlideContentView</code>既可以作为<code>SegementSlideViewController</code>的子控件来使用，也可以单独拿出来使用，<code>Example</code>工程中的<code>NoticeViewController</code>便是单独使用的例子，实现了将<code>switcher</code>放在<code>navigation</code>上的效果。</p>\n</li>\n<li><p>红点显示？<br><code>SegementSlideSwitcherView</code>支持了红点显示</p>\n</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">BadgeType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">none</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> point</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">count</span>(<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>红点类型为枚举值，从上述代码可以看出红点是支持『普通红点显示』还有『带数字红点显示』。</p>\n<h4 id=\"还需要优化的点\"><a href=\"#还需要优化的点\" class=\"headerlink\" title=\"还需要优化的点\"></a>还需要优化的点</h4><ol>\n<li><p>上面在第3点已经提到，『头部滑动也能实现滚动联动效果』目前对此的解决方法不是最优。</p>\n</li>\n<li><p>方案III 所提到的『位置突变现象』，我在<code>SegementSlideViewController</code>中提供了<code>canCacheScrollState</code>属性，值为<code>true</code>时，在切换界面的时候会缓存当前的<code>canParentViewScroll</code>、<code>canChildViewScroll</code>以及<code>rootScrollView</code>的<code>contentOffset.y</code>值，并在切换回该界面的时候恢复；值为<code>false</code>时，即为类似微博的处理，在切换到新界面前将当前界面的<code>childScrollView</code>的<code>contentOffset.y</code>值置为<code>0</code>。设置为<code>true</code>时会有一个效果，担心这个效果难以被接受，故将该值的默认值设置为了<code>false</code>。</p>\n</li>\n</ol>\n<p>效果如下：<br><img src=\"/2019/02/13/Multi-tier-UIScrollView-nested-scrolling-solution/canCacheScrollState.gif\" alt=\"canCacheScrollState\"></p>\n<p>但这仍不是一个很好的处理方式。</p>\n<ol start=\"3\">\n<li>联动滚动切换的时候，还没有达到完美的流畅效果。由于<code>point A</code>和<code>point B</code>处将<code>contentOffset.y</code>强制设值来阻止滚动，同时也导致了滚动切换时『动能』不足的结果，也就是还不够流畅。</li>\n</ol>\n<h4 id=\"接下去要做的事\"><a href=\"#接下去要做的事\" class=\"headerlink\" title=\"接下去要做的事\"></a>接下去要做的事</h4><p>自然是要解决上面提到的三点不足的地方，要想让联动完美般流畅，还是需要使用一个滚动，而不是两个。我在本地开了个<code>v3</code>分支做了个尝试，在视图顶层覆盖一层透明的<code>UIScrollView</code>，借用它的手势、它的<code>contentOffset</code>来控制<code>rootScrollView</code>和<code>childScrollView</code>的<code>contentOffset</code>，可以解决上述提到的三个需要优化的点，但是同时也带来了其他好多问题，这里就不细说了，哪天问题都解决了，更新了<code>v3</code>版本，再来补充说明吧。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/df01610b4e73\">iOS 嵌套UIScrollview的滑动冲突另一种解决方案</a></li>\n<li><a href=\"https://www.jianshu.com/p/8bf6c2953da3\">iOS scrollView嵌套tableView的手势冲突解决方案</a></li>\n</ul>\n<h4 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h4><p>编写本文时，<a href=\"https://github.com/Jiar/SegementSlide\">SegementSlide</a>的版本号为<code>2.0-beta-13</code>。另外，本站还未开通评论功能，如对本文中的内容存在疑问，或者发现文中的不正确之处，欢迎在本文的<a href=\"https://juejin.im/post/6844903776130695175\">掘金地址</a>评论区中<strong>友善</strong>提出。如对本项目有任何疑问，欢迎前往<a href=\"https://github.com/Jiar/SegementSlide/issues\">issues</a>提出，同时也欢迎来<a href=\"https://github.com/Jiar/SegementSlide/pulls\">Pull requests</a>，为本项目做贡献。</p>\n<p>欢迎关注我的个人微信订阅号，我将不定期分享开发方面的干货。</p>\n<p><img src=\"/images/Dingyuehao.jpg\" alt=\"Jiar&#39;s 微信订阅号\"></p>"}],"PostAsset":[{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png","slug":"Android-BaiduMap-MyLocationConfiguration-Set-Color-0001.png","post":"ckhcv3f6h0003rlf601tjcblo","modified":0,"renderable":0},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png","slug":"Android-BaiduMap-MyLocationConfiguration-Set-Color-0002.png","post":"ckhcv3f6h0003rlf601tjcblo","modified":0,"renderable":0},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png","slug":"Android-BaiduMap-MyLocationConfiguration-Set-Color-0003.png","post":"ckhcv3f6h0003rlf601tjcblo","modified":0,"renderable":0},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png","slug":"Android-BaiduMap-MyLocationConfiguration-Set-Color-0004.png","post":"ckhcv3f6h0003rlf601tjcblo","modified":0,"renderable":0},{"_id":"source/_posts/Android-BaiduMap-MyLocationConfiguration-Set-Color/Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png","slug":"Android-BaiduMap-MyLocationConfiguration-Set-Color-result.png","post":"ckhcv3f6h0003rlf601tjcblo","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/tcp_hand_shake_detail.png","slug":"tcp_hand_shake_detail.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/tcp_hand_shake_three_times.png","slug":"tcp_hand_shake_three_times.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/tcp_head.png","slug":"tcp_head.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/wireshark_main.png","slug":"wireshark_main.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake.png","slug":"wireshark_tcp_shake.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake_first.png","slug":"wireshark_tcp_shake_first.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake_second.png","slug":"wireshark_tcp_shake_second.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/wireshark_tcp_shake_third.png","slug":"wireshark_tcp_shake_third.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP三次握手简介/wireshark_welcome.png","slug":"wireshark_welcome.png","post":"ckhcv3f6l0007rlf62ys4hggu","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/tcp_hand_wave_detail.png","slug":"tcp_hand_wave_detail.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/tcp_head.png","slug":"tcp_head.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_main.png","slug":"wireshark_main.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave.png","slug":"wireshark_tcp_wave.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_first.png","slug":"wireshark_tcp_wave_first.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_fourth.png","slug":"wireshark_tcp_wave_fourth.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_second.png","slug":"wireshark_tcp_wave_second.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_tcp_wave_third.png","slug":"wireshark_tcp_wave_third.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/TCP四次挥手简介/wireshark_welcome.png","slug":"wireshark_welcome.png","post":"ckhcv3f6m0008rlf69wy2e9ti","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/163EmailHelp.png","slug":"163EmailHelp.png","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/CodeSigning&OSXKeychainOptions.jpeg","slug":"CodeSigning&OSXKeychainOptions.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ContentTokenReference.jpeg","slug":"ContentTokenReference.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep1.jpeg","slug":"EditableEmailNotificationStep1.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep2.jpeg","slug":"EditableEmailNotificationStep2.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep3.jpeg","slug":"EditableEmailNotificationStep3.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep4.jpeg","slug":"EditableEmailNotificationStep4.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/EditableEmailNotificationStep5.jpeg","slug":"EditableEmailNotificationStep5.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ExecuteShell.jpeg","slug":"ExecuteShell.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ExtendedE-mailNotificationPart1.jpeg","slug":"ExtendedE-mailNotificationPart1.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ExtendedE-mailNotificationPart2.jpeg","slug":"ExtendedE-mailNotificationPart2.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ExtendedE-mailNotificationPart3.jpeg","slug":"ExtendedE-mailNotificationPart3.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/HaveFileNameAndUUID.png","slug":"HaveFileNameAndUUID.png","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/KeychainsAndCodeSigningIdentities.jpeg","slug":"KeychainsAndCodeSigningIdentities.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/NoFileNameAndUUID.jpeg","slug":"NoFileNameAndUUID.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/POP3SMTPIMAP.jpeg","slug":"POP3SMTPIMAP.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ProvisioningProfilesDirectoryPath.jpeg","slug":"ProvisioningProfilesDirectoryPath.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/ignore.jpeg","slug":"ignore.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/客户端授权密码.jpeg","slug":"客户端授权密码.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/iOS项目持续集成/邮件通知.jpeg","slug":"邮件通知.jpeg","post":"ckhcv3f6p000drlf6cbi48h89","modified":0,"renderable":0},{"_id":"source/_posts/UITextField光标异常/UITextField光标异常.gif","slug":"UITextField光标异常.gif","post":"ckhcv3f6o000crlf66daxe35g","modified":0,"renderable":0},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/Eureka-commit.jpeg","slug":"Eureka-commit.jpeg","post":"ckhcv3f6s000mrlf65a6k2hj2","modified":0,"renderable":0},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/Project-Build-Settings-Swift-Language-Version.png","slug":"Project-Build-Settings-Swift-Language-Version.png","post":"ckhcv3f6s000mrlf65a6k2hj2","modified":0,"renderable":0},{"_id":"source/_posts/适配Xcode9-0-beta与Swift4.0/Xcode9.0-beta-icon.png","slug":"Xcode9.0-beta-icon.png","post":"ckhcv3f6s000mrlf65a6k2hj2","modified":0,"renderable":0},{"_id":"source/_posts/JRAlertController/weibo.jpeg","slug":"weibo.jpeg","post":"ckhcv3f7a0036rlf6fo1nf738","modified":0,"renderable":0},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/Logo.png","slug":"Logo.png","post":"ckzmgah0s00000i8s4q88e9iz","modified":0,"renderable":0},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/canCacheScrollState.gif","slug":"canCacheScrollState.gif","post":"ckzmgah0s00000i8s4q88e9iz","modified":0,"renderable":0},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/transparent.gif","slug":"transparent.gif","post":"ckzmgah0s00000i8s4q88e9iz","modified":0,"renderable":0},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/twitter.gif","slug":"twitter.gif","post":"ckzmgah0s00000i8s4q88e9iz","modified":0,"renderable":0},{"_id":"source/_posts/Multi-tier-UIScrollView-nested-scrolling-solution/weibo.gif","slug":"weibo.gif","post":"ckzmgah0s00000i8s4q88e9iz","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckhcv3f6f0001rlf669d4ggdr","category_id":"ckhcv3f6j0004rlf6acuuhbje","_id":"ckhcv3f6p000erlf6dko25qxi"},{"post_id":"ckhcv3f6h0003rlf601tjcblo","category_id":"ckhcv3f6n000arlf6562m2q9w","_id":"ckhcv3f6r000jrlf6eojh0ozi"},{"post_id":"ckhcv3f6l0007rlf62ys4hggu","category_id":"ckhcv3f6p000frlf6d0921haq","_id":"ckhcv3f6u000orlf6gwo5exd1"},{"post_id":"ckhcv3f6m0008rlf69wy2e9ti","category_id":"ckhcv3f6p000frlf6d0921haq","_id":"ckhcv3f6u000qrlf660at1ms5"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f6v000urlf6fwhldkda"},{"post_id":"ckhcv3f6o000crlf66daxe35g","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f6v000yrlf67st2cnz4"},{"post_id":"ckhcv3f6p000drlf6cbi48h89","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f6y0013rlf6aroz6tex"},{"post_id":"ckhcv3f6q000hrlf6h5we3a03","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f6y0018rlf6d4nj8zss"},{"post_id":"ckhcv3f6r000irlf6b5bm43bj","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f6z001brlf6a4el6k6l"},{"post_id":"ckhcv3f6s000mrlf65a6k2hj2","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f6z001drlf68xdvhw5s"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckhcv3f7b0038rlf6gdvq6qsg"},{"post_id":"ckzmgah0s00000i8s4q88e9iz","category_id":"ckhcv3f6t000nrlf6cxcn4csp","_id":"ckzmgah1000020i8s7deq1oij"}],"PostTag":[{"post_id":"ckhcv3f6f0001rlf669d4ggdr","tag_id":"ckhcv3f6k0005rlf6el0c0k1d","_id":"ckhcv3f6v000wrlf6gdu1h2rt"},{"post_id":"ckhcv3f6f0001rlf669d4ggdr","tag_id":"ckhcv3f6n000brlf64ovje1xt","_id":"ckhcv3f6w000zrlf6cwxb13re"},{"post_id":"ckhcv3f6f0001rlf669d4ggdr","tag_id":"ckhcv3f6p000grlf6bytncm10","_id":"ckhcv3f6x0011rlf69sg4cxvn"},{"post_id":"ckhcv3f6f0001rlf669d4ggdr","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f6y0014rlf688g6c987"},{"post_id":"ckhcv3f6f0001rlf669d4ggdr","tag_id":"ckhcv3f6u000prlf65th07yx1","_id":"ckhcv3f6y0016rlf6dc9hhlrl"},{"post_id":"ckhcv3f6f0001rlf669d4ggdr","tag_id":"ckhcv3f6u000srlf6faewacx6","_id":"ckhcv3f6z0019rlf60fkmdtdv"},{"post_id":"ckhcv3f6h0003rlf601tjcblo","tag_id":"ckhcv3f6u000prlf65th07yx1","_id":"ckhcv3f6z001frlf6awxrc2x2"},{"post_id":"ckhcv3f6h0003rlf601tjcblo","tag_id":"ckhcv3f6w0010rlf6fa2v08vw","_id":"ckhcv3f70001grlf6e5ohapab"},{"post_id":"ckhcv3f6h0003rlf601tjcblo","tag_id":"ckhcv3f6y0015rlf6g9sb3fxg","_id":"ckhcv3f70001irlf65sl62xrb"},{"post_id":"ckhcv3f6h0003rlf601tjcblo","tag_id":"ckhcv3f6z001arlf673vi5hdp","_id":"ckhcv3f70001jrlf64liud2xs"},{"post_id":"ckhcv3f6h0003rlf601tjcblo","tag_id":"ckhcv3f6z001crlf62s81hdr4","_id":"ckhcv3f70001lrlf65eiwha1v"},{"post_id":"ckhcv3f6l0007rlf62ys4hggu","tag_id":"ckhcv3f6z001erlf6hgn052d4","_id":"ckhcv3f70001mrlf62dom3g5e"},{"post_id":"ckhcv3f6l0007rlf62ys4hggu","tag_id":"ckhcv3f70001hrlf6gzhqgawy","_id":"ckhcv3f71001orlf6dyb8bpi1"},{"post_id":"ckhcv3f6m0008rlf69wy2e9ti","tag_id":"ckhcv3f6z001erlf6hgn052d4","_id":"ckhcv3f71001qrlf6e4wo0qe2"},{"post_id":"ckhcv3f6m0008rlf69wy2e9ti","tag_id":"ckhcv3f70001hrlf6gzhqgawy","_id":"ckhcv3f71001rrlf632nq50wf"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f74001yrlf67p1h3xxj"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","tag_id":"ckhcv3f71001srlf66n9q1g1a","_id":"ckhcv3f74001zrlf65c2dc0va"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","tag_id":"ckhcv3f72001trlf6dho2hvf6","_id":"ckhcv3f740021rlf62vmh8txw"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","tag_id":"ckhcv3f72001urlf6e2r0hrcn","_id":"ckhcv3f740022rlf6hrpz1j4f"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","tag_id":"ckhcv3f72001vrlf66wdda3lq","_id":"ckhcv3f740024rlf672erfwwk"},{"post_id":"ckhcv3f6n0009rlf6dagwf318","tag_id":"ckhcv3f72001wrlf6f4yi2zc4","_id":"ckhcv3f740025rlf66z8q3902"},{"post_id":"ckhcv3f6o000crlf66daxe35g","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f750027rlf60jmybypg"},{"post_id":"ckhcv3f6o000crlf66daxe35g","tag_id":"ckhcv3f740020rlf629edhzjw","_id":"ckhcv3f750028rlf62gy08dpi"},{"post_id":"ckhcv3f6p000drlf6cbi48h89","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f76002drlf6d9dph1uu"},{"post_id":"ckhcv3f6p000drlf6cbi48h89","tag_id":"ckhcv3f740026rlf6aw7831g7","_id":"ckhcv3f76002erlf67j6nf3kl"},{"post_id":"ckhcv3f6p000drlf6cbi48h89","tag_id":"ckhcv3f750029rlf638sjaxef","_id":"ckhcv3f76002grlf695lmh7zx"},{"post_id":"ckhcv3f6p000drlf6cbi48h89","tag_id":"ckhcv3f75002arlf6aoxj5mx4","_id":"ckhcv3f76002hrlf600mkfwcq"},{"post_id":"ckhcv3f6p000drlf6cbi48h89","tag_id":"ckhcv3f75002brlf611yl755o","_id":"ckhcv3f76002jrlf602qg7rz9"},{"post_id":"ckhcv3f6q000hrlf6h5we3a03","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f77002mrlf60tij98vc"},{"post_id":"ckhcv3f6q000hrlf6h5we3a03","tag_id":"ckhcv3f76002frlf644u8ekdo","_id":"ckhcv3f77002nrlf6365sfocu"},{"post_id":"ckhcv3f6q000hrlf6h5we3a03","tag_id":"ckhcv3f76002irlf602f86d2x","_id":"ckhcv3f77002prlf680blh787"},{"post_id":"ckhcv3f6q000hrlf6h5we3a03","tag_id":"ckhcv3f76002krlf6gfw26zwj","_id":"ckhcv3f77002qrlf69oa1gd00"},{"post_id":"ckhcv3f6r000irlf6b5bm43bj","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f78002urlf61xe7bmow"},{"post_id":"ckhcv3f6r000irlf6b5bm43bj","tag_id":"ckhcv3f76002frlf644u8ekdo","_id":"ckhcv3f78002vrlf65ez20gbr"},{"post_id":"ckhcv3f6r000irlf6b5bm43bj","tag_id":"ckhcv3f76002irlf602f86d2x","_id":"ckhcv3f78002xrlf6fzpg8px6"},{"post_id":"ckhcv3f6r000irlf6b5bm43bj","tag_id":"ckhcv3f76002krlf6gfw26zwj","_id":"ckhcv3f78002yrlf6eoc37045"},{"post_id":"ckhcv3f6s000mrlf65a6k2hj2","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f790031rlf6hbey66p7"},{"post_id":"ckhcv3f6s000mrlf65a6k2hj2","tag_id":"ckhcv3f78002trlf64buu4k4n","_id":"ckhcv3f790032rlf69vfyh3vc"},{"post_id":"ckhcv3f6s000mrlf65a6k2hj2","tag_id":"ckhcv3f78002wrlf6b4d19kf0","_id":"ckhcv3f790033rlf633ed3y9d"},{"post_id":"ckhcv3f6s000mrlf65a6k2hj2","tag_id":"ckhcv3f78002zrlf61ggc79b8","_id":"ckhcv3f790034rlf6f7g4383c"},{"post_id":"ckhcv3f6s000mrlf65a6k2hj2","tag_id":"ckhcv3f790030rlf669sjfol2","_id":"ckhcv3f790035rlf681vp8k31"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckhcv3f7c003drlf6217g0y47"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","tag_id":"ckhcv3f7b0037rlf6d49939ph","_id":"ckhcv3f7c003erlf6d4uffsb5"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","tag_id":"ckhcv3f7b0039rlf6gpsqedqr","_id":"ckhcv3f7c003frlf63lw4d0f7"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","tag_id":"ckhcv3f7b003arlf63m54c9q8","_id":"ckhcv3f7c003grlf6fewkee3p"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","tag_id":"ckhcv3f7b003brlf6fglfanar","_id":"ckhcv3f7c003hrlf6arjwa482"},{"post_id":"ckhcv3f7a0036rlf6fo1nf738","tag_id":"ckhcv3f7b003crlf60guq7as0","_id":"ckhcv3f7c003irlf67n3z89n7"},{"post_id":"ckzmgah0s00000i8s4q88e9iz","tag_id":"ckhcv3f6r000lrlf64h991w0d","_id":"ckzmgah1000040i8sgg27d11e"},{"post_id":"ckzmgah0s00000i8s4q88e9iz","tag_id":"ckzmgah0w00010i8s0zbo0nws","_id":"ckzmgah1000050i8samzh3zd0"},{"post_id":"ckzmgah0s00000i8s4q88e9iz","tag_id":"ckzmgah1000030i8sd0q7ae2m","_id":"ckzmgah1000060i8sb4ji64nd"}],"Tag":[{"name":"Jiar","_id":"ckhcv3f6k0005rlf6el0c0k1d"},{"name":"Blog","_id":"ckhcv3f6n000brlf64ovje1xt"},{"name":"Jiar's Blog","_id":"ckhcv3f6p000grlf6bytncm10"},{"name":"iOS","_id":"ckhcv3f6r000lrlf64h991w0d"},{"name":"Android","_id":"ckhcv3f6u000prlf65th07yx1"},{"name":"开发者","_id":"ckhcv3f6u000srlf6faewacx6"},{"name":"BaiduMap","_id":"ckhcv3f6w0010rlf6fa2v08vw"},{"name":"MyLocationConfiguration","_id":"ckhcv3f6y0015rlf6g9sb3fxg"},{"name":"accuracyCircleStrokeColor","_id":"ckhcv3f6z001arlf673vi5hdp"},{"name":"accuracyCircleFillColor","_id":"ckhcv3f6z001crlf62s81hdr4"},{"name":"计算机网络","_id":"ckhcv3f6z001erlf6hgn052d4"},{"name":"TCP","_id":"ckhcv3f70001hrlf6gzhqgawy"},{"name":"cell","_id":"ckhcv3f71001srlf66n9q1g1a"},{"name":"UITableview","_id":"ckhcv3f72001trlf6dho2hvf6"},{"name":"UITableview分割线","_id":"ckhcv3f72001urlf6e2r0hrcn"},{"name":"UITableview分割线补全","_id":"ckhcv3f72001vrlf66wdda3lq"},{"name":"UITableview分割线隐藏","_id":"ckhcv3f72001wrlf6f4yi2zc4"},{"name":"UITextField","_id":"ckhcv3f740020rlf629edhzjw"},{"name":"持续集成","_id":"ckhcv3f740026rlf6aw7831g7"},{"name":"打包","_id":"ckhcv3f750029rlf638sjaxef"},{"name":"Jenkins","_id":"ckhcv3f75002arlf6aoxj5mx4"},{"name":"Shell","_id":"ckhcv3f75002brlf611yl755o"},{"name":"键盘","_id":"ckhcv3f76002frlf644u8ekdo"},{"name":"输入框","_id":"ckhcv3f76002irlf602f86d2x"},{"name":"遮盖","_id":"ckhcv3f76002krlf6gfw26zwj"},{"name":"Swift4","_id":"ckhcv3f78002trlf64buu4k4n"},{"name":"Xcode9.0-beta","_id":"ckhcv3f78002wrlf6b4d19kf0"},{"name":"OC(Objective-C)与Swift4混编","_id":"ckhcv3f78002zrlf61ggc79b8"},{"name":"OC(Objective-C)调用Swift4","_id":"ckhcv3f790030rlf669sjfol2"},{"name":"Swift","_id":"ckhcv3f7b0037rlf6d49939ph"},{"name":"JRAlertController","_id":"ckhcv3f7b0039rlf6gpsqedqr"},{"name":"UIAlertController","_id":"ckhcv3f7b003arlf63m54c9q8"},{"name":"alert","_id":"ckhcv3f7b003brlf6fglfanar"},{"name":"sheet","_id":"ckhcv3f7b003crlf60guq7as0"},{"name":"UIScrollView","_id":"ckzmgah0w00010i8s0zbo0nws"},{"name":"嵌套","_id":"ckzmgah1000030i8sd0q7ae2m"},{"name":"Java","_id":"ckzmgk9cg00006n8sdlfz2nwt"}]}}